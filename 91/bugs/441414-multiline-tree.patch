# HG changeset patch
# Date 1630787201 -7200
# User Betterbird <betterbird@betterbird.eu>
# Parent  3634785345fe6391e073ebf19e3f7ce031a43511
Rebased from https://bugzilla.mozilla.org/attachment.cgi?id=8472801

diff --git a/layout/style/nsCSSAnonBoxList.h b/layout/style/nsCSSAnonBoxList.h
--- a/layout/style/nsCSSAnonBoxList.h
+++ b/layout/style/nsCSSAnonBoxList.h
@@ -138,23 +138,26 @@ CSS_WRAPPER_ANON_BOX(ruby, ":-moz-ruby")
 CSS_WRAPPER_ANON_BOX(rubyBase, ":-moz-ruby-base")
 CSS_WRAPPER_ANON_BOX(rubyBaseContainer, ":-moz-ruby-base-container")
 CSS_WRAPPER_ANON_BOX(rubyText, ":-moz-ruby-text")
 CSS_WRAPPER_ANON_BOX(rubyTextContainer, ":-moz-ruby-text-container")
 
 #ifdef MOZ_XUL
 CSS_ANON_BOX(mozTreeColumn, ":-moz-tree-column")
 CSS_ANON_BOX(mozTreeRow, ":-moz-tree-row")
+CSS_ANON_BOX(mozTreeDescription, ":-moz-tree-description")
+CSS_ANON_BOX(mozTreeDescriptionTextPart, ":-moz-tree-description-text-part")
 CSS_ANON_BOX(mozTreeSeparator, ":-moz-tree-separator")
 CSS_ANON_BOX(mozTreeCell, ":-moz-tree-cell")
 CSS_ANON_BOX(mozTreeIndentation, ":-moz-tree-indentation")
 CSS_ANON_BOX(mozTreeLine, ":-moz-tree-line")
 CSS_ANON_BOX(mozTreeTwisty, ":-moz-tree-twisty")
 CSS_ANON_BOX(mozTreeImage, ":-moz-tree-image")
 CSS_ANON_BOX(mozTreeCellText, ":-moz-tree-cell-text")
+CSS_ANON_BOX(mozTreeCellTextPart, ":-moz-tree-cell-text-part")
 CSS_ANON_BOX(mozTreeCheckbox, ":-moz-tree-checkbox")
 CSS_ANON_BOX(mozTreeDropFeedback, ":-moz-tree-drop-feedback")
 #endif
 
 CSS_ANON_BOX(mozSVGMarkerAnonChild, ":-moz-svg-marker-anon-child")
 CSS_ANON_BOX(mozSVGOuterSVGAnonChild, ":-moz-svg-outer-svg-anon-child")
 CSS_ANON_BOX(mozSVGForeignContent, ":-moz-svg-foreign-content")
 CSS_ANON_BOX(mozSVGText, ":-moz-svg-text")
diff --git a/layout/xul/tree/nsITreeView.idl b/layout/xul/tree/nsITreeView.idl
--- a/layout/xul/tree/nsITreeView.idl
+++ b/layout/xul/tree/nsITreeView.idl
@@ -166,8 +166,22 @@ interface nsITreeView : nsISupports
    */
   void setCellValue(in long row, in TreeColumn col, in AString value);
 
   /**
    * setCellText is called when the contents of the cell have been edited by the user.
    */
   void setCellText(in long row, in TreeColumn col, in AString value);
 };
+
+[scriptable, uuid(3c2a2d26-08d6-415b-a635-24f15983bde6)]
+interface nsIMultilineTreeView: nsITreeView
+{
+    long getCellTextPartCount(in long row, in TreeColumn col);
+    AString getCellTextPart(in long row, in TreeColumn col, in long partIdx);
+    Array<ACString> getCellTextPartProperties(in long row, in TreeColumn col, in long partIdx);
+
+    long getDescriptionTextPartCount(in long row);
+    AString getDescriptionTextPart(in long row, in long partIdx);
+    Array<ACString> getDescriptionTextPartProperties(in long row, in long partIdx);
+
+    boolean isMultiline();
+};
diff --git a/layout/xul/tree/nsTreeBodyFrame.cpp b/layout/xul/tree/nsTreeBodyFrame.cpp
--- a/layout/xul/tree/nsTreeBodyFrame.cpp
+++ b/layout/xul/tree/nsTreeBodyFrame.cpp
@@ -84,16 +84,22 @@ void nsTreeBodyFrame::CancelImageRequest
     // then we need to deregister it.
     nsLayoutUtils::DeregisterImageRequest(PresContext(), entry.request,
                                           nullptr);
     entry.request->UnlockImage();
     entry.request->CancelAndForgetObserver(NS_BINDING_ABORTED);
   }
 }
 
+static void AtomArrayExtend(AtomArray& atomArray, nsTArray<nsCString>& more) {
+  for (uint32_t idx = 0; idx < more.Length(); ++idx) {
+    atomArray.AppendElement(NS_Atomize(more[idx]));
+  }
+}
+
 //
 // NS_NewTreeFrame
 //
 // Creates a new tree frame
 //
 nsIFrame* NS_NewTreeBodyFrame(PresShell* aPresShell, ComputedStyle* aStyle) {
   return new (aPresShell) nsTreeBodyFrame(aStyle, aPresShell->GetPresContext());
 }
@@ -119,16 +125,17 @@ nsTreeBodyFrame::nsTreeBodyFrame(Compute
       mAdjustWidth(0),
       mRowHeight(0),
       mIndentation(0),
       mStringWidth(-1),
       mUpdateBatchNest(0),
       mRowCount(0),
       mMouseOverRow(-1),
       mFocused(false),
+      mIsMultiline(false),
       mHasFixedRowCount(false),
       mVerticalOverflow(false),
       mHorizontalOverflow(false),
       mReflowCallbackPosted(false),
       mCheckingOverflow(false) {
   mColumns = new nsTreeColumns(this);
 }
 
@@ -152,16 +159,17 @@ static void AdjustForBorderPadding(Compu
 }
 
 void nsTreeBodyFrame::Init(nsIContent* aContent, nsContainerFrame* aParent,
                            nsIFrame* aPrevInFlow) {
   nsLeafBoxFrame::Init(aContent, aParent, aPrevInFlow);
 
   mIndentation = GetIndentation();
   mRowHeight = GetRowHeight();
+  mIsMultiline = false;
 
   // Call GetBaseElement so that mTree is assigned.
   GetBaseElement();
 
   if (LookAndFeel::GetInt(LookAndFeel::IntID::UseOverlayScrollbars) != 0) {
     mScrollbarActivity =
         new ScrollbarActivity(static_cast<nsIScrollbarMediator*>(this));
   }
@@ -386,16 +394,20 @@ nsresult nsTreeBodyFrame::SetView(nsITre
     // Only reset the top row index and delete the columns if we had an old
     // non-null view.
     mTopRowIndex = 0;
   }
 
   // Tree, meet the view.
   mView = aView;
 
+  nsCOMPtr<nsIMultilineTreeView> multilineView = do_QueryInterface(mView);
+  if (multilineView) multilineView->IsMultiline(&mIsMultiline);
+  mRowHeight = GetRowHeight();
+
   // Changing the view causes us to refetch our data.  This will
   // necessarily entail a full invalidation of the tree.
   Invalidate();
 
   RefPtr<XULTreeElement> treeContent = GetBaseElement();
   if (treeContent) {
 #ifdef ACCESSIBILITY
     if (nsAccessibilityService* accService =
@@ -931,18 +943,19 @@ nsresult nsTreeBodyFrame::GetCoordsForCe
     // The Rect for the current cell.
     nscoord colWidth;
 #ifdef DEBUG
     nsresult rv =
 #endif
         currCol->GetWidthInTwips(this, &colWidth);
     NS_ASSERTION(NS_SUCCEEDED(rv), "invalid column");
 
+    int32_t cellHeight = GetCellHeight(aRow, aCol);
     nsRect cellRect(currX, mInnerBox.y + mRowHeight * (aRow - mTopRowIndex),
-                    colWidth, mRowHeight);
+                    colWidth, cellHeight);
 
     // Check the ID of the current column to see if it matches. If it doesn't
     // increment the current X value and continue to the next column.
     if (currCol != aCol) {
       currX += cellRect.width;
       continue;
     }
     // Now obtain the properties for our cell.
@@ -1695,16 +1708,18 @@ void nsTreeBodyFrame::PrefillPropertyArr
   else
     mScratchArray.AppendElement((nsStaticAtom*)nsGkAtoms::blur);
 
   // sort
   bool sorted = false;
   mView->IsSorted(&sorted);
   if (sorted) mScratchArray.AppendElement((nsStaticAtom*)nsGkAtoms::sorted);
 
+  if (mIsMultiline) mScratchArray.AppendElement(nsGkAtoms::multiline);
+
   // drag session
   if (mSlots && mSlots->mIsDragging)
     mScratchArray.AppendElement((nsStaticAtom*)nsGkAtoms::dragSession);
 
   if (aRowIndex != -1) {
     if (aRowIndex == mMouseOverRow)
       mScratchArray.AppendElement((nsStaticAtom*)nsGkAtoms::hover);
 
@@ -2150,20 +2165,40 @@ nsRect nsTreeBodyFrame::GetImageSourceRe
     r.width = nsPresContext::CSSPixelsToAppUnits(coord);
   }
   if (NS_SUCCEEDED(image->GetHeight(&coord))) {
     r.height = nsPresContext::CSSPixelsToAppUnits(coord);
   }
   return r;
 }
 
+int32_t nsTreeBodyFrame::GetCellHeight(int32_t aRow, nsTreeColumn* aColumn) {
+  ComputedStyle* cellContext =
+      GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeCell());
+  const nsStylePosition* cellPosition = cellContext->StylePosition();
+
+  nscoord cellMinHeight = 0;
+  if (cellPosition->mMinHeight.ConvertsToLength())
+    cellMinHeight = cellPosition->mMinHeight.ToLength();
+
+  nscoord cellHeight = 0;
+  if (cellPosition->mHeight.ConvertsToLength())
+    cellHeight = cellPosition->mHeight.ToLength();
+
+  cellHeight = std::min(cellHeight, cellMinHeight);
+  if (cellHeight == 0 || cellHeight > mRowHeight) cellHeight = mRowHeight;
+
+  return cellHeight;
+}
+
 int32_t nsTreeBodyFrame::GetRowHeight() {
   // Look up the correct height.  It is equal to the specified height
   // + the specified margins.
   mScratchArray.Clear();
+  if (mIsMultiline) mScratchArray.AppendElement(nsGkAtoms::multiline);
   ComputedStyle* rowContext =
       GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeRow());
   if (rowContext) {
     const nsStylePosition* myPosition = rowContext->StylePosition();
 
     nscoord minHeight = 0;
     if (myPosition->mMinHeight.ConvertsToLength()) {
       minHeight = myPosition->mMinHeight.ToLength();
@@ -2187,17 +2222,18 @@ int32_t nsTreeBodyFrame::GetRowHeight() 
       nsMargin rowMargin;
       rowContext->StyleMargin()->GetMargin(rowMargin);
       rowRect.Inflate(rowMargin);
       height = rowRect.height;
       return height;
     }
   }
 
-  return nsPresContext::CSSPixelsToAppUnits(18);  // As good a default as any.
+  // As good a default as any.
+  return nsPresContext::CSSPixelsToAppUnits(mIsMultiline ? 36 : 18);
 }
 
 int32_t nsTreeBodyFrame::GetIndentation() {
   // Look up the correct indentation.  It is equal to the specified indentation
   // width.
   mScratchArray.Clear();
   ComputedStyle* indentContext =
       GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeIndentation());
@@ -2863,16 +2899,82 @@ ImgDrawResult nsTreeBodyFrame::PaintRow(
     nsRect separatorRect(rowRect);
     if (primaryX > rowRect.x) {
       separatorRect.width -= primaryX - rowRect.x;
       separatorRect.x += primaryX - rowRect.x;
     }
     result &= PaintSeparator(aRowIndex, separatorRect, aPresContext,
                              aRenderingContext, aDirtyRect);
   } else {
+    if (mIsMultiline) {
+      bool displayDescription = true;
+      PrefillPropertyArray(aRowIndex, nullptr);
+      nsAutoString properties;
+      mView->GetRowProperties(aRowIndex, properties);
+      nsTreeUtils::TokenizeProperties(properties, mScratchArray);
+      ComputedStyle* descContext =
+          GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeDescription());
+      if (descContext) {
+        const nsStyleDisplay* display = descContext->StyleDisplay();
+        if (display->mDisplay == StyleDisplay::None) {
+          displayDescription = false;
+        }
+      }
+
+      if (displayDescription) {
+        int32_t xOffSet = 0;
+        nsTreeColumn* primaryCol = mColumns->GetPrimaryColumn();
+        if (primaryCol) {
+          bool isRTL = StyleVisibility()->mDirection == StyleDirection::Rtl;
+
+          nsMargin borderPadding(0, 0, 0, 0);
+          ComputedStyle* rowContext =
+              GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeRow());
+          GetBorderPadding(rowContext, borderPadding);
+          xOffSet += borderPadding.left;
+          ComputedStyle* cellContext =
+              GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeCell());
+          GetBorderPadding(cellContext, borderPadding);
+          xOffSet += borderPadding.left;
+
+          if (!isRTL) {
+            int32_t level;
+            mView->GetLevel(aRowIndex, &level);
+            xOffSet += mIndentation * level;
+
+            nsRect imageRect;
+            nsRect twistyRect(rowRect);
+            ComputedStyle* twistyContext =
+                GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeTwisty());
+            GetTwistyRect(aRowIndex, primaryCol, imageRect, twistyRect,
+                          PresContext(), twistyContext);
+
+            nsMargin twistyMargin;
+            twistyContext->StyleMargin()->GetMargin(twistyMargin);
+            twistyRect.Inflate(twistyMargin);
+            xOffSet += twistyRect.width;
+          }
+
+          nscoord colWidth;
+          primaryCol->GetWidthInTwips(this, &colWidth);
+          if (xOffSet > colWidth) {
+            xOffSet = colWidth;
+          }
+        }
+
+        nsRect descRect(rowRect.x + xOffSet, rowRect.y, rowRect.width,
+                        rowRect.height);
+        nsRect dirtyRect;
+        if (dirtyRect.IntersectRect(aDirtyRect, descRect)) {
+          result &= PaintDescription(aRowIndex, descRect, aPresContext,
+                                     aRenderingContext, aDirtyRect);
+        }
+      }
+    }
+
     // Now loop over our cells. Only paint a cell if it intersects with our
     // dirty rect.
     for (nsTreeColumn* currCol = mColumns->GetFirstColumn(); currCol;
          currCol = currCol->GetNext()) {
       nsRect cellRect;
       rv = currCol->GetRect(this, rowRect.y, rowRect.height, &cellRect);
       // Don't paint cells in hidden columns.
       if (NS_FAILED(rv) || cellRect.width == 0) continue;
@@ -2981,16 +3083,17 @@ ImgDrawResult nsTreeBodyFrame::PaintCell
   bool isRTL = StyleVisibility()->mDirection == StyleDirection::Rtl;
 
   // Obtain the margins for the cell and then deflate our rect by that
   // amount.  The cell is assumed to be contained within the deflated rect.
   nsRect cellRect(aCellRect);
   nsMargin cellMargin;
   cellContext->StyleMargin()->GetMargin(cellMargin);
   cellRect.Deflate(cellMargin);
+  cellRect.height = GetCellHeight(aRowIndex, aColumn);
 
   // Paint our borders and background for our row rect.
   ImgDrawResult result = PaintBackgroundLayer(
       cellContext, aPresContext, aRenderingContext, cellRect, aDirtyRect);
 
   // Adjust the rect for its border and padding.
   AdjustForBorderPadding(cellContext, cellRect);
 
@@ -3119,32 +3222,108 @@ ImgDrawResult nsTreeBodyFrame::PaintCell
   // XXX until we have the ability to load images, allow the view to
   // insert text into cycler columns...
   if (!aColumn->IsCycler()) {
     nsRect elementRect(currX, cellRect.y, remainingWidth, cellRect.height);
     nsRect dirtyRect;
     if (dirtyRect.IntersectRect(aDirtyRect, elementRect)) {
       switch (aColumn->GetType()) {
         case TreeColumn_Binding::TYPE_TEXT:
-          result &= PaintText(aRowIndex, aColumn, elementRect, aPresContext,
-                              aRenderingContext, aDirtyRect, currX);
+          if (mIsMultiline) {
+            nscoord xOffSet = 0, yOffSet = 0;
+            int32_t partCount, partIdx;
+            nsCOMPtr<nsIMultilineTreeView> multilineView =
+                do_QueryInterface(mView);
+            multilineView->GetCellTextPartCount(aRowIndex, aColumn, &partCount);
+            for (partIdx = 0; partIdx < partCount; partIdx++) {
+              nsAutoString text;
+              PrefillPropertyArray(aRowIndex, aColumn);
+              nsAutoString properties;
+              multilineView->GetCellProperties(aRowIndex, aColumn, properties);
+              nsTreeUtils::TokenizeProperties(properties, mScratchArray);
+              nsTArray<nsCString> scratchArray;
+              multilineView->GetCellTextPartProperties(aRowIndex, aColumn,
+                                                       partIdx, scratchArray);
+              AtomArrayExtend(mScratchArray, scratchArray);
+              ComputedStyle* textContext =
+                  GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeCellTextPart());
+              multilineView->GetCellTextPart(aRowIndex, aColumn, partIdx, text);
+              result &= PaintMultilineText(text, elementRect, aPresContext,
+                                           aRenderingContext, aDirtyRect,
+                                           textContext, xOffSet, yOffSet);
+            }
+          } else {
+            result &= PaintText(aRowIndex, aColumn, elementRect, aPresContext,
+                                aRenderingContext, aDirtyRect, currX);
+          }
           break;
         case TreeColumn_Binding::TYPE_CHECKBOX:
           result &= PaintCheckbox(aRowIndex, aColumn, elementRect, aPresContext,
                                   aRenderingContext, aDirtyRect);
           break;
       }
     }
   }
 
   aCurrX = currX;
 
   return result;
 }
 
+ImgDrawResult nsTreeBodyFrame::PaintDescription(int32_t aRowIndex,
+                                                const nsRect& aDescRect,
+                                                nsPresContext* aPresContext,
+                                                gfxContext& aRenderingContext,
+                                                const nsRect& aDirtyRect) {
+  PrefillPropertyArray(aRowIndex, nullptr);
+  nsAutoString properties;
+  mView->GetRowProperties(aRowIndex, properties);
+  nsTreeUtils::TokenizeProperties(properties, mScratchArray);
+
+  ComputedStyle* descContext =
+      GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeDescription());
+
+  nsRect descRect(aDescRect);
+  nsMargin descMargin;
+  descContext->StyleMargin()->GetMargin(descMargin);
+  descRect.Deflate(descMargin);
+
+  // Paint our borders and background for our row rect.
+  ImgDrawResult result = PaintBackgroundLayer(
+      descContext, aPresContext, aRenderingContext, descRect, aDirtyRect);
+
+  // Adjust the rect for its border and padding.
+  AdjustForBorderPadding(descContext, descRect);
+
+  nsRect dirtyRect;
+  if (dirtyRect.IntersectRect(aDirtyRect, descRect)) {
+    nscoord xOffSet = 0, yOffSet = 0;
+    int32_t partCount, partIdx;
+    nsCOMPtr<nsIMultilineTreeView> multilineView = do_QueryInterface(mView);
+    multilineView->GetDescriptionTextPartCount(aRowIndex, &partCount);
+    for (partIdx = 0; partIdx < partCount; partIdx++) {
+      nsAutoString text;
+      PrefillPropertyArray(aRowIndex, nullptr);
+      nsTreeUtils::TokenizeProperties(properties, mScratchArray);
+      nsTArray<nsCString> scratchArray;
+      multilineView->GetDescriptionTextPartProperties(aRowIndex, partIdx,
+                                                      scratchArray);
+      AtomArrayExtend(mScratchArray, scratchArray);
+      ComputedStyle* textContext =
+          GetPseudoComputedStyle(nsCSSAnonBoxes::mozTreeDescriptionTextPart());
+      multilineView->GetDescriptionTextPart(aRowIndex, partIdx, text);
+      result &=
+          PaintMultilineText(text, descRect, aPresContext, aRenderingContext,
+                             aDirtyRect, textContext, xOffSet, yOffSet);
+    }
+  }
+
+  return result;
+}
+
 ImgDrawResult nsTreeBodyFrame::PaintTwisty(
     int32_t aRowIndex, nsTreeColumn* aColumn, const nsRect& aTwistyRect,
     nsPresContext* aPresContext, gfxContext& aRenderingContext,
     const nsRect& aDirtyRect, nscoord& aRemainingWidth, nscoord& aCurrX) {
   MOZ_ASSERT(aColumn && aColumn->GetFrame(), "invalid column passed");
 
   bool isRTL = StyleVisibility()->mDirection == StyleDirection::Rtl;
   nscoord rightEdge = aCurrX + aRemainingWidth;
@@ -3528,16 +3707,168 @@ ImgDrawResult nsTreeBodyFrame::PaintText
 
   if (opacity != 1.0f) {
     aRenderingContext.PopGroupAndBlend();
   }
 
   return result;
 }
 
+ImgDrawResult nsTreeBodyFrame::PaintMultilineText(
+    nsAutoString& aText, const nsRect& aTextRect, nsPresContext* aPresContext,
+    gfxContext& aRenderingContext, const nsRect& aDirtyRect,
+    ComputedStyle* aStyleContext, nscoord& aCurrY, nscoord& aCurrX) {
+  int32_t appUnitsPerDevPixel = PresContext()->AppUnitsPerDevPixel();
+  DrawTarget* drawTarget = aRenderingContext.GetDrawTarget();
+
+  nsAutoString text = aText;
+  // We're going to paint this text so we need to ensure bidi is enabled if
+  // necessary
+  CheckTextForBidi(text);
+
+  if (text.Length() == 0)
+    return ImgDrawResult::SUCCESS;  // Don't paint an empty string. XXX What
+                                    // about background/borders? Still paint?
+
+  ComputedStyle* textContext = aStyleContext;
+
+  nsRect textRect(aTextRect);
+
+  // Set our color.
+  aRenderingContext.SetColor(
+      sRGBColor::FromABGR(textContext->StyleText()->mColor.ToColor()));
+
+  // Compute our text size.
+  RefPtr<nsFontMetrics> fontMet =
+      nsLayoutUtils::GetFontMetricsForComputedStyle(textContext, PresContext());
+
+  nscoord height, baseline;
+  height = fontMet->MaxHeight();
+  baseline = fontMet->MaxAscent();
+
+  uint32_t maxLines = (aTextRect.height - aCurrY) / height;
+  if (aCurrY == 0 && maxLines == 0) {
+    maxLines = 1;
+  }
+
+  nsAutoString tmpText(text);
+
+  for (uint32_t lineIdx = 0; lineIdx < maxLines; lineIdx++) {
+    bool lineComplete = true;
+    nsAutoString textToDraw(tmpText);
+
+    nscoord width =
+        nsLayoutUtils::AppUnitWidthOfString(tmpText, *fontMet, drawTarget);
+    nscoord maxWidth = textRect.width - aCurrX;
+
+    if (tmpText.Length() == 0) break;
+    if (width > maxWidth) {
+      width = maxWidth;
+      fontMet->SetTextRunRTL(false);
+
+      const nsDependentString& kEllipsis =
+          nsContentUtils::GetLocalizedEllipsis();
+      if (lineIdx == maxLines - 1) {
+        nscoord ellipsisWidth;
+        ellipsisWidth = nsLayoutUtils::AppUnitWidthOfString(kEllipsis, *fontMet,
+                                                            drawTarget);
+
+        if (ellipsisWidth > width) {
+          textToDraw.SetLength(0);
+          tmpText.SetLength(0);
+        } else if (ellipsisWidth == width) {
+          textToDraw.Assign(kEllipsis);
+          tmpText.SetLength(0);
+        } else {
+          width -= ellipsisWidth;
+          nscoord cwidth;
+          nscoord twidth = 0;
+          int length = tmpText.Length();
+          int i;
+          for (i = 0; i < length; ++i) {
+            char16_t ch = tmpText[i];
+            // XXX this is horrible and doesn't handle clusters
+            cwidth =
+                nsLayoutUtils::AppUnitWidthOfString(ch, *fontMet, drawTarget);
+            if (twidth + cwidth > width) break;
+            twidth += cwidth;
+          }
+          tmpText.Left(textToDraw, i);
+          textToDraw.Append(kEllipsis);
+        }
+      } else {
+        nscoord cwidth;
+        nscoord twidth = 0;
+        int length = tmpText.Length();
+        int i;
+        for (i = 0; i < length; ++i) {
+          char16_t ch = tmpText[i];
+          // XXX this is horrible and doesn't handle clusters
+          cwidth =
+              nsLayoutUtils::AppUnitWidthOfString(ch, *fontMet, drawTarget);
+          if (twidth + cwidth > width) break;
+          twidth += cwidth;
+        }
+        tmpText.Left(textToDraw, i);
+        tmpText.Right(tmpText, length - i);
+      }
+    } else {
+      tmpText.SetLength(0);
+      lineComplete = false;
+    }
+
+    // Set our color.
+    ColorPattern color(ToDeviceColor(textContext->StyleText()->mColor));
+
+    // Draw decorations.
+    StyleTextDecorationLine decorations =
+        textContext->StyleTextReset()->mTextDecorationLine;
+
+    nscoord offset;
+    nscoord size;
+    if (decorations & (StyleTextDecorationLine::OVERLINE |
+                       StyleTextDecorationLine::UNDERLINE)) {
+      fontMet->GetUnderline(offset, size);
+      if (decorations & StyleTextDecorationLine::OVERLINE) {
+        nsRect r(textRect.x, textRect.y, textRect.width, size);
+        Rect devPxRect =
+            NSRectToSnappedRect(r, appUnitsPerDevPixel, *drawTarget);
+        drawTarget->FillRect(devPxRect, color);
+      }
+      if (decorations & StyleTextDecorationLine::UNDERLINE) {
+        nsRect r(textRect.x, textRect.y + baseline - offset, textRect.width,
+                 size);
+        Rect devPxRect =
+            NSRectToSnappedRect(r, appUnitsPerDevPixel, *drawTarget);
+        drawTarget->FillRect(devPxRect, color);
+      }
+    }
+    if (decorations & StyleTextDecorationLine::LINE_THROUGH) {
+      fontMet->GetStrikeout(offset, size);
+      nsRect r(textRect.x, textRect.y + baseline - offset, textRect.width,
+               size);
+      Rect devPxRect = NSRectToSnappedRect(r, appUnitsPerDevPixel, *drawTarget);
+      drawTarget->FillRect(devPxRect, color);
+    }
+
+    nsLayoutUtils::DrawString(
+        this, *fontMet, &aRenderingContext, textToDraw.get(),
+        textToDraw.Length(),
+        textRect.TopLeft() + nsPoint(aCurrX, baseline + aCurrY));
+    if (lineComplete) {
+      aCurrY += height;
+      aCurrX = 0;
+    } else {
+      aCurrX += width;
+    }
+  }
+
+  return ImgDrawResult::SUCCESS;
+}
+
 ImgDrawResult nsTreeBodyFrame::PaintCheckbox(int32_t aRowIndex,
                                              nsTreeColumn* aColumn,
                                              const nsRect& aCheckboxRect,
                                              nsPresContext* aPresContext,
                                              gfxContext& aRenderingContext,
                                              const nsRect& aDirtyRect) {
   MOZ_ASSERT(aColumn && aColumn->GetFrame(), "invalid column passed");
 
diff --git a/layout/xul/tree/nsTreeBodyFrame.h b/layout/xul/tree/nsTreeBodyFrame.h
--- a/layout/xul/tree/nsTreeBodyFrame.h
+++ b/layout/xul/tree/nsTreeBodyFrame.h
@@ -205,23 +205,35 @@ class nsTreeBodyFrame final : public nsL
   friend class nsOverflowChecker;
 
   // This method paints a specific column background of the tree.
   ImgDrawResult PaintColumn(nsTreeColumn* aColumn, const nsRect& aColumnRect,
                             nsPresContext* aPresContext,
                             gfxContext& aRenderingContext,
                             const nsRect& aDirtyRect);
 
+  ImgDrawResult PaintDescription(int32_t aRowIndex, const nsRect& aDescRect,
+                                 nsPresContext* aPresContext,
+                                 gfxContext& aRenderingContext,
+                                 const nsRect& aDirtyRect);
+
   // This method paints a single row in the tree.
   ImgDrawResult PaintRow(int32_t aRowIndex, const nsRect& aRowRect,
                          nsPresContext* aPresContext,
                          gfxContext& aRenderingContext,
                          const nsRect& aDirtyRect, nsPoint aPt,
                          nsDisplayListBuilder* aBuilder);
 
+  ImgDrawResult PaintMultilineText(nsAutoString& aText, const nsRect& aTextRect,
+                                   nsPresContext* aPresContext,
+                                   gfxContext& aRenderingContext,
+                                   const nsRect& aDirtyRect,
+                                   ComputedStyle* aStyleContext,
+                                   nscoord& aCurrY, nscoord& aCurrX);
+
   // This method paints a single separator in the tree.
   ImgDrawResult PaintSeparator(int32_t aRowIndex, const nsRect& aSeparatorRect,
                                nsPresContext* aPresContext,
                                gfxContext& aRenderingContext,
                                const nsRect& aDirtyRect);
 
   // This method paints a specific cell in a given row of the tree.
   ImgDrawResult PaintCell(int32_t aRowIndex, nsTreeColumn* aColumn,
@@ -320,16 +332,19 @@ class nsTreeBodyFrame final : public nsL
 
   // Returns the source rectangle of the image to be displayed.
   nsRect GetImageSourceRect(ComputedStyle* aComputedStyle, bool useImageRegion,
                             imgIContainer* image);
 
   // Returns the height of rows in the tree.
   int32_t GetRowHeight();
 
+  // Returns the height of a cell.
+  int32_t GetCellHeight(int32_t aRowIndex, nsTreeColumn* aCol);
+
   // Returns our indentation width.
   int32_t GetIndentation();
 
   // Calculates our width/height once border and padding have been removed.
   void CalcInnerBox();
 
   // Calculate the total width of our scrollable portion
   nscoord CalcHorzWidth(const ScrollParts& aParts);
@@ -590,16 +605,18 @@ class nsTreeBodyFrame final : public nsL
   int32_t mRowCount;
 
   // The row the mouse is hovering over.
   int32_t mMouseOverRow;
 
   // Whether or not we're currently focused.
   bool mFocused;
 
+  bool mIsMultiline;
+
   // Do we have a fixed number of onscreen rows?
   bool mHasFixedRowCount;
 
   bool mVerticalOverflow;
   bool mHorizontalOverflow;
 
   bool mReflowCallbackPosted;
 
diff --git a/toolkit/themes/linux/global/tree.css b/toolkit/themes/linux/global/tree.css
--- a/toolkit/themes/linux/global/tree.css
+++ b/toolkit/themes/linux/global/tree.css
@@ -5,8 +5,24 @@
 %include ../../shared/tree.inc.css
 
 /* ::::: sort direction indicator :::::  */
 
 .treecol-sortdirection {
   appearance: auto;
   -moz-default-appearance: treeheadersortarrow;
 }
+
+/* ::::: multiline tree ::::: */
+
+treechildren::-moz-tree-row(multiline) {
+    min-height: 36px;
+    height: 2.6em;
+}
+
+treechildren::-moz-tree-cell(multiline) {
+    min-height: 18px;
+    height: 1.3em;
+}
+
+treechildren::-moz-tree-description {
+    margin-top: 18px;
+}
diff --git a/toolkit/themes/osx/global/tree.css b/toolkit/themes/osx/global/tree.css
--- a/toolkit/themes/osx/global/tree.css
+++ b/toolkit/themes/osx/global/tree.css
@@ -7,8 +7,24 @@
 
 /* ::::: editable tree ::::: */
 
 html|input.tree-input {
   appearance: none;
   border-width: 0;
   box-shadow: var(--focus-ring-box-shadow);
 }
+
+/* ::::: multiline tree ::::: */
+
+treechildren::-moz-tree-row(multiline) {
+    min-height: 36px;
+    height: 2.6em;
+}
+
+treechildren::-moz-tree-cell(multiline) {
+    min-height: 18px;
+    height: 1.3em;
+}
+
+treechildren::-moz-tree-description {
+    margin-top: 18px;
+}
diff --git a/toolkit/themes/windows/global/tree.css b/toolkit/themes/windows/global/tree.css
--- a/toolkit/themes/windows/global/tree.css
+++ b/toolkit/themes/windows/global/tree.css
@@ -34,8 +34,24 @@ treecol[sortDirection="descending"]:not(
   treecol:hover:active,
   treecolpicker:hover:active {
     border-top-color: ThreeDShadow;
     border-inline-end-color: ThreeDHighlight;
     border-bottom-color: ThreeDHighlight;
     border-inline-start-color: ThreeDShadow;
   }
 }
+
+/* ::::: multiline tree ::::: */
+
+treechildren::-moz-tree-row(multiline) {
+    min-height: 36px;
+    height: 2.6em;
+}
+
+treechildren::-moz-tree-cell(multiline) {
+    min-height: 18px;
+    height: 1.3em;
+}
+
+treechildren::-moz-tree-description {
+    margin-top: 18px;
+}
diff --git a/xpcom/ds/StaticAtoms.py b/xpcom/ds/StaticAtoms.py
--- a/xpcom/ds/StaticAtoms.py
+++ b/xpcom/ds/StaticAtoms.py
@@ -686,16 +686,17 @@ STATIC_ATOMS = [
     Atom("mozTableAddColumnBefore", "mozTableAddColumnBefore"),
     Atom("mozTableAddRowAfter", "mozTableAddRowAfter"),
     Atom("mozTableAddRowBefore", "mozTableAddRowBefore"),
     Atom("mozTableRemoveRow", "mozTableRemoveRow"),
     Atom("mozTableRemoveColumn", "mozTableRemoveColumn"),
     Atom("moz_opaque", "moz-opaque"),
     Atom("moz_action_hint", "mozactionhint"),
     Atom("multicol", "multicol"),
+    Atom("multiline", "multiline"),
     Atom("multiple", "multiple"),
     Atom("muted", "muted"),
     Atom("name", "name"),
     Atom("_namespace", "namespace"),
     Atom("namespaceAlias", "namespace-alias"),
     Atom("namespaceUri", "namespace-uri"),
     Atom("NaN", "NaN"),
     Atom("n", "n"),
@@ -2492,23 +2493,26 @@ STATIC_ATOMS = [
     InheritingAnonBoxAtom("AnonBox_blockRubyContent", ":-moz-block-ruby-content"),
     InheritingAnonBoxAtom("AnonBox_ruby", ":-moz-ruby"),
     InheritingAnonBoxAtom("AnonBox_rubyBase", ":-moz-ruby-base"),
     InheritingAnonBoxAtom("AnonBox_rubyBaseContainer", ":-moz-ruby-base-container"),
     InheritingAnonBoxAtom("AnonBox_rubyText", ":-moz-ruby-text"),
     InheritingAnonBoxAtom("AnonBox_rubyTextContainer", ":-moz-ruby-text-container"),
     InheritingAnonBoxAtom("AnonBox_mozTreeColumn", ":-moz-tree-column"),
     InheritingAnonBoxAtom("AnonBox_mozTreeRow", ":-moz-tree-row"),
+    InheritingAnonBoxAtom("AnonBox_mozTreeDescription", ":-moz-tree-description"),
+    InheritingAnonBoxAtom("AnonBox_mozTreeDescriptionTextPart", ":-moz-tree-description-text-part"),
     InheritingAnonBoxAtom("AnonBox_mozTreeSeparator", ":-moz-tree-separator"),
     InheritingAnonBoxAtom("AnonBox_mozTreeCell", ":-moz-tree-cell"),
     InheritingAnonBoxAtom("AnonBox_mozTreeIndentation", ":-moz-tree-indentation"),
     InheritingAnonBoxAtom("AnonBox_mozTreeLine", ":-moz-tree-line"),
     InheritingAnonBoxAtom("AnonBox_mozTreeTwisty", ":-moz-tree-twisty"),
     InheritingAnonBoxAtom("AnonBox_mozTreeImage", ":-moz-tree-image"),
     InheritingAnonBoxAtom("AnonBox_mozTreeCellText", ":-moz-tree-cell-text"),
+    InheritingAnonBoxAtom("AnonBox_mozTreeCellTextPart", ":-moz-tree-cell-text-part"),
     InheritingAnonBoxAtom("AnonBox_mozTreeCheckbox", ":-moz-tree-checkbox"),
     InheritingAnonBoxAtom("AnonBox_mozTreeDropFeedback", ":-moz-tree-drop-feedback"),
     InheritingAnonBoxAtom("AnonBox_mozSVGMarkerAnonChild", ":-moz-svg-marker-anon-child"),
     InheritingAnonBoxAtom("AnonBox_mozSVGOuterSVGAnonChild", ":-moz-svg-outer-svg-anon-child"),
     InheritingAnonBoxAtom("AnonBox_mozSVGForeignContent", ":-moz-svg-foreign-content"),
     InheritingAnonBoxAtom("AnonBox_mozSVGText", ":-moz-svg-text"),
     # END ATOMS
 ] + HTML_PARSER_ATOMS
