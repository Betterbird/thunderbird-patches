# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1637616586 -3600
# Parent  b7f7279009669467f172184178dfb90814a5f154
Bug 1739609 - Fix communication of charset back to UI. Also fix the subject in "Repair Text Encoding".

diff --git a/mail/base/content/mailWindow.js b/mail/base/content/mailWindow.js
--- a/mail/base/content/mailWindow.js
+++ b/mail/base/content/mailWindow.js
@@ -1103,16 +1103,61 @@ nsBrowserAccess.prototype = {
 
 function MailSetCharacterSet() {
   msgWindow.charsetOverride = true;
   gMessageDisplay.keyForCharsetOverride =
     "messageKey" in gMessageDisplay.displayedMessage
       ? gMessageDisplay.displayedMessage.messageKey
       : null;
   messenger.forceDetectDocumentCharset();
+
+  // Fix the subject. This is rather hacky since we don't know when the
+  // message re-display will have finished.
+  setTimeout(() => {
+    const { selectedMessage, tree } = gFolderDisplay;
+    if (selectedMessage) {
+      let subjectBox = document.getElementById("expandedsubjectBox");
+      // The selected message still has the raw header, so get it and decode it.
+      let buffer = new Uint8Array(
+        Array.from(selectedMessage.subject, c => c.charCodeAt(0))
+      );
+      let subject;
+      let subjectChanged = false;
+      try {
+        // Check whether this is already UTF-8.
+        subject = new TextDecoder("UTF-8", { fatal: true }).decode(buffer);
+      } catch (ex) {
+        try {
+          subject = new TextDecoder(msgWindow.mailCharacterSet).decode(buffer);
+          subjectChanged = true;
+        } catch (ex) {
+          return;
+        }
+      }
+      subjectBox.headerValue = subject;
+      if (subjectChanged) {
+        // Keep the charset for the next time we display the message.
+        // Note the upper-case `Charset` attribute in nsIMsgHdr.idl.
+        selectedMessage.Charset = msgWindow.mailCharacterSet;
+        let subjectUTF8 = String.fromCharCode.apply(
+          undefined,
+          new TextEncoder("UTF-8").encode(subject)
+        );
+        selectedMessage.subject = subjectUTF8;
+        if (
+          tree &&
+          tree.view &&
+          tree.view.selection &&
+          tree.view.selection.currentIndex >= 0
+        ) {
+          tree.invalidateRow(tree.view.selection.currentIndex);
+        }
+      }
+    }
+  }, 100);
 }
 
 /**
  * Called from the extensions manager to open an add-on options XUL document.
  * Only the "open in tab" option is supported, so that's what we'll do here.
  */
 function switchToTabHavingURI(aURI, aOpenNew, aOpenParams = {}) {
   let tabmail = document.getElementById("tabmail");
diff --git a/mailnews/mime/src/mimetext.cpp b/mailnews/mime/src/mimetext.cpp
--- a/mailnews/mime/src/mimetext.cpp
+++ b/mailnews/mime/src/mimetext.cpp
@@ -73,17 +73,19 @@ static int MimeInlineText_initializeChar
   text->charsetOverridable = false;
 
   // Figure out an appropriate charset for this object.
   if (!text->charset && obj->headers) {
     if (obj->options && obj->options->override_charset) {
       if (obj->options->default_charset) {
         text->charset = strdup(obj->options->default_charset);
       } else {
+        text->charsetOverridable = true;
         text->inputAutodetect = true;
+        text->needUpdateMsgWinCharset = true;
         text->charset = strdup("");
       }
     } else {
       char* ct =
           MimeHeaders_get(obj->headers, HEADER_CONTENT_TYPE, false, false);
       if (ct) {
         text->charset = MimeHeaders_get_parameter(ct, "charset", NULL, NULL);
         PR_Free(ct);
@@ -104,16 +106,17 @@ static int MimeInlineText_initializeChar
       // files default to UTF-8 (RFC 2445, section 4.1.4).
       if (!text->charset && obj->content_type &&
           !PL_strcasecmp(obj->content_type, TEXT_CALENDAR))
         text->charset = strdup("UTF-8");
 
       if (!text->charset) {
         text->charsetOverridable = true;
         text->inputAutodetect = true;
+        text->needUpdateMsgWinCharset = true;
 
         if (obj->options && obj->options->default_charset)
           text->charset = strdup(obj->options->default_charset);
         else
           text->charset = strdup("UTF-8");
       }
     }
   }
diff --git a/mailnews/mime/src/nsStreamConverter.cpp b/mailnews/mime/src/nsStreamConverter.cpp
--- a/mailnews/mime/src/nsStreamConverter.cpp
+++ b/mailnews/mime/src/nsStreamConverter.cpp
@@ -99,46 +99,66 @@ nsresult bridge_new_new_uri(void* bridge
           default_charset = &(msd->options->default_charset);
           override_charset = &(msd->options->override_charset);
           url_name = &(msd->url_name);
           fixup_pointer = &(msd->options->url);
         }
       }
 
       if ((default_charset) && (override_charset) && (url_name)) {
-        //
-        // set the default charset to be the folder charset if we have one
-        // associated with this url...
+        // Get the override flag.
         nsCOMPtr<nsIMsgI18NUrl> i18nUrl(do_QueryInterface(aURI));
         if (i18nUrl) {
           bool overrideCharset = false;
+          bool forceFixWindow = false;
 
           // check to see if we have a charset override...and if we do, set that
           // field appropriately too...
           nsresult rv = i18nUrl->GetOverRideCharset(&overrideCharset);
           if (NS_SUCCEEDED(rv) && overrideCharset) {
             *override_charset = true;
+            // Previously we set `default_charset` to the user-selected
+            // charset with the effect that the subject header was fixed, too.
+            // Now we set it to `nullptr` to trigger auto-detection.
+            // We need to fix the subject later.
             *default_charset = nullptr;
           } else {
             *override_charset = false;
             // Special treatment for news: URLs. Get the server default charset.
             nsCOMPtr<nsINntpUrl> nntpURL(do_QueryInterface(aURI));
             if (nntpURL) {
               nsCString charset;
               rv = nntpURL->GetCharset(charset);
               *default_charset =
                   NS_SUCCEEDED(rv) ? ToNewCString(charset) : strdup("UTF-8");
             } else {
-              *default_charset = strdup("UTF-8");
+              // Let's see whether the user repaired this before.
+              nsCOMPtr<nsIMsgMessageUrl> msgUrl(do_QueryInterface(aURI));
+              *default_charset = nullptr;
+              if (msgUrl) {
+                nsCOMPtr<nsIMsgDBHdr> hdr;
+                msgUrl->GetMessageHeader(getter_AddRefs(hdr));
+                if (hdr) {
+                  hdr->GetCharset(default_charset);
+                }
+              }
+              if (*default_charset && **default_charset) {
+                // Pretend that we're repeating the override from last time.
+                *override_charset = true;
+                // We want to update the window now in case the message
+                // doesn't carry any charset information.
+                forceFixWindow = true;
+              } else {
+                *default_charset = strdup("UTF-8");
+              }
             }
           }
 
-          // if there is no manual override and a folder charset exists
-          // then check if we have a folder level override
-          if (!(*override_charset) && *default_charset && **default_charset) {
+          if ((!(*override_charset) && *default_charset && **default_charset) ||
+              forceFixWindow) {
             // notify the default to msgWindow (for the menu check mark)
             // do not set the default in case of nsMimeMessageDraftOrTemplate
             // or nsMimeMessageEditorTemplate because it is already set
             // when the message is displayed and doing it again may overwrite
             // the correct MIME charset parsed from the message header
             if (aOutputType != nsMimeOutput::nsMimeMessageDraftOrTemplate &&
                 aOutputType != nsMimeOutput::nsMimeMessageEditorTemplate) {
               nsCOMPtr<nsIMsgMailNewsUrl> msgurl(do_QueryInterface(aURI));
