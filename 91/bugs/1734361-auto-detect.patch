# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1634073374 -7200
# Parent  c1fdbad8c6138276f5d35568fb9c4d63969d5c64
Bug 1734361 - Restore erroneously removed 'text->inputAutodetect = true;'.
* * *
Bug 1734361 - Use news server default charset.

diff --git a/mailnews/base/content/menulist-charsetpicker.js b/mailnews/base/content/menulist-charsetpicker.js
--- a/mailnews/base/content/menulist-charsetpicker.js
+++ b/mailnews/base/content/menulist-charsetpicker.js
@@ -125,26 +125,36 @@ if (!customElements.get("menulist")) {
    * Menulist widget that shows charsets applicable for viewing messages.
    * @extends MozMenulistCharsetpickerBase
    */
   class MozMenulistCharsetpickerViewing extends MozMenulistCharsetpickerBase {
     get charsetValues() {
       return [
         "UTF-8",
         "Big5",
+        "EUC-JP",
+        "Shift_JIS",
         "EUC-KR",
         "gbk",
+        "KOI8-R",
+        "KOI8-U",
         "ISO-2022-JP",
         "ISO-8859-1",
         "ISO-8859-2",
+        "ISO-8859-4",
+        "ISO-8859-5",
+        "ISO-8859-6",
         "ISO-8859-7",
+        "ISO-8859-8",
         "windows-874",
         "windows-1250",
         "windows-1251",
         "windows-1252",
+        "windows-1253",
+        "windows-1254",
         "windows-1255",
         "windows-1256",
         "windows-1257",
         "windows-1258",
       ];
     }
   }
   customElements.define(
diff --git a/mailnews/mime/src/mimetext.cpp b/mailnews/mime/src/mimetext.cpp
--- a/mailnews/mime/src/mimetext.cpp
+++ b/mailnews/mime/src/mimetext.cpp
@@ -97,31 +97,23 @@ static int MimeInlineText_initializeChar
       // UTF-8 but omits the charset parameter.
       // When no charset is defined by the container (e.g. iMIP), iCalendar
       // files default to UTF-8 (RFC 2445, section 4.1.4).
       if (!text->charset && obj->content_type &&
           !PL_strcasecmp(obj->content_type, TEXT_CALENDAR))
         text->charset = strdup("UTF-8");
 
       if (!text->charset) {
-        nsresult res;
-
         text->charsetOverridable = true;
-
-        nsCOMPtr<nsIPrefBranch> prefBranch(
-            do_GetService(NS_PREFSERVICE_CONTRACTID, &res));
+        text->inputAutodetect = true;
 
         if (obj->options && obj->options->default_charset)
           text->charset = strdup(obj->options->default_charset);
-        else {
-          if (NS_SUCCEEDED(res)) {
-            text->charset = strdup("UTF-8");
-          } else
-            text->charset = strdup("");
-        }
+        else
+          text->charset = strdup("UTF-8");
       }
     }
   }
 
   if (text->inputAutodetect) {
     // We need to prepare lineDam for charset detection.
     text->lineDamBuffer = (char*)PR_Malloc(DAM_MAX_BUFFER_SIZE);
     text->lineDamPtrs = (char**)PR_Malloc(DAM_MAX_LINES * sizeof(char*));
diff --git a/mailnews/mime/src/nsStreamConverter.cpp b/mailnews/mime/src/nsStreamConverter.cpp
--- a/mailnews/mime/src/nsStreamConverter.cpp
+++ b/mailnews/mime/src/nsStreamConverter.cpp
@@ -21,16 +21,17 @@
 #include "nsMimeStringResources.h"
 #include "nsIPrefService.h"
 #include "nsIPrefBranch.h"
 #include "nsNetUtil.h"
 #include "nsIMsgQuote.h"
 #include "nsNetUtil.h"
 #include "mozITXTToHTMLConv.h"
 #include "nsIMsgMailNewsUrl.h"
+#include "nsINntpUrl.h"
 #include "nsIMsgWindow.h"
 #include "nsICategoryManager.h"
 #include "nsMsgUtils.h"
 #include "mozilla/ArrayUtils.h"
 
 #define PREF_MAIL_DISPLAY_GLYPH "mail.display_glyph"
 #define PREF_MAIL_DISPLAY_STRUCT "mail.display_struct"
 
@@ -113,17 +114,24 @@ nsresult bridge_new_new_uri(void* bridge
           // check to see if we have a charset override...and if we do, set that
           // field appropriately too...
           nsresult rv = i18nUrl->GetCharsetOverRide(getter_Copies(charset));
           if (NS_SUCCEEDED(rv) && !charset.IsEmpty()) {
             *override_charset = true;
             *default_charset = ToNewCString(charset);
           } else {
             *override_charset = false;
-            *default_charset = strdup("UTF-8");
+            // Special treatment for news: URLs. Get the server default charset.
+            nsCOMPtr<nsINntpUrl> nntpURL(do_QueryInterface(aURI));
+            if (nntpURL) {
+              nntpURL->GetCharset(charset);
+              *default_charset = ToNewCString(charset);
+            } else {
+              *default_charset = strdup("UTF-8");
+            }
           }
 
           // if there is no manual override and a folder charset exists
           // then check if we have a folder level override
           if (!(*override_charset) && *default_charset && **default_charset) {
             // notify the default to msgWindow (for the menu check mark)
             // do not set the default in case of nsMimeMessageDraftOrTemplate
             // or nsMimeMessageEditorTemplate because it is already set
diff --git a/mailnews/news/public/nsINntpUrl.idl b/mailnews/news/public/nsINntpUrl.idl
--- a/mailnews/news/public/nsINntpUrl.idl
+++ b/mailnews/news/public/nsINntpUrl.idl
@@ -63,16 +63,19 @@ interface nsINntpUrl : nsISupports {
   readonly attribute ACString group;
 
   /// The message ID portion of the URI, if one is present
   readonly attribute ACString messageID;
 
   /// The message key portion of the URI or nsMsgKey_None if not present
   readonly attribute nsMsgKey key;
 
+  /// returns the server's default charset.
+  readonly attribute ACString charset;
+
   /// The action of this news URI could not be determined
   const nsNewsAction ActionUnknown = 0;
   /// Fetch the contents of an article
   const nsNewsAction ActionFetchArticle = 1;
   /// Fetch the part of an article (requires ?part=)
   const nsNewsAction ActionFetchPart = 2;
   /// Save the contents of an article to disk
   const nsNewsAction ActionSaveMessageToDisk = 3;
diff --git a/mailnews/news/src/nsNntpUrl.cpp b/mailnews/news/src/nsNntpUrl.cpp
--- a/mailnews/news/src/nsNntpUrl.cpp
+++ b/mailnews/news/src/nsNntpUrl.cpp
@@ -256,16 +256,24 @@ NS_IMETHODIMP nsNntpUrl::GetMessageID(ns
 }
 
 NS_IMETHODIMP nsNntpUrl::GetKey(nsMsgKey* key) {
   NS_ENSURE_ARG_POINTER(key);
   *key = m_key;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsNntpUrl::GetCharset(nsACString& charset) {
+  nsCOMPtr<nsIMsgIncomingServer> server;
+  GetServer(getter_AddRefs(server));
+  nsCOMPtr<nsINntpIncomingServer> nserver(do_QueryInterface(server));
+  nserver->GetCharset(charset);
+  return NS_OK;
+}
+
 NS_IMETHODIMP nsNntpUrl::GetNormalizedSpec(nsACString& aPrincipalSpec) {
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP nsNntpUrl::SetUri(const nsACString& aURI) {
   mURI = aURI;
   return NS_OK;
 }
