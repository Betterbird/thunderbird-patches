# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1638486258 -3600
# Parent  3e2a65d1c8704cf2d550ac9393fc418159032ce2
Bug 1693332 - Re-establish Enigmail's "Decrypt to Folder".

Also integrate changes from
https://gitlab.com/enigmail/enigmail/-/commit/f990a63246676820c54d3e4effb8fb8961c54416 and
https://gitlab.com/enigmail/enigmail/-/commit/fc06b40c9d2dae3b9ff1c19719e5ab03a3c76a76.
Implement decryptAttachment(), adapted from upstream.
* * *
Make 'fix Exchange message' work again.

diff --git a/mail/base/content/mainPopupSet.inc.xhtml b/mail/base/content/mainPopupSet.inc.xhtml
--- a/mail/base/content/mainPopupSet.inc.xhtml
+++ b/mail/base/content/mainPopupSet.inc.xhtml
@@ -378,16 +378,36 @@
               label="&contextSaveAs.label;"
               accesskey="&contextSaveAs.accesskey;"
               oncommand="MsgSaveAsFile();"/>
     <menuitem id="mailContext-print"
               label="&contextPrint.label;"
               accesskey="&contextPrint.accesskey;"
               observes="cmd_print"
               command="cmd_print"/>
+#ifdef MOZ_OPENPGP
+    <menuseparator id="mailContext-afterPrint" class="openpgp-item"/>
+    <menu id="mailContext-decryptToFolder"
+          class="openpgp-item"
+          label="&contextDecryptToFolder.label;"
+          accesskey="&contextDecryptToFolder.accesskey;"
+          oncommand="Enigmail.msg.decryptToFolder(event.target._folder);">
+      <menupopup id="mailContext-decryptToTargetFolder"
+                 is="folder-menupopup"
+                 mode="filing"
+                 showFileHereLabel="true"
+                 showRecent="true"
+                 recentLabel="&contextMoveCopyMsgRecentMenu.label;"
+                 recentAccessKey="&contextMoveCopyMsgRecentMenu.accesskey;"
+                 showFavorites="true"
+                 favoritesLabel="&contextMoveCopyMsgFavoritesMenu.label;"
+                 favoritesAccessKey="&contextMoveCopyMsgFavoritesMenu.accesskey;"
+                 hasbeenopened="false" />
+    </menu>
+#endif
 #endif
     <menuitem id="downloadSelected"
               label="&downloadSelectedCmd.label;"
               accesskey="&downloadSelectedCmd.accesskey;"
               command="cmd_downloadSelected"/>
     <menuseparator id="mailContext-sep-edit"/>
     <menuitem id="mailContext-copylink"
               label="&copyLinkCmd.label;"
diff --git a/mail/base/content/nsContextMenu.js b/mail/base/content/nsContextMenu.js
--- a/mail/base/content/nsContextMenu.js
+++ b/mail/base/content/nsContextMenu.js
@@ -558,16 +558,17 @@ class nsContextMenu {
         "mailContext-tags",
         "mailContext-mark",
         "mailContext-saveAs",
         "mailContext-print",
         "mailContext-delete",
         "downloadSelected",
         "mailContext-reportPhishingURL",
         "mailContext-calendar-convert-menu",
+        "mailContext-decryptToFolder", // Careful: Only present if MOZ_OPENPGP.
       ];
       for (let i = 0; i < messageTabSpecificItems.length; ++i) {
         this.showItem(messageTabSpecificItems[i], false);
       }
       return;
     }
 
     let canMove = gFolderDisplay.canDeleteSelectedMessages;
@@ -680,16 +681,29 @@ class nsContextMenu {
         this.numSelectedMessages > 0 &&
         !this.hideMailItems &&
         !this.onPlayableMedia
     );
 
     this.showItem("mailContext-afterWatchThread", !this.inStandaloneWindow);
 
     this.showItem(
+      "mailContext-afterPrint",
+      this.numSelectedMessages > 0 &&
+        !this.hideMailItems &&
+        !this.onPlayableMedia
+    );
+    this.showItem(
+      "mailContext-decryptToFolder",
+      this.numSelectedMessages > 0 &&
+        !this.hideMailItems &&
+        !this.onPlayableMedia
+    );
+
+    this.showItem(
       "mailContext-saveAs",
       this.numSelectedMessages > 0 &&
         !this.hideMailItems &&
         !gMessageDisplay.isDummy &&
         !this.onPlayableMedia
     );
 
     // XXX Not quite modifying the message, but the same rules apply at the
@@ -737,16 +751,17 @@ class nsContextMenu {
       "mailContext-sep-edit",
       "mailContext-sep-editTemplate",
       "mailContext-sep-copy",
       "mailContext-sep-reportPhishing",
       "mailContext-sep-undo",
       "mailContext-sep-clipboard",
       "mailContext-spell-suggestions-separator",
       "mailContext-spell-separator",
+      "mailContext-afterPrint", // Careful: Only present if MOZ_OPENPGP.
     ];
     mailContextSeparators.forEach(this.hideIfAppropriate, this);
 
     this.checkLastSeparator(this.xulMenu);
   }
 
   setMessageTargets() {
     if (this.browser) {
diff --git a/mail/extensions/openpgp/content/modules/fixExchangeMsg.jsm b/mail/extensions/openpgp/content/modules/fixExchangeMsg.jsm
--- a/mail/extensions/openpgp/content/modules/fixExchangeMsg.jsm
+++ b/mail/extensions/openpgp/content/modules/fixExchangeMsg.jsm
@@ -12,77 +12,66 @@ const { XPCOMUtils } = ChromeUtils.impor
   "resource://gre/modules/XPCOMUtils.jsm"
 );
 
 XPCOMUtils.defineLazyModuleGetters(this, {
   EnigmailFuncs: "chrome://openpgp/content/modules/funcs.jsm",
   EnigmailLog: "chrome://openpgp/content/modules/log.jsm",
   EnigmailMime: "chrome://openpgp/content/modules/mime.jsm",
   EnigmailStreams: "chrome://openpgp/content/modules/streams.jsm",
-  Services: "resource://gre/modules/Services.jsm",
-  MailServices: "resource:///modules/MailServices.jsm",
-  MailUtils: "resource:///modules/MailUtils.jsm",
+  EnigmailPersistentCrypto:
+    "chrome://openpgp/content/modules/persistentCrypto.jsm",
 });
 
 /*
  *  Fix a broken message from MS-Exchange and replace it with the original message
  *
  * @param nsIMsgDBHdr hdr          Header of the message to fix (= pointer to message)
  * @param String brokenByApp       Type of app that created the message. Currently one of
  *                                  exchange, iPGMail
  * @param String destFolderUri     optional destination Folder URI
+ * @param nsIWindow  win           optional messenger window
  *
  * @return Promise; upon success, the promise returns the messageKey
  */
 var EnigmailFixExchangeMsg = {
-  fixExchangeMessage(hdr, brokenByApp, destFolderUri) {
-    var self = this;
-    return new Promise(function(resolve, reject) {
-      let msgUriSpec = hdr.folder.getUriForMsg(hdr);
+  async fixExchangeMessage(hdr, brokenByApp, destFolderUri = null, win = null) {
+    let msgUriSpec = hdr.folder.getUriForMsg(hdr);
+    EnigmailLog.DEBUG(
+      "fixExchangeMsg.jsm: fixExchangeMessage: msgUriSpec: " + msgUriSpec + "\n"
+    );
+
+    this.hdr = hdr;
+    this.window = win;
+    this.brokenByApp = brokenByApp;
+    this.destFolderUri = destFolderUri;
+
+    let messenger = Cc["@mozilla.org/messenger;1"].createInstance(
+      Ci.nsIMessenger
+    );
+    this.msgSvc = messenger.messageServiceFromURI(msgUriSpec);
+
+    try {
+      let fixedMsgData = await this.getMessageBody();
+
       EnigmailLog.DEBUG(
-        "fixExchangeMsg.jsm: fixExchangeMessage: msgUriSpec: " +
-          msgUriSpec +
+        "fixExchangeMsg.jsm: fixExchangeMessage: got fixedMsgData\n"
+      );
+      if (this.checkMessageStructure(fixedMsgData)) {
+        await this.copyToTargetFolder(fixedMsgData);
+      } else {
+        throw new Error("copyToTargetFolder failed");
+      }
+    } catch (reason) {
+      EnigmailLog.DEBUG(
+        "fixExchangeMsg.jsm: fixExchangeMessage: caught rejection: " +
+          reason +
           "\n"
       );
-
-      self.hdr = hdr;
-      self.destFolder = hdr.folder;
-      self.resolve = resolve;
-      self.reject = reject;
-      self.brokenByApp = brokenByApp;
-
-      if (destFolderUri) {
-        self.destFolder = MailUtils.getExistingFolder(destFolderUri);
-      }
-
-      let messenger = Cc["@mozilla.org/messenger;1"].createInstance(
-        Ci.nsIMessenger
-      );
-      self.msgSvc = messenger.messageServiceFromURI(msgUriSpec);
-
-      let p = self.getMessageBody();
-      p.then(function(fixedMsgData) {
-        EnigmailLog.DEBUG(
-          "fixExchangeMsg.jsm: fixExchangeMessage: got fixedMsgData\n"
-        );
-        if (self.checkMessageStructure(fixedMsgData)) {
-          self.copyToTargetFolder(fixedMsgData);
-        } else {
-          reject();
-        }
-      });
-      p.catch(function(reason) {
-        EnigmailLog.DEBUG(
-          "fixExchangeMsg.jsm: fixExchangeMessage: caught rejection: " +
-            reason +
-            "\n"
-        );
-        reject();
-      });
-    });
+    }
   },
 
   getMessageBody() {
     EnigmailLog.DEBUG("fixExchangeMsg.jsm: getMessageBody:\n");
 
     var self = this;
 
     return new Promise(function(resolve, reject) {
@@ -435,98 +424,18 @@ var EnigmailFixExchangeMsg = {
         ok = p0 >= 0 && p1 > p0 + 32;
       }
       return ok;
     } catch (x) {}
     return false;
   },
 
   copyToTargetFolder(msgData) {
-    var self = this;
-    let tempFile = Services.dirsvc.get("TmpD", Ci.nsIFile);
-    tempFile.append("message.eml");
-    tempFile.createUnique(0, 0o600);
-
-    // ensure that file gets deleted on exit, if something goes wrong ...
-    var extAppLauncher = Cc["@mozilla.org/mime;1"].getService(
-      Ci.nsPIExternalAppLauncher
-    );
-
-    var foStream = Cc[
-      "@mozilla.org/network/file-output-stream;1"
-    ].createInstance(Ci.nsIFileOutputStream);
-    foStream.init(tempFile, 2, 0x200, false); // open as "write only"
-    foStream.write(msgData, msgData.length);
-    foStream.close();
-
-    extAppLauncher.deleteTemporaryFileOnExit(tempFile);
-
-    // note: nsIMsgFolder.copyFileMessage seems to have a bug on Windows, when
-    // the nsIFile has been already used by foStream (because of Windows lock system?), so we
-    // must initialize another nsIFile object, pointing to the temporary file
-    var fileSpec = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
-    fileSpec.initWithPath(tempFile.path);
-
-    var copyListener = {
-      QueryInterface: ChromeUtils.generateQI(["nsIMsgCopyServiceListener"]),
-      msgKey: null,
-      GetMessageId(messageId) {},
-      OnProgress(progress, progressMax) {},
-      OnStartCopy() {},
-      SetMessageKey(key) {
-        this.msgKey = key;
-      },
-      OnStopCopy(statusCode) {
-        if (statusCode !== 0) {
-          EnigmailLog.DEBUG(
-            "fixExchangeMsg.jsm: error copying message: " + statusCode + "\n"
-          );
-          try {
-            tempFile.remove(false);
-          } catch (ex) {
-            EnigmailLog.DEBUG(
-              "persistentCrypto.jsm: Could not delete temp file\n"
-            );
-          }
-          self.reject(3);
-          return;
-        }
-        EnigmailLog.DEBUG("fixExchangeMsg.jsm: copy complete\n");
-
-        EnigmailLog.DEBUG(
-          "fixExchangeMsg.jsm: deleting message key=" +
-            self.hdr.messageKey +
-            "\n"
-        );
-
-        self.hdr.folder.deleteMessages(
-          [self.hdr],
-          null,
-          true,
-          false,
-          null,
-          false
-        );
-        EnigmailLog.DEBUG("fixExchangeMsg.jsm: deleted original message\n");
-
-        try {
-          tempFile.remove(false);
-        } catch (ex) {
-          EnigmailLog.DEBUG(
-            "persistentCrypto.jsm: Could not delete temp file\n"
-          );
-        }
-        self.resolve(this.msgKey);
-      },
-    };
-
-    MailServices.copy.copyFileMessage(
-      fileSpec,
-      this.destFolder,
-      null,
-      false,
-      0,
-      this.hdr.flags,
-      copyListener,
-      null
+    return EnigmailPersistentCrypto.copyMessageToFolder(
+      this.hdr,
+      this.destFolderUri,
+      true,
+      msgData,
+      true,
+      this.window
     );
   },
 };
diff --git a/mail/extensions/openpgp/content/modules/persistentCrypto.jsm b/mail/extensions/openpgp/content/modules/persistentCrypto.jsm
--- a/mail/extensions/openpgp/content/modules/persistentCrypto.jsm
+++ b/mail/extensions/openpgp/content/modules/persistentCrypto.jsm
@@ -18,26 +18,24 @@ XPCOMUtils.defineLazyModuleGetters(this,
   EnigmailArmor: "chrome://openpgp/content/modules/armor.jsm",
   EnigmailConstants: "chrome://openpgp/content/modules/constants.jsm",
   EnigmailCore: "chrome://openpgp/content/modules/core.jsm",
   EnigmailData: "chrome://openpgp/content/modules/data.jsm",
   EnigmailFuncs: "chrome://openpgp/content/modules/funcs.jsm",
   EnigmailEncryption: "chrome://openpgp/content/modules/encryption.jsm",
   EnigmailLog: "chrome://openpgp/content/modules/log.jsm",
   EnigmailMime: "chrome://openpgp/content/modules/mime.jsm",
-  EnigmailStdlib: "chrome://openpgp/content/modules/stdlib.jsm",
   EnigmailFixExchangeMsg:
     "chrome://openpgp/content/modules/fixExchangeMessage.jsm",
   EnigmailDecryption: "chrome://openpgp/content/modules/decryption.jsm",
   EnigmailDialog: "chrome://openpgp/content/modules/dialog.jsm",
   GlodaUtils: "resource:///modules/gloda/GlodaUtils.jsm",
   jsmime: "resource:///modules/jsmime.jsm",
   MailServices: "resource:///modules/MailServices.jsm",
   MailUtils: "resource:///modules/MailUtils.jsm",
-  setTimeout: "resource://gre/modules/Timer.jsm",
 });
 
 XPCOMUtils.defineLazyGetter(this, "l10n", () => {
   return new Localization(["messenger/openpgp/openpgp.ftl"], true);
 });
 
 /*
  *  Decrypt a message and copy it to a folder
@@ -146,16 +144,163 @@ var EnigmailPersistentCrypto = {
         EnigmailMime.getMimeTreeFromUrl(msgUrl, true, function(mime) {
           crypt.messageParseCallback(mime, hdr);
         });
       } catch (ex) {
         reject("msgHdrsDeleteoMimeMessage failed: " + ex.toString());
       }
     });
   },
+
+  copyMessageToFolder(
+    originalMsgHdr,
+    targetFolderUri,
+    deleteOrigMsg,
+    content,
+    selectNew,
+    win = null
+  ) {
+    EnigmailLog.DEBUG("persistentCrypto.jsm: copyMessageToFolder()\n");
+    return new Promise((resolve, reject) => {
+      // Create the temporary file where the new message will be stored.
+      const tempFile = Services.dirsvc.get("TmpD", Ci.nsIFile);
+      tempFile.append("message.eml");
+      tempFile.createUnique(0, 0o600);
+
+      const outputStream = Cc[
+        "@mozilla.org/network/file-output-stream;1"
+      ].createInstance(Ci.nsIFileOutputStream);
+      outputStream.init(tempFile, 2, 0x200, false); // open as "write only"
+      outputStream.write(content, content.length);
+      outputStream.close();
+
+      // Delete file on exit, because Windows locks the file
+      const extAppLauncher = Cc[
+        "@mozilla.org/uriloader/external-helper-app-service;1"
+      ].getService(Ci.nsPIExternalAppLauncher);
+      extAppLauncher.deleteTemporaryFileOnExit(tempFile);
+
+      const msgFolder = originalMsgHdr.folder;
+
+      // The following technique was copied from nsDelAttachListener in Thunderbird's
+      // nsMessenger.cpp. There is a "unified" listener which serves as copy and delete
+      // listener. In all cases, the `OnStopCopy()` of the delete listener selects the
+      // replacement message.
+      // The deletion happens in `OnStopCopy()` of the copy listener for local messages
+      // and in `OnStopRunningUrl()` for IMAP messages if the folder is displayed since
+      // otherwise `OnStopRunningUrl()` doesn't run.
+
+      let copyListener, newKey;
+      let statusCode = 0;
+      let deletedOld = false;
+      const destFolder = targetFolderUri
+        ? MailUtils.getExistingFolder(targetFolderUri)
+        : msgFolder;
+
+      copyListener = {
+        QueryInterface: ChromeUtils.generateQI([
+          "nsIMsgCopyServiceListener",
+          "nsIUrlListener",
+        ]),
+        GetMessageId(messageId) {
+          // Maybe enable this later. Most of the Thunderbird code does not supply this.
+          // messageId = { value: msgHdr.messageId };
+        },
+        SetMessageKey(key) {
+          EnigmailLog.DEBUG(
+            `persistentCrypto.jsm: copyMessageToFolder: Result of CopyFileMessage() is new message with key ${key}\n`
+          );
+          newKey = key;
+        },
+        applyFlags() {
+          let newHdr = destFolder.GetMessageHeader(newKey);
+          newHdr.markRead(originalMsgHdr.isRead);
+          newHdr.markFlagged(originalMsgHdr.isFlagged);
+          newHdr.subject = originalMsgHdr.subject;
+        },
+        deleteMsg() {
+          if (!deleteOrigMsg || deletedOld) {
+            resolve(true);
+            return;
+          }
+          try {
+            EnigmailLog.DEBUG(
+              `persistentCrypto.jsm: copyMessageToFolder: Deleting old message with key ${originalMsgHdr.messageKey}\n`
+            );
+            msgFolder.deleteMessages([originalMsgHdr], null, true, false, null, false);
+          } catch (ex) {
+            EnigmailLog.ERROR(ex.toString());
+          }
+          deletedOld = true;
+          resolve(true);
+        },
+        OnStartRunningUrl() {},
+        OnStopRunningUrl() {
+          // This is not called for local and off-screen folders, hence we delete in `OnStopCopy()`.
+          if (statusCode !== 0) {
+            return;
+          }
+          EnigmailLog.DEBUG(
+            "persistentCrypto.jsm: copyMessageToFolder: Triggering deletion from OnStopRunningUrl()\n"
+          );
+          this.applyFlags();
+          this.deleteMsg();
+        },
+        OnStartCopy() {},
+        OnStopCopy(status) {
+          statusCode = status;
+          if (statusCode !== 0) {
+            EnigmailLog.ERROR(
+              `persistentCrypto.jsm: ${statusCode} replacing message, folder="${msgFolder.name}", key=${originalMsgHdr.messageKey}/${newKey}\n`
+            );
+            resolve(false);
+            return;
+          }
+
+          try {
+            tempFile.remove();
+          } catch (ex) {}
+
+          if (
+            msgFolder.folderURL.startsWith("mailbox:") ||
+            // IMAP's `OnStopRunningUrl()` does not run for off-screen folders.
+            (win && win.gDBView && win.gDBView.msgFolder != msgFolder) ||
+            // If we don't have a window or view, delete the message here
+            // since we don't know whether `OnStopRunningUrl()` will run.
+            !win ||
+            !win.gDBView
+          ) {
+            EnigmailLog.DEBUG(
+              "persistentCrypto.jsm: copyMessageToFolder: Triggering deletion from OnStopCopy()\n"
+            );
+            this.applyFlags();
+            this.deleteMsg();
+            return;
+          }
+
+          EnigmailLog.DEBUG(
+            "persistentCrypto.jsm: copyMessageToFolder: Not triggering deletion from OnStopCopy()\n"
+          );
+
+          resolve(true);
+        },
+      };
+
+      MailServices.copy.copyFileMessage(
+        tempFile,
+        destFolder,
+        null,
+        false,
+        originalMsgHdr.flags,
+        "",
+        copyListener,
+        null
+      );
+    });
+  },
 };
 
 function CryptMessageIntoFolder(destFolder, move, resolve, targetKey) {
   this.destFolder = destFolder;
   this.move = move;
   this.resolve = resolve;
   this.targetKey = targetKey;
   this.messageDecrypted = false;
@@ -454,16 +599,33 @@ CryptMessageIntoFolder.prototype = {
           this.mimeTree.headers._rawHeaders.set("subject", [subject]);
         }
       } else if (this.mimeTree.headers.get("subject") === "p≡p") {
         let subject = getPepSubject(data);
         if (subject) {
           subject = subject.replace(/^(Re: )+/, "Re: ");
           this.mimeTree.headers._rawHeaders.set("subject", [subject]);
         }
+      } else if (
+        !(statusFlagsObj.value & EnigmailConstants.GOOD_SIGNATURE) &&
+        ct.search(/^multipart\/signed/i) === 0
+      ) {
+        // RFC 3156, Section 6.1 message
+        let innerMsg = EnigmailMime.getMimeTree(data, false);
+        if (innerMsg.subParts.length > 0) {
+          ct = innerMsg.subParts[0].fullContentType;
+          let hdrMap = innerMsg.subParts[0].headers._rawHeaders;
+          if (ct.search(/protected-headers/i) >= 0 && hdrMap.has("subject")) {
+            let subject = innerMsg.subParts[0].headers._rawHeaders
+              .get("subject")
+              .join("");
+            subject = subject.replace(/^(Re: )+/, "Re: ");
+            this.mimeTree.headers._rawHeaders.set("subject", [subject]);
+          }
+        }
       }
     }
 
     let boundary = getBoundary(mimePart);
     if (!boundary) {
       boundary = EnigmailMime.createBoundary();
     }
 
@@ -490,50 +652,122 @@ CryptMessageIntoFolder.prototype = {
       },
     ];
 
     this.messageDecrypted = true;
   },
 
   decryptAttachment(mimePart) {
     EnigmailLog.DEBUG("persistentCrypto.jsm: decryptAttachment()\n");
-    throw new Error("Not implemented");
-
-    /*
     let attachmentHead = mimePart.body.substr(0, 30);
     if (attachmentHead.search(/-----BEGIN PGP \w{5,10} KEY BLOCK-----/) >= 0) {
       // attachment appears to be a PGP key file, we just go-a-head
       return;
     }
 
+    const uiFlags =
+      EnigmailConstants.UI_INTERACTIVE |
+      EnigmailConstants.UI_UNVERIFIED_ENC_OK |
+      EnigmailConstants.UI_IGNORE_MDC_ERROR;
+    let exitCodeObj = {};
+    let statusFlagsObj = {};
+    let userIdObj = {};
+    let sigDetailsObj = {};
+    let errorMsgObj = {};
+    let keyIdObj = {};
+    let blockSeparationObj = {
+      value: "",
+    };
+    let encToDetailsObj = {};
+    var signatureObj = {};
+    signatureObj.value = "";
+
     let attachmentName = getAttachmentName(mimePart);
-    attachmentName = attachmentName ? attachmentName.replace(/\.(pgp|asc|gpg)$/, "") : "";
+    attachmentName = attachmentName
+      ? attachmentName.replace(/\.(pgp|asc|gpg)$/, "")
+      : "";
+
+    let data = EnigmailDecryption.decryptMessage(
+      null,
+      uiFlags,
+      mimePart.body,
+      signatureObj,
+      exitCodeObj,
+      statusFlagsObj,
+      keyIdObj,
+      userIdObj,
+      sigDetailsObj,
+      errorMsgObj,
+      blockSeparationObj,
+      encToDetailsObj
+    );
 
-    EnigmailLog.DEBUG("persistentCrypto.jsm: decryptAttachment: decrypted to " + listener.stdoutData.length + " bytes\n");
-    if (statusFlagsObj.encryptedFileName && statusFlagsObj.encryptedFileName.length > 0) {
+    if (
+      (data && data.length > 0) ||
+      statusFlagsObj.value & EnigmailConstants.DECRYPTION_OKAY
+    ) {
+      EnigmailLog.DEBUG(
+        "persistentCrypto.jsm: decryptAttachment: decryption OK\n"
+      );
+    } else if (
+      statusFlagsObj.value &
+      (EnigmailConstants.DECRYPTION_FAILED | EnigmailConstants.MISSING_MDC)
+    ) {
+      EnigmailLog.DEBUG(
+        "persistentCrypto.jsm: decryptAttachment: decryption without MDC protection\n"
+      );
+    } else if (statusFlagsObj.value & EnigmailConstants.DECRYPTION_FAILED) {
+      EnigmailLog.DEBUG(
+        "persistentCrypto.jsm: decryptAttachment: decryption failed\n"
+      );
+      // Enigmail promts the user here, but we just keep going.
+    } else if (statusFlagsObj.value & EnigmailConstants.DECRYPTION_INCOMPLETE) {
+      // failure; message not complete
+      EnigmailLog.DEBUG(
+        "persistentCrypto.jsm: decryptAttachment: decryption incomplete\n"
+      );
+      return;
+    } else {
+      // there is nothing to be decrypted
+      EnigmailLog.DEBUG(
+        "persistentCrypto.jsm: decryptAttachment: no decryption required\n"
+      );
+      return;
+    }
+
+    EnigmailLog.DEBUG(
+      "persistentCrypto.jsm: decryptAttachment: decrypted to " +
+        data.length +
+        " bytes\n"
+    );
+    if (
+      statusFlagsObj.encryptedFileName &&
+      statusFlagsObj.encryptedFileName.length > 0
+    ) {
       attachmentName = statusFlagsObj.encryptedFileName;
     }
 
     this.decryptedMessage = true;
-    mimePart.body = listener.stdoutData;
-    mimePart.headers._rawHeaders.set("content-disposition", `attachment; filename="${attachmentName}"`);
+    mimePart.body = data;
+    mimePart.headers._rawHeaders.set(
+      "content-disposition",
+      `attachment; filename="${attachmentName}"`
+    );
     mimePart.headers._rawHeaders.set("content-transfer-encoding", ["base64"]);
     let origCt = mimePart.headers.get("content-type");
     let ct = origCt.type;
 
-
     for (let i of origCt.entries()) {
       if (i[0].toLowerCase() === "name") {
         i[1] = i[1].replace(/\.(pgp|asc|gpg)$/, "");
       }
       ct += `; ${i[0]}="${i[1]}"`;
     }
 
     mimePart.headers._rawHeaders.set("content-type", [ct]);
-    */
   },
 
   async decryptINLINE(mimePart) {
     EnigmailLog.DEBUG("persistentCrypto.jsm: decryptINLINE()\n");
 
     if ("decryptedPgpMime" in mimePart && mimePart.decryptedPgpMime) {
       return 0;
     }
@@ -817,126 +1051,23 @@ CryptMessageIntoFolder.prototype = {
       }
 
       msg += `--${boundary}--\r\n`;
     }
     return msg;
   },
 
   storeMessage(msg) {
-    let self = this;
-
-    return new Promise((resolve, reject) => {
-      //XXX Do we wanna use the tmp for this?
-      let tempFile = Services.dirsvc.get("TmpD", Ci.nsIFile);
-      tempFile.append("message.eml");
-      tempFile.createUnique(0, 384); // == 0600, octal is deprecated
-
-      // ensure that file gets deleted on exit, if something goes wrong ...
-      let extAppLauncher = Cc["@mozilla.org/mime;1"].getService(
-        Ci.nsPIExternalAppLauncher
-      );
-
-      let foStream = Cc[
-        "@mozilla.org/network/file-output-stream;1"
-      ].createInstance(Ci.nsIFileOutputStream);
-      foStream.init(tempFile, 2, 0x200, false); // open as "write only"
-      foStream.write(msg, msg.length);
-      foStream.close();
-
-      extAppLauncher.deleteTemporaryFileOnExit(tempFile);
-
-      //
-      //  This was taken from the HeaderToolsLite Example Addon "original by Frank DiLecce"
-      //
-      // this is interesting: nsIMsgFolder.copyFileMessage seems to have a bug on Windows, when
-      // the nsIFile has been already used by foStream (because of Windows lock system?), so we
-      // must initialize another nsIFile object, pointing to the temporary file
-      let fileSpec = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
-      fileSpec.initWithPath(tempFile.path);
-
-      let copyListener = {
-        QueryInterface: ChromeUtils.generateQI(["nsIMsgCopyServiceListener"]),
-        GetMessageId(messageId) {},
-        OnProgress(progress, progressMax) {},
-        OnStartCopy() {
-          EnigmailLog.DEBUG(
-            "persistentCrypto.jsm: copyListener: OnStartCopy()\n"
-          );
-        },
-        SetMessageKey(key) {
-          EnigmailLog.DEBUG(
-            "persistentCrypto.jsm: copyListener: SetMessageKey(" + key + ")\n"
-          );
-        },
-        OnStopCopy(statusCode) {
-          EnigmailLog.DEBUG(
-            "persistentCrypto.jsm: copyListener: OnStopCopy()\n"
-          );
-          if (statusCode !== 0) {
-            EnigmailLog.DEBUG(
-              "persistentCrypto.jsm: Error copying message: " +
-                statusCode +
-                "\n"
-            );
-            try {
-              tempFile.remove(false);
-            } catch (ex) {
-              try {
-                fileSpec.remove(false);
-              } catch (e2) {
-                EnigmailLog.DEBUG(
-                  "persistentCrypto.jsm: Could not delete temp file\n"
-                );
-              }
-            }
-            resolve(true);
-            return;
-          }
-          EnigmailLog.DEBUG("persistentCrypto.jsm: Copy complete\n");
-
-          if (self.move) {
-            deleteOriginalMail(self.hdr);
-          }
-
-          try {
-            tempFile.remove(false);
-          } catch (ex) {
-            try {
-              fileSpec.remove(false);
-            } catch (e2) {
-              EnigmailLog.DEBUG(
-                "persistentCrypto.jsm: Could not delete temp file\n"
-              );
-            }
-          }
-
-          EnigmailLog.DEBUG("persistentCrypto.jsm: Cave Johnson. We're done\n");
-          resolve(true);
-        },
-      };
-
-      EnigmailLog.DEBUG("persistentCrypto.jsm: copySvc ready for copy\n");
-      try {
-        if (self.mimeTree.headers.has("subject")) {
-          self.hdr.subject = self.mimeTree.headers.get("subject");
-        }
-      } catch (ex) {}
-
-      MailServices.copy.copyFileMessage(
-        fileSpec,
-        MailUtils.getExistingFolder(self.destFolder),
-        null,
-        false,
-        0,
-        "",
-        copyListener,
-        null
-      );
-    });
+    return EnigmailPersistentCrypto.copyMessageToFolder(
+      this.hdr,
+      this.destFolder,
+      this.move,
+      msg,
+      false
+    );
   },
 
   fixExchangeMessage(mimePart) {
     EnigmailLog.DEBUG("persistentCrypto.jsm: fixExchangeMessage()\n");
 
     let msg = this.mimeToString(mimePart, true);
 
     try {
@@ -1086,16 +1217,32 @@ function isAttachment(mime) {
           }
         }
       }
     }
   } catch (x) {}
   return false;
 }
 
+function getAttachmentName(mime) {
+  try {
+    if (mime && "headers" in mime && mime.headers.has("content-disposition")) {
+      let c = mime.headers.get("content-disposition")[0];
+      if (c) {
+        if (c.search(/^attachment/i) === 0) {
+          return EnigmailMime.getParameter(c, "filename");
+        }
+      }
+    }
+  } catch (e) {
+    EnigmailLog.DEBUG("persistentCrypto.jsm: getAttachmentName: " + e + "\n");
+  }
+  return null;
+}
+
 function getPepSubject(mimeString) {
   EnigmailLog.DEBUG("persistentCrypto.jsm: getPepSubject()\n");
 
   let subject = null;
 
   let emitter = {
     ct: "",
     firstPlainText: false,
@@ -1148,34 +1295,8 @@ function getPepSubject(mimeString) {
 
   try {
     let p = new jsmime.MimeParser(emitter, opt);
     p.deliverData(mimeString);
   } catch (ex) {}
 
   return subject;
 }
-
-/**
- * Lazy deletion of original messages
- */
-function deleteOriginalMail(msgHdr) {
-  EnigmailLog.DEBUG(
-    "persistentCrypto.jsm: deleteOriginalMail(" + msgHdr.messageKey + ")\n"
-  );
-
-  let delMsg = function() {
-    try {
-      EnigmailLog.DEBUG(
-        "persistentCrypto.jsm: deleting original message " +
-          msgHdr.messageKey +
-          "\n"
-      );
-      EnigmailStdlib.msgHdrsDelete([msgHdr]);
-    } catch (e) {
-      EnigmailLog.DEBUG(
-        "persistentCrypto.jsm: deletion failed. Error: " + e.toString() + "\n"
-      );
-    }
-  };
-
-  setTimeout(delMsg, 500);
-}
diff --git a/mail/extensions/openpgp/content/ui/enigmailMessengerOverlay.js b/mail/extensions/openpgp/content/ui/enigmailMessengerOverlay.js
--- a/mail/extensions/openpgp/content/ui/enigmailMessengerOverlay.js
+++ b/mail/extensions/openpgp/content/ui/enigmailMessengerOverlay.js
@@ -1886,17 +1886,22 @@ Enigmail.msg = {
       await document.l10n.formatValue("openpgp-broken-exchange-wait"),
       "brokenExchangeProgress",
       null,
       this.notificationBox.PRIORITY_INFO_HIGH,
       null
     );
 
     let msg = gFolderDisplay.messageDisplay.displayedMessage;
-    EnigmailFixExchangeMsg.fixExchangeMessage(msg, this.buggyMailType)
+    EnigmailFixExchangeMsg.fixExchangeMessage(
+      msg,
+      this.buggyMailType,
+      null,
+      window
+    )
       .then(msgKey => {
         // Display the new message which now has the key msgKey.
         EnigmailLog.DEBUG(
           "enigmailMessengerOverlay.js: fixBuggyExchangeMail: _success: msgKey=" +
             msgKey +
             "\n"
         );
         gFolderDisplay.view.dbView.selectMsgByKey(msgKey);
@@ -2873,16 +2878,42 @@ Enigmail.msg = {
         event.stopPropagation();
       }
     }
   },
 
   // create a decrypted copy of all selected messages in a target folder
 
   decryptToFolder(destFolder) {
+    if (
+      Services.prefs.getBoolPref("mail.warn_on_decrypt_to_nonlocal", true) &&
+      !destFolder.URI.startsWith("mailbox:")
+    ) {
+      let checkBox = { value: false };
+      let messengerBundle = document.getElementById("bundle_messenger");
+      let result = Services.prompt.confirmEx(
+        window,
+        messengerBundle.getString("decryptToFolder.title"),
+        messengerBundle.getString("decryptToFolder.desc"),
+        Services.prompt.BUTTON_POS_1_DEFAULT +
+          Services.prompt.STD_OK_CANCEL_BUTTONS,
+        null, // Button 1
+        null, // Button 2
+        null, // Button 3
+        messengerBundle.getString("decryptToFolder.dontAsk.label"),
+        checkBox
+      );
+      if (result == 0 && checkBox.value) {
+        Services.prefs.setBoolPref("mail.warn_on_decrypt_to_nonlocal", false);
+      }
+      if (result != 0) {
+        return;
+      }
+    }
+
     let msgHdrs = gFolderDisplay ? gFolderDisplay.selectedMessages : null;
     if (!msgHdrs || msgHdrs.length === 0) {
       return;
     }
 
     EnigmailPersistentCrypto.dispatchMessages(
       msgHdrs,
       destFolder.URI,
diff --git a/mail/locales/en-US/chrome/messenger/messenger.dtd b/mail/locales/en-US/chrome/messenger/messenger.dtd
--- a/mail/locales/en-US/chrome/messenger/messenger.dtd
+++ b/mail/locales/en-US/chrome/messenger/messenger.dtd
@@ -782,16 +782,18 @@
   -->
 <!ENTITY contextWatchThreadMenu.accesskey "">
 <!ENTITY contextSaveAs.label "Save As…">
 <!ENTITY contextSaveAs.accesskey "S">
 <!ENTITY contextPrint.label "Print…">
 <!ENTITY contextPrint.accesskey "P">
 <!ENTITY contextPrintPreview.label "Print Preview">
 <!ENTITY contextPrintPreview.accesskey "v">
+<!ENTITY contextDecryptToFolder.label "Decrypt to Folder">
+<!ENTITY contextDecryptToFolder.accesskey "Y">
 
 <!-- LOCALIZATION NOTE (columnPicker.applyTo.label):
      This option in the thread pane column picker pops up a sub-menu containing
      the "columnPicker.applyToFolder.label" and
      "columnPicker.applyToFolderAndChildren.label" options. This item indicates
      a desire to apply the currently displayed set of columns to some other
      folder(s). The sub-menu items indicate whether we want to apply it to just
      a folder or also its children.
diff --git a/mail/locales/en-US/chrome/messenger/messenger.properties b/mail/locales/en-US/chrome/messenger/messenger.properties
--- a/mail/locales/en-US/chrome/messenger/messenger.properties
+++ b/mail/locales/en-US/chrome/messenger/messenger.properties
@@ -635,16 +635,21 @@ loadingTab=Loading…
 
 confirmMsgDelete.title=Confirm Deletion
 confirmMsgDelete.collapsed.desc=This will delete messages in collapsed threads. Are you sure you want to continue?
 confirmMsgDelete.deleteNoTrash.desc=This will delete messages immediately, without saving a copy to Trash. Are you sure you want to continue?
 confirmMsgDelete.deleteFromTrash.desc=This will permanently delete messages from Trash. Are you sure you want to continue?
 confirmMsgDelete.dontAsk.label=Don't ask me again.
 confirmMsgDelete.delete.label=Delete
 
+# Decrypt to folder
+decryptToFolder.title=Confirm Decrypt
+decryptToFolder.desc=This will decrypt messages to a folder which is not local. Are you sure you want to continue?
+decryptToFolder.dontAsk.label=Don't ask me again.
+
 mailServerLoginFailedTitle=Login Failed
 # LOCALIZATION NOTE (mailServerLoginFailedTitleWithAccount):
 # "%S" is the account name.
 mailServerLoginFailedTitleWithAccount=Login to account "%S" failed
 # LOCALIZATION NOTE (mailServerLoginFailed2):
 # %1$S is the host name of the server, %2$S is the user name.
 mailServerLoginFailed2=Login to server %1$S with username %2$S failed.
 mailServerLoginFailedRetryButton=&Retry
