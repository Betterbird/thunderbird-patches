# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1632654779 -7200
# Parent  4a3a99ccf5db0f7fb7b8bb7f620aba0d5e13e274
Bug 188988 - Switch on indexing of encrypted parts in Gloda depending on pref.

diff --git a/mail/components/preferences/general.inc.xhtml b/mail/components/preferences/general.inc.xhtml
--- a/mail/components/preferences/general.inc.xhtml
+++ b/mail/components/preferences/general.inc.xhtml
@@ -986,16 +986,21 @@
     <html:fieldset data-category="paneGeneral">
       <html:legend data-l10n-id="general-indexing-label"></html:legend>
       <vbox>
         <hbox>
           <checkbox id="enableGloda"
                     preference="mailnews.database.global.indexer.enabled"
                     data-l10n-id="enable-gloda-search-label"/>
         </hbox>
+        <hbox>
+          <checkbox id="enableGlodaEncryptedParts"
+                    preference="mailnews.database.global.indexer.examine_encrypted_parts"
+                    data-l10n-id="enable-gloda-search-encrypted-label"/>
+        </hbox>
         <hbox align="center">
           <label control="storeTypeMenulist" data-l10n-id="store-type-label"/>
           <hbox>
             <menulist id="storeTypeMenulist"
                       oncommand="gGeneralPane.updateDefaultStore(this.selectedItem.value)">
               <menupopup id="storeTypeMenupopup">
                 <menuitem id="mboxStore"
                           data-l10n-id="mbox-store-label"
diff --git a/mail/components/preferences/general.js b/mail/components/preferences/general.js
--- a/mail/components/preferences/general.js
+++ b/mail/components/preferences/general.js
@@ -59,16 +59,17 @@ Preferences.addAll([
   { id: "mail.fixed_width_messages", type: "bool" },
   { id: "mail.quoted_style", type: "int" },
   { id: "mail.quoted_size", type: "int" },
   { id: "mail.citation_color", type: "string" },
   { id: "mail.display_glyph", type: "bool" },
   { id: "font.language.group", type: "wstring" },
   { id: "intl.regional_prefs.use_os_locales", type: "bool" },
   { id: "mailnews.database.global.indexer.enabled", type: "bool" },
+  { id: "mailnews.database.global.indexer.examine_encrypted_parts", type: "bool" },
   { id: "mailnews.labels.description.1", type: "wstring" },
   { id: "mailnews.labels.color.1", type: "string" },
   { id: "mailnews.labels.description.2", type: "wstring" },
   { id: "mailnews.labels.color.2", type: "string" },
   { id: "mailnews.labels.description.3", type: "wstring" },
   { id: "mailnews.labels.color.3", type: "string" },
   { id: "mailnews.labels.description.4", type: "wstring" },
   { id: "mailnews.labels.color.4", type: "string" },
diff --git a/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm b/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
--- a/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
+++ b/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
@@ -869,16 +869,36 @@ MimeDecryptHandler.prototype = {
     }
 
     this.decryptedHeaders = r.newHeaders;
     if (r.startPos >= 0 && r.endPos > r.startPos) {
       this.decryptedData =
         this.decryptedData.substr(0, r.startPos) +
         this.decryptedData.substr(r.endPos);
     }
+
+    if (
+      this.decryptedHeaders?.subject &&
+      this.uri?.spec.includes("emitter=js&examineEncryptedParts=true")
+    ) {
+      // This is a little hack for Gloda. Although we pass the protected-headers part back via
+      // `this.returnData()` the new subject is not acknowledged and Gloda uses
+      // `msgHeg.mime2DecodedSubject` which may be just "...".
+      // So we store the original header in the database. If you have a better idea, let us know!
+      let msgHdr = this.uri.QueryInterface(Ci.nsIMsgMessageUrl).messageHeader;
+      if (msgHdr) {
+        msgHdr.setStringProperty(
+          "originalSubject",
+          String.fromCharCode.apply(
+            undefined,
+            new TextEncoder("UTF-8").encode(this.decryptedHeaders.subject)
+          )
+        );
+      }
+    }
   },
 
   /*
   async extractAutocryptGossip() {
     let m1 = this.decryptedData.search(/^--/m);
     let m2 = this.decryptedData.search(/\r?\n\r?\n/);
     let m = Math.max(m1, m2);
 
diff --git a/mail/extensions/openpgp/content/modules/mimeVerify.jsm b/mail/extensions/openpgp/content/modules/mimeVerify.jsm
--- a/mail/extensions/openpgp/content/modules/mimeVerify.jsm
+++ b/mail/extensions/openpgp/content/modules/mimeVerify.jsm
@@ -443,16 +443,38 @@ MimeVerify.prototype = {
       let r =
         this.signedData.substr(0, this.protectedHeaders.startPos) +
         this.signedData.substr(this.protectedHeaders.endPos);
       this.returnData(r);
     } else {
       this.returnData(this.signedData);
     }
 
+    if (
+      this.protectedHeaders?.newHeaders.subject &&
+      this.uri?.spec.includes("emitter=js&examineEncryptedParts=true")
+    ) {
+      // This is a little hack for Gloda. Although we pass the protected-headers part back via
+      // `this.returnData()` the new subject is not acknowledged and Gloda uses
+      // `msgHeg.mime2DecodedSubject` which may be just "...".
+      // So we store the original header in the database. If you have a better idea, let us know!
+      let msgHdr = this.uri.QueryInterface(Ci.nsIMsgMessageUrl).messageHeader;
+      if (msgHdr) {
+        msgHdr.setStringProperty(
+          "originalSubject",
+          String.fromCharCode.apply(
+            undefined,
+            new TextEncoder("UTF-8").encode(
+              this.protectedHeaders.newHeaders.subject
+            )
+          )
+        );
+      }
+    }
+
     // return if not verifying first mime part
     if (
       this.mimePartNumber.length > 0 &&
       this.mimePartNumber.search(/^1(\.1)?$/) < 0
     ) {
       return;
     }
 
diff --git a/mail/locales/en-US/messenger/preferences/preferences.ftl b/mail/locales/en-US/messenger/preferences/preferences.ftl
--- a/mail/locales/en-US/messenger/preferences/preferences.ftl
+++ b/mail/locales/en-US/messenger/preferences/preferences.ftl
@@ -219,16 +219,19 @@ mail-custom-sound-label =
 mail-browse-sound-button =
     .label = Browseâ€¦
     .accesskey = B
 
 enable-gloda-search-label =
     .label = Enable Global Search and Indexer
     .accesskey = G
 
+enable-gloda-search-encrypted-label =
+    .label = Enable search in encrypted messages (stores decrypted copy locally)
+
 datetime-formatting-legend = Date and Time Formatting
 language-selector-legend = Language
 
 allow-hw-accel =
     .label = Use hardware acceleration when available
     .accesskey = h
 
 store-type-label =
diff --git a/mailnews/db/gloda/modules/IndexMsg.jsm b/mailnews/db/gloda/modules/IndexMsg.jsm
--- a/mailnews/db/gloda/modules/IndexMsg.jsm
+++ b/mailnews/db/gloda/modules/IndexMsg.jsm
@@ -9,16 +9,17 @@
  *  indexing with a very explicit message indexing implementation.  As gloda
  *  will eventually want to index more than just messages, the message-specific
  *  things should ideally lose their special hold on this file.  This will
  *  benefit readability/size as well.
  */
 
 const EXPORTED_SYMBOLS = ["GlodaMsgIndexer"];
 
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 const { MailServices } = ChromeUtils.import(
   "resource:///modules/MailServices.jsm"
 );
 const { MailUtils } = ChromeUtils.import("resource:///modules/MailUtils.jsm");
 
 const { GlodaDatastore } = ChromeUtils.import(
   "resource:///modules/gloda/GlodaDatastore.jsm"
 );
@@ -3102,22 +3103,33 @@ var GlodaMsgIndexer = {
     );
 
     // If the message is offline, then get the message body as well
     let aMimeMsg;
     if (
       aMsgHdr.flags & Ci.nsMsgMessageFlags.Offline ||
       aMsgHdr.folder instanceof Ci.nsIMsgLocalMailFolder
     ) {
+      let options;
+      if (
+        Services.prefs.getBoolPref(
+          "mailnews.database.global.indexer.examine_encrypted_parts",
+          false
+        )
+      ) {
+        options = { saneBodySize: true, examineEncryptedParts: true };
+      } else {
+        options = { saneBodySize: true };
+      }
       this._MsgHdrToMimeMessageFunc(
         aMsgHdr,
         aCallbackHandle.callbackThis,
         aCallbackHandle.callback,
         false,
-        { saneBodySize: true }
+        options
       );
       aMimeMsg = (yield this.kWorkAsync)[1];
     } else {
       this._log.debug("  * Message is not offline -- only headers indexed");
     }
 
     this._log.debug("  * Got message, subject " + aMsgHdr.subject);
 
@@ -3328,17 +3340,26 @@ var GlodaMsgIndexer = {
       }
     }
 
     // Mark the message as new (for the purposes of fulltext insertion)
     if (insertFulltext) {
       curMsg._isNew = true;
     }
 
-    curMsg._subject = aMsgHdr.mime2DecodedSubject;
+    curMsg._subject = aMsgHdr.getStringProperty("originalSubject");
+    if (curMsg._subject) {
+      let arr = new Uint8Array(curMsg._subject.length);
+      for (let i = 0; i < curMsg._subject.length; i++) {
+        arr[i] = curMsg._subject.charCodeAt(i);
+      }
+      curMsg._subject = new TextDecoder().decode(arr);
+    } else {
+      curMsg._subject = aMsgHdr.mime2DecodedSubject;
+    }
     curMsg._attachmentNames = attachmentNames;
 
     // curMsg._indexAuthor gets set by GlodaFundAttr.jsm
     // curMsg._indexRecipients gets set by GlodaFundAttr.jsm
 
     // zero the notability so everything in grokNounItem can just increment
     curMsg.notability = 0;
 
diff --git a/mailnews/mailnews.js b/mailnews/mailnews.js
--- a/mailnews/mailnews.js
+++ b/mailnews/mailnews.js
@@ -1097,16 +1097,18 @@ pref("mailnews.database.dbcache.loglevel
 // -- Global Database (gloda) options
 // Should the indexer be enabled?
 pref("mailnews.database.global.indexer.enabled", false);
 pref("gloda.loglevel", "Warn");
 pref("gloda.test.loglevel", "Warn");
 // Rate of growth of the gloda cache, whose maximum value is 8 MiB and max is 64 MiB.
 // See more: https://developer.mozilla.org/en/Thunderbird/gloda#Cache_Size"
 pref("mailnews.database.global.datastore.cache_to_memory_permillage", 10);
+// Enable search in encrypted parts. Conservatively switched off.
+pref("mailnews.database.global.indexer.examine_encrypted_parts", false);
 
 // default field order in the fieldmap
 pref("mailnews.import.text.fieldmap", "+0,+1,+2,+3,+4,+5,+36,+6,+7,+8,+9,+10,+11,+12,+13,+14,+15,+16,+17,+18,+19,+20,+21,+22,+23,+24,+25,+26,+27,+28,+29,+30,+31,+32,+33,+34,+35");
 
 // On networks deploying QoS, it is recommended that these be lockpref()'d,
 // since inappropriate marking can easily overwhelm bandwidth reservations
 // for certain services (i.e. EF for VoIP, AF4x for interactive video,
 // AF3x for broadcast/streaming video, etc)
