# vim: se ft=diff :
# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1625515489 -7200
# Parent  7b385f24c0b625ec625d0723eebd4e23511c45ce
Bug 166541 - open X-Unsent from command line for editing. r=jorgk

diff --git a/mail/base/content/mailWindowOverlay.js b/mail/base/content/mailWindowOverlay.js
--- a/mail/base/content/mailWindowOverlay.js
+++ b/mail/base/content/mailWindowOverlay.js
@@ -19,16 +19,17 @@
 /* import-globals-from utilityOverlay.js */
 
 var { FeedUtils } = ChromeUtils.import("resource:///modules/FeedUtils.jsm");
 var { GlodaSyntheticView } = ChromeUtils.import(
   "resource:///modules/gloda/GlodaSyntheticView.jsm"
 );
 var { MailConsts } = ChromeUtils.import("resource:///modules/MailConsts.jsm");
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+var { MimeParser } = ChromeUtils.import("resource:///modules/mimeParser.jsm");
 var { MailServices } = ChromeUtils.import(
   "resource:///modules/MailServices.jsm"
 );
 var { MailUtils } = ChromeUtils.import("resource:///modules/MailUtils.jsm");
 var { PluralForm } = ChromeUtils.import(
   "resource://gre/modules/PluralForm.jsm"
 );
 var { AppConstants } = ChromeUtils.import(
@@ -2425,29 +2426,59 @@ function MsgOpenFromFile() {
 
   // Default or last filter is "All Files".
   fp.appendFilters(nsIFilePicker.filterAll);
 
   fp.open(rv => {
     if (rv != nsIFilePicker.returnOK || !fp.file) {
       return;
     }
-    let uri = fp.fileURL.QueryInterface(Ci.nsIURL);
-    uri = uri
-      .mutate()
-      .setQuery("type=application/x-message-display")
-      .finalize();
-
+    MsgOpenEMLFile(fp.file, fp.fileURL);
+  });
+}
+
+/**
+ * Open the given .eml file.
+ */
+function MsgOpenEMLFile(aFile, aURL) {
+  let url = aURL
+    .mutate()
+    .setQuery("type=application/x-message-display")
+    .finalize();
+
+  let fstream = Cc["@mozilla.org/network/file-input-stream;1"].createInstance(
+    Ci.nsIFileInputStream
+  );
+  fstream.init(aFile, -1, 0, 0);
+  let data = NetUtil.readInputStreamToString(fstream, fstream.available());
+  fstream.close();
+
+  let headers = MimeParser.extractHeaders(data);
+  if (headers.get("X-Unsent") == "1") {
+    let msgWindow = Cc["@mozilla.org/messenger/msgwindow;1"].createInstance(
+      Ci.nsIMsgWindow
+    );
+    MailServices.compose.OpenComposeWindow(
+      null,
+      {},
+      url.spec,
+      Ci.nsIMsgCompType.Draft,
+      Ci.nsIMsgCompFormat.Default,
+      null,
+      headers.get("from"),
+      msgWindow
+    );
+  } else {
     window.openDialog(
       "chrome://messenger/content/messageWindow.xhtml",
       "_blank",
       "all,chrome,dialog=no,status,toolbar",
-      uri
+      url
     );
-  });
+  }
 }
 
 function MsgOpenNewWindowForMessage(aMsgHdr) {
   // no message header provided?  get the selected message (this will give us
   //  the right-click selected message if that's what is going down.)
   if (!aMsgHdr) {
     aMsgHdr = gFolderDisplay.selectedMessage;
   }
diff --git a/mail/components/MessengerContentHandler.jsm b/mail/components/MessengerContentHandler.jsm
--- a/mail/components/MessengerContentHandler.jsm
+++ b/mail/components/MessengerContentHandler.jsm
@@ -2,16 +2,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 var EXPORTED_SYMBOLS = ["MessengerContentHandler"];
 
 var { NetUtil } = ChromeUtils.import("resource://gre/modules/NetUtil.jsm");
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+var { MimeParser } = ChromeUtils.import("resource:///modules/mimeParser.jsm");
 var { MailServices } = ChromeUtils.import(
   "resource:///modules/MailServices.jsm"
 );
 
 var URI_INHERITS_SECURITY_CONTEXT =
   Ci.nsIProtocolHandler.URI_INHERITS_SECURITY_CONTEXT;
 
 function resolveURIInternal(aCmdLine, aArgument) {
@@ -375,32 +376,73 @@ MailDefaultHandler.prototype = {
       ) {
         handleIndexerResult(cmdLine.resolveFile(uri));
         cmdLine.preventDefault = true;
       } else if (uri.toLowerCase().endsWith(".eml")) {
         // Open this eml in a new message window
         let file = cmdLine.resolveFile(uri);
         // No point in trying to open a file if it doesn't exist or is empty
         if (file.exists() && file.fileSize > 0) {
+          let fstream = Cc[
+            "@mozilla.org/network/file-input-stream;1"
+          ].createInstance(Ci.nsIFileInputStream);
+          fstream.init(file, -1, 0, 0);
+          let data = NetUtil.readInputStreamToString(
+            fstream,
+            fstream.available()
+          );
+          fstream.close();
+
+          let headers = MimeParser.extractHeaders(data);
+
           // Get the URL for this file
           let fileURL = Services.io
             .newFileURI(file)
             .QueryInterface(Ci.nsIFileURL);
           fileURL = fileURL
             .mutate()
             .setQuery("type=application/x-message-display")
             .finalize();
 
-          Services.ww.openWindow(
-            null,
-            "chrome://messenger/content/messageWindow.xhtml",
-            "_blank",
-            "all,chrome,dialog=no,status,toolbar",
-            fileURL
-          );
+          if (headers.get("X-Unsent") == "1") {
+            let win = Services.wm.getMostRecentWindow("mail:3pane");
+            if (!win) {
+              let argstring = Cc[
+                "@mozilla.org/supports-string;1"
+              ].createInstance(Ci.nsISupportsString);
+              Services.ww.openWindow(
+                null,
+                "chrome://messenger/content/messenger.xhtml",
+                "_blank",
+                "chrome,dialog=no,all",
+                argstring
+              );
+            }
+            let msgWindow = Cc[
+              "@mozilla.org/messenger/msgwindow;1"
+            ].createInstance(Ci.nsIMsgWindow);
+            MailServices.compose.OpenComposeWindow(
+              null,
+              {},
+              fileURL.spec,
+              Ci.nsIMsgCompType.Draft,
+              Ci.nsIMsgCompFormat.Default,
+              null,
+              headers.get("from"),
+              msgWindow
+            );
+          } else {
+            Services.ww.openWindow(
+              null,
+              "chrome://messenger/content/messageWindow.xhtml",
+              "_blank",
+              "all,chrome,dialog=no,status,toolbar",
+              fileURL
+            );
+          }
           cmdLine.preventDefault = true;
         } else {
           let bundle = Services.strings.createBundle(
             "chrome://messenger/locale/messenger.properties"
           );
           let title, message;
           if (!file.exists()) {
             title = bundle.GetStringFromName("fileNotFoundTitle");
