# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1643885501 -3600
# Parent  f89129087547c54e2bc5929fb005aaaeefadfa94
Bug 1753331 - Do not treat links at all when dragging.

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -8055,20 +8055,18 @@ function msgSubjectOnInput(event) {
   gSubjectChanged = true;
   gContentChanged = true;
   SetComposeWindowTitle();
 }
 
 // Content types supported in the envelopeDragObserver.
 let flavors = [
   "application/x-moz-file",
-  "text/uri-list",
   "text/x-moz-address",
   "text/x-moz-message",
-  "text/x-moz-url",
 ];
 
 // We can drag and drop addresses, files, messages and urls into the compose
 // envelope.
 var envelopeDragObserver = {
   /**
    * Adjust the drop target when dragging from the attachment bucket onto itself
    * by picking the nearest possible insertion point (generally, between two
@@ -8240,38 +8238,16 @@ var envelopeDragObserver = {
           isValidAttachment = true;
           let msgHdr = gMessenger
             .messageServiceFromURI(data)
             .messageURIToMsgHdr(data);
           prettyName = msgHdr.mime2DecodedSubject + ".eml";
           size = msgHdr.messageSize;
           break;
 
-        case "text/uri-list":
-        case "text/x-moz-url":
-          let pieces = data.split("\n");
-          data = pieces[0];
-          if (pieces.length > 1) {
-            prettyName = pieces[1];
-          }
-          if (pieces.length > 2) {
-            size = parseInt(pieces[2]);
-          }
-
-          // If this is a URL (or selected text), check if it's a valid URL
-          // by checking if we can extract a scheme using Services.io.
-          // Don't attach invalid or mailto: URLs.
-          try {
-            let scheme = Services.io.extractScheme(data);
-            if (scheme != "mailto") {
-              isValidAttachment = true;
-            }
-          } catch (ex) {}
-          break;
-
         // Process address: Drop it into recipient field.
         case "text/x-moz-address":
           // Process the drop only if the message body wasn't the target and we
           // called this method from the onDrop() method.
           if (event.target.baseURI != "about:blank?compose" && isDropping) {
             DropRecipient(event.target, data);
             // Prevent the default behaviour which drops the address text into
             // the widget.
@@ -8492,18 +8468,18 @@ var envelopeDragObserver = {
         document.l10n.setAttributes(
           document.getElementById("addInlineLabel"),
           "drop-file-label-inline",
           { count: attachments.length || 1 }
         );
 
         // Show the #addInline box only if the user is dragging only images and
         // this is not a plain text message.
-        // NOTE: We're using event.dataTransfer.files.lenght instead of
-        // attachments.lenght because we only need to consider images coming
+        // NOTE: We're using event.dataTransfer.files.length instead of
+        // attachments.length because we only need to consider images coming
         // from outside the application. The attachments array might contain
         // files dragged from other compose windows or received message, which
         // should not trigger the inline attachment overlay.
         document
           .getElementById("addInline")
           .classList.toggle(
             "hidden",
             !event.dataTransfer.files.length ||
