# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1646854396 -3600
# Parent  557d942b99754b10e0d154749c84f849e0b81747
Bug 532712 - disable some code that replaces NBSP with ASCII space.

diff --git a/editor/libeditor/WSRunObject.cpp b/editor/libeditor/WSRunObject.cpp
--- a/editor/libeditor/WSRunObject.cpp
+++ b/editor/libeditor/WSRunObject.cpp
@@ -752,24 +752,31 @@ Result<RefPtr<Element>, nsresult> WhiteS
       resultOfInsertingBRElement.isOk(),
       "HTMLEditor::InsertBRElementWithTransaction(eNone) failed");
   MOZ_ASSERT_IF(resultOfInsertingBRElement.isOk(),
                 resultOfInsertingBRElement.inspect());
   return resultOfInsertingBRElement;
 }
 
 // static
+static bool priorInsertWasNBSP = false;
+static bool currentInsertIsNBSP = false;
 nsresult WhiteSpaceVisibilityKeeper::ReplaceText(
     HTMLEditor& aHTMLEditor, const nsAString& aStringToInsert,
     const EditorDOMRange& aRangeToBeReplaced,
     EditorRawDOMPoint* aPointAfterInsertedString /* = nullptr */) {
   // MOOSE: for now, we always assume non-PRE formatting.  Fix this later.
   // meanwhile, the pre case is handled in HandleInsertText() in
   // HTMLEditSubActionHandler.cpp
 
+  // Ugly hack to make inserting a NBSP not trigger its removal when
+  // the next character is typed.
+  priorInsertWasNBSP = currentInsertIsNBSP;
+  currentInsertIsNBSP = aStringToInsert.EqualsLiteral(u"\x00A0");
+
   // MOOSE: for now, just getting the ws logic straight.  This implementation
   // is very slow.  Will need to replace edit rules impl with a more efficient
   // text sink here that does the minimal amount of searching/replacing/copying
 
   if (aStringToInsert.IsEmpty()) {
     MOZ_ASSERT(aRangeToBeReplaced.Collapsed());
     if (aPointAfterInsertedString) {
       *aPointAfterInsertedString = aRangeToBeReplaced.StartRef();
@@ -942,22 +949,24 @@ nsresult WhiteSpaceVisibilityKeeper::Rep
       if (!atNBSPReplacedWithASCIIWhiteSpace.IsEndOfContainer() &&
           atNBSPReplacedWithASCIIWhiteSpace.IsCharNBSP()) {
         AutoTrackDOMPoint trackPointToInsert(aHTMLEditor.RangeUpdaterRef(),
                                              &pointToInsert);
         AutoTrackDOMRange trackInvisibleTrailingWhiteSpaceRange(
             aHTMLEditor.RangeUpdaterRef(),
             &invisibleTrailingWhiteSpaceRangeAtEnd);
         AutoTransactionsConserveSelection dontChangeMySelection(aHTMLEditor);
-        nsresult rv = aHTMLEditor.ReplaceTextWithTransaction(
-            MOZ_KnownLive(*atNBSPReplacedWithASCIIWhiteSpace.ContainerAsText()),
-            atNBSPReplacedWithASCIIWhiteSpace.Offset(), 1, u" "_ns);
-        if (NS_FAILED(rv)) {
-          NS_WARNING("HTMLEditor::ReplaceTextWithTransaction() failed failed");
-          return rv;
+        if (!priorInsertWasNBSP) {
+          nsresult rv = aHTMLEditor.ReplaceTextWithTransaction(
+              MOZ_KnownLive(*atNBSPReplacedWithASCIIWhiteSpace.ContainerAsText()),
+              atNBSPReplacedWithASCIIWhiteSpace.Offset(), 1, u" "_ns);
+          if (NS_FAILED(rv)) {
+            NS_WARNING("HTMLEditor::ReplaceTextWithTransaction() failed failed");
+            return rv;
+          }
         }
         // Don't refer the following variables anymore unless tracking the
         // change.
         atNBSPReplaceableWithSP.Clear();
         invisibleLeadingWhiteSpaceRangeAtStart.Clear();
       }
     }
   }
@@ -2879,29 +2888,39 @@ nsresult WhiteSpaceVisibilityKeeper::Nor
               !atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
                    .IsEndOfContainer() &&
               atPreviousCharOfPreviousCharOfEndOfVisibleWhiteSpaces
                   .IsCharASCIISpace();
           followedByVisibleContentOrBRElement = true;
         }
       }
 
+#if 0
+  This block gets in the way of inserting NBSP with Ctrl+Shift+Space since it
+  replaces the NBSP immediately with `ReplaceTextWithTransaction(..., u" "_ns)`.
+  So kill the whole block to have one thing less to worry about.
+
+  Note that this is controlled by
+  `!StaticPrefs::editor_white_space_normalization_blink_compatible()`
+  so perhaps the days of this code are counted anyway.
+
       // Next, replace the NBSP with an ASCII white-space if it's surrounded
       // by visible contents (or immediately before a <br> element).
       if (maybeNBSPFollowingVisibleContent &&
           followedByVisibleContentOrBRElement) {
         AutoTransactionsConserveSelection dontChangeMySelection(aHTMLEditor);
         nsresult rv = aHTMLEditor.ReplaceTextWithTransaction(
             MOZ_KnownLive(
                 *atPreviousCharOfEndOfVisibleWhiteSpaces.ContainerAsText()),
             atPreviousCharOfEndOfVisibleWhiteSpaces.Offset(), 1, u" "_ns);
         NS_WARNING_ASSERTION(NS_SUCCEEDED(rv),
                              "HTMLEditor::ReplaceTextWithTransaction() failed");
         return rv;
       }
+#endif
     }
     // If the text node is not preformatted, and the NBSP is followed by a <br>
     // element and following (maybe multiple) ASCII spaces, remove the NBSP,
     // but inserts a NBSP before the spaces.  This makes a line break
     // opportunity to wrap the line.
     // XXX This is different behavior from Blink.  Blink generates pairs of
     //     an NBSP and an ASCII white-space, but put NBSP at the end of the
     //     sequence.  We should follow the behavior for web-compat.
