# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1630480807 -7200
# Parent  56c2c20c5d0bd9df163a4531127dfe63ac2013d4
Bug 1721063 - Rework MailNotificationService.jsm to improve Windows systray tooltip.

diff --git a/mailnews/base/public/mozINewMailListener.idl b/mailnews/base/public/mozINewMailListener.idl
--- a/mailnews/base/public/mozINewMailListener.idl
+++ b/mailnews/base/public/mozINewMailListener.idl
@@ -11,12 +11,13 @@
  * from mozINewMailNotificationService
  * NOTE: THIS INTERFACE IS UNDER ACTIVE DEVELOPMENT AND SUBJECT TO CHANGE,
  * see https://bugzilla.mozilla.org/show_bug.cgi?id=715799
  */
 interface mozINewMailListener : nsISupports {
   /** The new mail notification service will call this when the number of interesting
    * messages has changed
    *
-   * @param unreadCount   The number of unread messages the user cares to be notified about
+   * @param count   The number of unread messages the user cares to be notified about
+   * @param extra   Any additional information that could be relevant (like where the new message are)
    */
-  void onCountChanged(in unsigned long count);
+  void onCountChanged(in unsigned long count, in AString extra);
 };
diff --git a/mailnews/base/src/MailNotificationManager.jsm b/mailnews/base/src/MailNotificationManager.jsm
--- a/mailnews/base/src/MailNotificationManager.jsm
+++ b/mailnews/base/src/MailNotificationManager.jsm
@@ -32,16 +32,17 @@ class MailNotificationManager {
     "nsIFolderListener",
     "mozINewMailListener",
   ]);
 
   constructor() {
     this._systemAlertAvailable = true;
     this._unreadChatCount = 0;
     this._unreadMailCount = 0;
+    this._unreadMailExtra = "";
     // @type {Map<nsIMsgFolder, number>} - A map of folder and its last biff time.
     this._folderBiffTime = new Map();
     // @type {Set<nsIMsgFolder>} - A set of folders to show alert for.
     this._pendingFolders = new Set();
 
     this._logger = console.createInstance({
       prefix: "mail.notification",
       maxLogLevel: "Warn",
@@ -159,19 +160,20 @@ class MailNotificationManager {
         this._fillAlertInfo(folder);
         break;
     }
   }
 
   /**
    * @see mozINewMailNotificationService
    */
-  onCountChanged(count) {
+  onCountChanged(count, extra) {
     this._logger.log(`Unread mail count changed to ${count}`);
     this._unreadMailCount = count;
+    this._unreadMailExtra = extra;
     this._updateUnreadCount();
   }
 
   /**
    * Show an alert according the changed folder.
    * @param {nsIMsgFolder} changedFolder - The folder that emitted the change
    *   event, can be a root folder or a real folder.
    */
@@ -429,16 +431,19 @@ class MailNotificationManager {
     if (AppConstants.platform == "win") {
       if (!Services.prefs.getBoolPref("mail.biff.show_badge", true)) {
         count = 0;
       }
       if (count > 0) {
         tooltip = await l10n.formatValue("unread-messages-os-tooltip", {
           count,
         });
+        if (this._unreadMailExtra) {
+          tooltip += this._unreadMailExtra;
+        }
       }
       await WinUnreadBadge.updateUnreadCount(count, tooltip);
     }
     this._osIntegration?.updateUnreadCount(count, tooltip);
 
     this._updatingUnreadCount = false;
     if (this._pendingUpdate) {
       // There was at least one _updateUnreadCount call while we were rendering
diff --git a/mailnews/base/src/MailNotificationService.jsm b/mailnews/base/src/MailNotificationService.jsm
--- a/mailnews/base/src/MailNotificationService.jsm
+++ b/mailnews/base/src/MailNotificationService.jsm
@@ -24,16 +24,18 @@ var countInboxesPref = "mail.notificatio
 var countNewMessagesPref = "mail.biff.use_new_count_in_badge";
 
 // constructor
 function NewMailNotificationService() {
   this._mUnreadCount = 0;
   this._mNewCount = 0;
   this._listeners = [];
   this.wrappedJSObject = this;
+  this.folderCountMap = new Map();
+  this.folderNewMap = new Map();
 
   this._log = console.createInstance({
     prefix: "mail.notification",
     maxLogLevel: "Warn",
     maxLogLevelPref: "mail.notification.loglevel",
   });
 
   // Listen for mail-startup-done to do the rest of our setup after folders are initialized
@@ -69,16 +71,17 @@ NewMailNotificationService.prototype = {
             "NMNS_Observe: unable to deregister mail-startup-done listener: " +
               e
           );
         }
         Services.obs.addObserver(this, "profile-before-change");
         MailServices.mailSession.AddFolderListener(
           this,
           Ci.nsIFolderListener.intPropertyChanged |
+            Ci.nsIFolderListener.boolPropertyChanged |
             Ci.nsIFolderListener.added |
             Ci.nsIFolderListener.removed |
             Ci.nsIFolderListener.propertyFlagChanged
         );
         this._initUnreadCount();
       } else if (aTopic == "profile-before-change") {
         try {
           MailServices.mailSession.RemoveFolderListener(this);
@@ -166,16 +169,19 @@ NewMailNotificationService.prototype = {
     } else if (
       aFolder.flags & Ci.nsMsgFolderFlags.SpecialUse &&
       !(aFolder.flags & Ci.nsMsgFolderFlags.Inbox)
     ) {
       // It's a special folder *other than the inbox*, don't count it by default.
       shouldCount.data = false;
     } else if (aFolder.flags & Ci.nsMsgFolderFlags.Virtual) {
       shouldCount.data = false;
+    } else if (Services.prefs.getBoolPref(countNewMessagesPref, true)) {
+      // If we're counting new messages, we count them in all folders.
+      shouldCount.data = true;
     } else {
       // If we're only counting inboxes and it's not an inbox...
       try {
         // If we can't get this pref, just leave it as the default
         let onlyCountInboxes = Services.prefs.getBoolPref(countInboxesPref);
         if (onlyCountInboxes && !(aFolder.flags & Ci.nsMsgFolderFlags.Inbox)) {
           shouldCount.data = false;
         }
@@ -192,131 +198,238 @@ NewMailNotificationService.prototype = {
     );
     this._log.trace(
       "NMNS_confirmShouldCount: after observers " + shouldCount.data
     );
 
     return shouldCount.data;
   },
 
+  OnItemBoolPropertyChanged(folder, property, oldValue, newValue) {
+    this._log.trace(
+      "NMNS_OnItemBoolPropertyChanged: folder " +
+        folder.URI +
+        " " +
+        property +
+        " " +
+        oldValue +
+        " " +
+        newValue
+    );
+    if (property == "NewMessages") {
+      this._newMessagesChanged(folder, oldValue, newValue);
+    }
+  },
+
   OnItemIntPropertyChanged(folder, property, oldValue, newValue) {
     try {
       if (property == "FolderSize") {
         return;
       }
       this._log.trace(
         "NMNS_OnItemIntPropertyChanged: folder " +
           folder.URI +
           " " +
           property +
           " " +
           oldValue +
           " " +
           newValue
       );
-      if (property == "BiffState") {
-        this._biffStateChanged(folder, oldValue, newValue);
-      } else if (property == "TotalUnreadMessages") {
+      if (property == "TotalUnreadMessages") {
         this._updateUnreadCount(folder, oldValue, newValue);
-      } else if (property == "NewMailReceived") {
-        this._newMailReceived(folder, oldValue, newValue);
+        // For new folders, there is a call with old == -1 and new == 0.
+        this._updateNewCount(folder, newValue - Math.max(oldValue, 0));
       }
     } catch (error) {
       this._log.error("NMNS_OnItemIntPropertyChanged: exception " + error);
     }
   },
 
-  _biffStateChanged(folder, oldValue, newValue) {
-    if (newValue == Ci.nsIMsgFolder.nsMsgBiffState_NewMail) {
-      if (folder.server && !folder.server.performingBiff) {
-        this._log.debug(
-          "NMNS_biffStateChanged: folder " +
-            folder.URI +
-            " notified, but server not performing biff"
+  _updateNewCount(folder, newCount, allowNegative = false) {
+    if (!this.confirmShouldCount(folder)) {
+      return;
+    }
+
+    this._log.debug(
+      "NMNS_updateNewCount: folder " + folder.URI + " new messages: " + newCount
+    );
+    let folderCount = this.folderCountMap.get(folder.URI);
+    if (!folderCount) {
+      if (allowNegative) {
+        this.folderCountMap.set(folder.URI, newCount);
+      } else {
+        this.folderCountMap.set(folder.URI, Math.max(newCount, 0));
+      }
+    } else {
+      /* eslint-disable no-lonely-if */
+      if (allowNegative) {
+        this.folderCountMap.set(folder.URI, folderCount + newCount);
+      } else {
+        this.folderCountMap.set(
+          folder.URI,
+          Math.max(folderCount + newCount, 0)
         );
-        return;
       }
+      /* eslint-enable no-lonely-if */
+    }
 
-      // Biff notifications come in for the top level of the server, we need to look for
-      // the folder that actually contains the new mail
-
-      let allFolders = [folder, ...folder.descendants];
+    let folderNew = this.folderNewMap.get(folder.URI);
+    if (!folderNew) {
+      return;
+    }
 
-      this._log.trace(
-        "NMNS_biffStateChanged: folder " +
-          folder.URI +
-          " New mail, " +
-          (allFolders.length - 1) +
-          " subfolders"
+    this._mNewCount = Math.max(this._mNewCount + newCount, 0);
+    this._log.debug(
+      "NMNS_updateNewCount: " +
+        folder.URI +
+        " New mail count " +
+        this._mNewCount
+    );
+    if (this.countNew) {
+      this._notifyListeners(
+        NMNS.count,
+        "onCountChanged",
+        this._mNewCount,
+        this._folderInfo()
       );
-      let newCount = 0;
+    }
+  },
 
-      for (let folder of allFolders) {
-        if (this.confirmShouldCount(folder)) {
-          let folderNew = folder.getNumNewMessages(false);
+  _newMessagesChanged(folder, oldValue, newValue) {
+    if (newValue) {
+      // We have new messages.
+      // `getNumNewMessages()` doesn't work until after the biff
+      // notification (BiffState or NumNewBiffMessages changed)
+      // and it doesn't work on local folders at all.
+      // We use a change of TotalUnreadMessages.
+      let folderNew = this.folderNewMap.get(folder.URI);
+      if (!folderNew) {
+        this.folderNewMap.set(folder.URI, {
+          name: folder.name,
+          isInbox: folder.flags & Ci.nsMsgFolderFlags.Inbox,
+        });
+        let folderCount = this.folderCountMap.get(folder.URI);
+        if (folderCount) {
+          // The count arrived before the "NewMessages" notification.
+          this._mNewCount += folderCount;
           this._log.debug(
-            "NMNS_biffStateChanged: folder " +
+            "NMNS_newMessagesChanged: " +
               folder.URI +
-              " new messages: " +
-              folderNew
+              " New mail count " +
+              this._mNewCount
           );
-          if (folderNew > 0) {
-            newCount += folderNew;
+          if (this.countNew) {
+            this._notifyListeners(
+              NMNS.count,
+              "onCountChanged",
+              this._mNewCount,
+              this._folderInfo()
+            );
           }
         }
       }
-      if (newCount > 0) {
-        this._mNewCount += newCount;
+    } else {
+      // New messages went away.
+      let folderCount = this.folderCountMap.get(folder.URI);
+      this.folderCountMap.delete(folder.URI);
+      this.folderNewMap.delete(folder.URI);
+      if (folderCount) {
+        this._mNewCount = Math.max(this._mNewCount - folderCount, 0);
         this._log.debug(
-          "NMNS_biffStateChanged: " +
+          "NMNS_newMessagesChanged: " +
             folder.URI +
             " New mail count " +
             this._mNewCount
         );
         if (this.countNew) {
-          this._notifyListeners(NMNS.count, "onCountChanged", this._mNewCount);
+          this._notifyListeners(
+            NMNS.count,
+            "onCountChanged",
+            this._mNewCount,
+            this._folderInfo()
+          );
         }
       }
-    } else if (newValue == Ci.nsIMsgFolder.nsMsgBiffState_NoMail) {
-      // Dodgy - when any folder tells us it has no mail, clear all unread mail
-      this._mNewCount = 0;
-      this._log.debug(
-        "NMNS_biffStateChanged: " + folder.URI + " New mail count 0"
-      );
-      if (this.countNew) {
-        this._notifyListeners(NMNS.count, "onCountChanged", this._mNewCount);
-      }
     }
   },
 
-  _newMailReceived(folder, oldValue, newValue) {
-    if (!this.confirmShouldCount(folder)) {
-      return;
+  _folderInfo() {
+    let totalInbox = 0;
+    let countInbox = 0;
+    let inboxName = "";
+    let folders = [];
+    for (const [key, value] of this.folderNewMap) {
+      if (!this.folderNewMap.get(key)) {
+        continue;
+      }
+      let count = this.folderCountMap.get(key);
+      if (!count) {
+        continue;
+      }
+      if (value.isInbox) {
+        totalInbox += count;
+        countInbox++;
+        inboxName = value.name; // Could be localised.
+        continue;
+      }
+      folders.push({ count, name: value.name });
     }
-
-    if (!oldValue || oldValue < 0) {
-      oldValue = 0;
+    if (totalInbox == 0 && folders.length == 0) {
+      return "";
+    }
+    let output = "\n";
+    let folderAddsComma = false;
+    if (totalInbox > 0) {
+      output += inboxName;
+      if (countInbox > 1) {
+        output += "(Σ)";
+      }
+      output += ": " + totalInbox.toString(10);
+      folderAddsComma = true;
+    }
+    if (folders.length == 0) {
+      return output;
     }
-    let oldTotal = this._mNewCount;
-    this._mNewCount += newValue - oldValue;
-    this._log.debug(
-      "NMNS_newMailReceived: " +
-        folder.URI +
-        " Old folder " +
-        oldValue +
-        " New folder " +
-        newValue +
-        " Old total " +
-        oldTotal +
-        " New total " +
-        this._mNewCount
-    );
-    if (this.countNew) {
-      this._notifyListeners(NMNS.count, "onCountChanged", this._mNewCount);
+    let lineLength = output.length - 1; // Don't count the initial newline.
+    folders.sort((el1, el2) => el2.count - el1.count);
+    for (let i = 0; i < folders.length; i++) {
+      let folder = folders[i].name + ": " + folders[i].count.toString(10);
+      // The total length of the tooltip must no exceed 127 characters, or it's truncated.
+      // There are already around 27 characters in "9999 unread messages" or
+      // "9999 ungelesene Nachrichten", other languages may have more
+      // (although I didn't see one, checked es, pt, zh, ja).
+      // So let's keep the count unter 100. We need two characters for
+      // the connector, either ", " or "\n ".
+      if (output.length + folder.length + 2 > 100) {
+        // Sorry, can't list more folders.
+        output += ", \u2026";
+        break;
+      }
+      if (lineLength + folder.length > 50) {
+        if (folderAddsComma) {
+          output += ",\n" + folder;
+        } else {
+          // No comma, so this is the first thing we add.
+          output += folder;
+          folderAddsComma = true;
+        }
+        lineLength = folder.length;
+        continue;
+      }
+      if (folderAddsComma) {
+        output += ", " + folder;
+      } else {
+        // No comma, so this is the first thing we add.
+        output += folder;
+        folderAddsComma = true;
+      }
+      lineLength += folder.length;
     }
+    return output;
   },
 
   _updateUnreadCount(folder, oldValue, newValue) {
     if (!this.confirmShouldCount(folder)) {
       return;
     }
 
     // treat "count unknown" as zero
@@ -346,16 +459,19 @@ NewMailNotificationService.prototype = {
             " added to " +
             item.folder.folderURL
         );
       }
     }
   },
 
   OnItemPropertyFlagChanged(item, property, oldFlag, newFlag) {
+    if (property != "Status") {
+      return;
+    }
     if (item instanceof Ci.nsIMsgDBHdr) {
       if (
         oldFlag & Ci.nsMsgMessageFlags.New &&
         !(newFlag & Ci.nsMsgMessageFlags.New)
       ) {
         this._log.trace(
           "NMNS_OnItemPropertyFlagChanged: item " +
             item.folder.getUriForMsg(item) +
@@ -363,16 +479,34 @@ NewMailNotificationService.prototype = {
         );
       } else if (newFlag & Ci.nsMsgMessageFlags.New) {
         this._log.trace(
           "NMNS_OnItemPropertyFlagChanged: item " +
             item.folder.getUriForMsg(item) +
             " marked unread"
         );
       }
+
+      if (!(oldFlag & Ci.nsMsgMessageFlags.New)) {
+        // Changing read status of non-new message. We need to
+        // compensate since this will change the (new) unread
+        // message count which we might be tracking on the folder.
+        if (
+          oldFlag & Ci.nsMsgMessageFlags.Read &&
+          !(newFlag & Ci.nsMsgMessageFlags.Read)
+        ) {
+          this._updateNewCount(item.folder, -1, true);
+        }
+        if (
+          !(oldFlag & Ci.nsMsgMessageFlags.Read) &&
+          newFlag & Ci.nsMsgMessageFlags.Read
+        ) {
+          this._updateNewCount(item.folder, 1);
+        }
+      }
     }
   },
 
   OnItemRemoved(parentItem, item) {
     if (item instanceof Ci.nsIMsgDBHdr && !item.isRead) {
       this._log.trace(
         "NMNS_OnItemRemoved: unread item " +
           item.folder.getUriForMsg(item) +
@@ -431,18 +565,25 @@ NewMailNotificationService.prototype = {
       let l = this._listeners[i];
       if (l.flags & flag) {
         list.push(l.obj);
       }
     }
     return list;
   },
 
-  _notifyListeners(flag, func, value) {
+  _notifyListeners(flag, func, value1, value2 = "") {
     let list = this._listenersForFlag(flag);
     for (let i = 0; i < list.length; i++) {
       this._log.debug(
-        "NMNS_notifyListeners " + flag + " " + func + " " + value
+        "NMNS_notifyListeners " +
+          flag +
+          " " +
+          func +
+          " " +
+          value1 +
+          " " +
+          value2
       );
-      list[i][func](value);
+      list[i][func](value1, value2);
     }
   },
 };
diff --git a/mailnews/base/src/WinUnreadBadge.jsm b/mailnews/base/src/WinUnreadBadge.jsm
--- a/mailnews/base/src/WinUnreadBadge.jsm
+++ b/mailnews/base/src/WinUnreadBadge.jsm
@@ -72,17 +72,17 @@ function drawUnreadCountText(cxt, text) 
   cxt.save();
 
   let imageSize = cxt.canvas.width;
 
   // Use smaller fonts for longer text to try and squeeze it in.
   let fontSize = imageSize * (0.95 - 0.15 * text.length);
 
   cxt.font = "500 " + fontSize + "px Calibri";
-  cxt.fillStyle = "#ffffff";
+  cxt.fillStyle = "#000000";
   cxt.textAlign = "center";
 
   // TODO: There isn't a textBaseline for accurate vertical centering ('middle' is the
   // middle of the 'em block', and digits extend higher than 'm'), and the Mozilla core
   // does not currently support computation of ascenders and descenters in measureText().
   // So, we just assume that the font is 70% of the 'px' height we requested, then
   // compute where the baseline ought to be located.
   let approximateHeight = fontSize * 0.7;
@@ -104,17 +104,17 @@ function drawUnreadCountText(cxt, text) 
  */
 function createModernBadgeStyle(canvas, text) {
   let cxt = canvas.getContext("2d");
   let iconSize = canvas.width;
 
   // Draw the background.
   cxt.save();
   // Solid color first.
-  cxt.fillStyle = "#ff0039";
+  cxt.fillStyle = "#ffffff";
   cxt.shadowOffsetX = 0;
   cxt.shadowOffsetY = 0;
   cxt.shadowColor = "rgba(0,0,0,0.7)";
   cxt.shadowBlur = iconSize / 10;
   cxt.beginPath();
   cxt.arc(iconSize / 2, iconSize / 2, iconSize / 2.25, 0, Math.PI * 2, true);
   cxt.fill();
   cxt.clip();
diff --git a/mailnews/base/src/nsMessengerWinIntegration.cpp b/mailnews/base/src/nsMessengerWinIntegration.cpp
--- a/mailnews/base/src/nsMessengerWinIntegration.cpp
+++ b/mailnews/base/src/nsMessengerWinIntegration.cpp
@@ -222,20 +222,21 @@ nsresult nsMessengerWinIntegration::SetT
     NS_ENSURE_TRUE(bundleService, NS_ERROR_UNEXPECTED);
     nsCOMPtr<nsIStringBundle> bundle;
     rv = bundleService->CreateBundle(
         "chrome://branding/locale/brand.properties", getter_AddRefs(bundle));
     NS_ENSURE_SUCCESS(rv, rv);
     rv = bundle->GetStringFromName("brandShortName", mBrandShortName);
     NS_ENSURE_SUCCESS(rv, rv);
   }
-  nsString tooltip = mBrandShortName;
-  if (!mUnreadTooltip.IsEmpty()) {
-    tooltip.AppendLiteral("\n");
-    tooltip.Append(mUnreadTooltip);
+  nsString tooltip;
+  if (mUnreadTooltip.IsEmpty()) {
+    tooltip = mBrandShortName;
+  } else {
+    tooltip = mUnreadTooltip;
   }
   size_t destLength =
       sizeof sMailIconData.szTip / (sizeof sMailIconData.szTip[0]);
   ::StringCchCopyNW(sMailIconData.szTip, destLength, tooltip.get(),
                     tooltip.Length());
   return rv;
 }
 
