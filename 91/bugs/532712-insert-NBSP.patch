# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1646773985 -3600
# Parent  8abf892fdea5239d61ae7ccd6ca1945fff2fc35b
Bug 532712 - Implement Ctrl+Shift+Space to insert NBSP.

diff --git a/mail/components/compose/content/ComposerCommands.js b/mail/components/compose/content/ComposerCommands.js
--- a/mail/components/compose/content/ComposerCommands.js
+++ b/mail/components/compose/content/ComposerCommands.js
@@ -141,16 +141,17 @@ function SetupTextEditorCommands() {
 
   commandTable.registerCommand("cmd_findReplace", nsFindReplaceCommand);
   commandTable.registerCommand("cmd_find", nsFindCommand);
   commandTable.registerCommand("cmd_findNext", nsFindAgainCommand);
   commandTable.registerCommand("cmd_findPrev", nsFindAgainCommand);
   commandTable.registerCommand("cmd_rewrap", nsRewrapCommand);
   commandTable.registerCommand("cmd_spelling", nsSpellingCommand);
   commandTable.registerCommand("cmd_insertChars", nsInsertCharsCommand);
+  commandTable.registerCommand("cmd_insertNBSP", nsInsertNBSPCommand);
 }
 
 /**
  * Used to register the command controller in the editor document.
  *
  * @returns {nsIControllerCommandTable|null} - A controller used to
  *   register the manually created commands.
  */
@@ -1587,16 +1588,56 @@ var nsInsertBreakAllCommand = {
 
   doCommand(aCommand) {
     try {
       GetCurrentEditor().insertHTML("<br clear='all'>");
     } catch (e) {}
   },
 };
 
+var nsInsertNBSPCommand = {
+  isCommandEnabled(aCommand, dummy) {
+    return IsDocumentEditable();
+  },
+
+  getCommandStateParams(aCommand, aParams, aRefCon) {},
+  doCommandParams(aCommand, aParams, aRefCon) {},
+
+  doCommand(aCommand) {
+    try {
+      if (IsHTMLEditor()) {
+        // HTML editor refuses to add a &nbsp; or \u00a0,
+        // so do it the hard way.
+        let editor = GetCurrentEditor();
+        editor.insertText(" ");
+        // We've just added a space to into a text node,
+        // so replace that now.
+        let selection = editor.selection;
+        let range = selection.getRangeAt(0);
+        let start = range.startOffset;
+        let startNode = range.startContainer;
+        startNode.textContent =
+          startNode.textContent.substr(0, start - 1) +
+          "\u00a0" +
+          startNode.textContent.substr(start);
+        // Hitting the content loses the selection.
+        range.setStart(startNode, start);
+        range.setEnd(startNode, start);
+        selection.removeAllRanges();
+        selection.addRange(range);
+        // This gets the NBSP inserted, but the next edit action will
+        // remove it again :-(
+        // It works to insert a NBSP between two other characters.
+      } else {
+        GetCurrentEditor().insertText("\u00a0");
+      }
+    } catch (e) {}
+  },
+};
+
 var nsListPropertiesCommand = {
   isCommandEnabled(aCommand, dummy) {
     return IsDocumentEditable() && IsEditingRenderedHTML();
   },
 
   getCommandStateParams(aCommand, aParams, aRefCon) {},
   doCommandParams(aCommand, aParams, aRefCon) {},
 
diff --git a/mail/components/compose/content/messengercompose.xhtml b/mail/components/compose/content/messengercompose.xhtml
--- a/mail/components/compose/content/messengercompose.xhtml
+++ b/mail/components/compose/content/messengercompose.xhtml
@@ -406,16 +406,17 @@
   <key id="key_delete" keycode="VK_DELETE" command="cmd_delete"/>
   <key id="key_renameAttachment" keycode="VK_F2"
        command="cmd_renameAttachment"/>
 #endif
   <key id="key_reorderAttachments"
        key="&reorderAttachmentsCmd.key;" modifiers="accel,shift"
        command="cmd_reorderAttachments"/>
   <key id="key_selectAll" data-l10n-id="text-action-select-all-shortcut" modifiers="accel"/>
+  <key id="key_insertNBSP" key=" " modifiers="accel, shift" oncommand="goDoCommand('cmd_insertNBSP')"/>
   <key id="key_find" key="&findBarCmd.key;" command="cmd_find" modifiers="accel"/>
 #ifndef XP_MACOSX
   <key id="key_findReplace" key="&findReplaceCmd.key;" command="cmd_findReplace" modifiers="accel"/>
 #endif
   <key id="key_findNext" key="&findAgainCmd.key;" command="cmd_findNext" modifiers="accel"/>
   <key id="key_findPrev" key="&findPrevCmd.key;" command="cmd_findPrev" modifiers="accel, shift"/>
   <key keycode="&findAgainCmd.key2;" command="cmd_findNext"/>
   <key keycode="&findPrevCmd.key2;"  command="cmd_findPrev" modifiers="shift"/>
