# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1639933882 -3600
# Parent  287cbcba7e9f63a247dd4204c3fff3f8f908571b
Bug 1746749 - Feeds: Implement fallback to HTML if fetching XML fails.

diff --git a/mailnews/extensions/newsblog/Feed.jsm b/mailnews/extensions/newsblog/Feed.jsm
--- a/mailnews/extensions/newsblog/Feed.jsm
+++ b/mailnews/extensions/newsblog/Feed.jsm
@@ -89,16 +89,17 @@ Feed.prototype = {
   resource: null,
   itemsToStore: [],
   itemsStored: 0,
   fileSize: 0,
   mFolder: null,
   mInvalidFeed: false,
   mFeedType: null,
   mLastModified: null,
+  mRetryHTML: false,
 
   get folder() {
     return this.mFolder;
   },
 
   set folder(aFolder) {
     this.mFolder = aFolder;
   },
@@ -143,17 +144,17 @@ Feed.prototype = {
       // Simulate an invalid feed error.
       FeedUtils.log.info("Feed.download: invalid protocol for - " + this.url);
       this.onParseError(this);
       return;
     }
 
     // Before we try to download the feed, make sure we aren't already
     // processing the feed by looking up the url in our feed cache.
-    if (FeedCache.getFeed(this.url)) {
+    if (!this.mRetryHTML && FeedCache.getFeed(this.url)) {
       if (this.downloadCallback) {
         this.downloadCallback.downloaded(this, FeedUtils.kNewsBlogFeedIsBusy);
       }
 
       // Return, the feed is already in use.
       return;
     }
 
@@ -180,17 +181,21 @@ Feed.prototype = {
     // not sent If-Modified-Since, as in the case of an unsubscribe and new
     // subscribe.  Send start of century date to force a download; some servers
     // will 304 on older dates (such as epoch 1970).
     let lastModified = this.lastModified || "Sat, 01 Jan 2000 00:00:00 GMT";
     this.request.setRequestHeader("If-Modified-Since", lastModified);
 
     // Only order what you're going to eat...
     this.request.responseType = "document";
-    this.request.overrideMimeType("text/xml");
+    if (this.mRetryHTML) {
+      this.request.overrideMimeType("text/html");
+    } else {
+      this.request.overrideMimeType("text/xml");
+    }
     this.request.setRequestHeader("Accept", FeedUtils.REQUEST_ACCEPT);
     this.request.timeout = FeedUtils.REQUEST_TIMEOUT;
     this.request.onload = this.onDownloaded;
     this.request.onreadystatechange = this.onReadyStateChange;
     this.request.onerror = this.onDownloadError;
     this.request.ontimeout = this.onDownloadError;
     FeedCache.putFeed(this);
     this.request.send(null);
@@ -440,19 +445,57 @@ Feed.prototype = {
   set link(aNewLink) {
     if (!aNewLink) {
       return;
     }
     FeedUtils.setSubscriptionAttr(this.url, this.server, "link", aNewLink);
   },
 
   parse() {
+    let doc;
+    if (this.mRetryHTML) {
+      this.mRetryHTML = false;
+      let xml = new XMLSerializer().serializeToString(this.request.responseXML);
+      // No idea why links have a closing tag missing.
+      xml = xml.replace(/<link \/>(.*)/g, "<link>$1</link>");
+      // Clean up some things related to CDADA.
+      xml = xml.replace(/<!--\[CDATA\[(.*?)-->/g, "<![CDATA[$1>");
+      xml = xml.replace(/&lt;!\[CDATA\[(.*?)&gt;/g, "<![CDATA[$1>");
+      xml = xml.replace(/\]\]&gt;/g, "]]>");
+      try {
+        doc = new DOMParser().parseFromString(xml, "text/xml");
+      } catch (ex) {
+        FeedUtils.log.error("Feed.parse: HTML to XML conversion error" + xml);
+        this.onParseError(this);
+      }
+      FeedUtils.log.info("Feed.parse: Fallback to HTML successful");
+    } else {
+      doc = this.request.responseXML;
+      let docElem = doc.documentElement;
+      if (docElem.namespaceURI == FeedUtils.MOZ_PARSERERROR_NS) {
+        // Gecko caught a basic parsing error.
+        let errStr =
+          docElem.firstChild.textContent +
+          "\n" +
+          docElem.firstElementChild.textContent;
+        FeedUtils.log.info(
+          "Feed.parse: XML error, trying HTML download: - " + errStr
+        );
+
+        // We asked for text/xml and got back an error, so let's try again
+        // with text/html.
+        this.mRetryHTML = true;
+        this.download(this.parseItems, this.downloadCallback);
+        return;
+      }
+    }
+
     // Create a feed parser which will parse the feed.
     let parser = new FeedParser();
-    this.itemsToStore = parser.parseFeed(this, this.request.responseXML);
+    this.itemsToStore = parser.parseFeed(this, doc);
     parser = null;
 
     if (this.mInvalidFeed) {
       this.request = null;
       this.mInvalidFeed = false;
       return;
     }
 
