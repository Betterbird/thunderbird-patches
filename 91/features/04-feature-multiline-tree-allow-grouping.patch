# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1640909365 -3600
# Parent  b70f6940d9916817f0eedd4f9b9d7733c7d2dd71
Feature: Multi-line tree follow-up: Allow "group by sort" again.

diff --git a/mail/base/content/mailWindowOverlay.js b/mail/base/content/mailWindowOverlay.js
--- a/mail/base/content/mailWindowOverlay.js
+++ b/mail/base/content/mailWindowOverlay.js
@@ -628,17 +628,16 @@ function InitViewSortByMenu() {
   sortUnthreadedMenuItem.setAttribute("checked", !threaded && !grouped);
 
   var groupBySortOrderMenuItem = document.getElementById("groupBySort");
 
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
 
   if (gFolderDisplay.view.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline()) {
-    groupBySortOrderMenuItem.setAttribute("disabled", true);
     sortThreadedMenuItem.setAttribute("disabled", true);
   } else {
     sortThreadedMenuItem.removeAttribute("disabled");
   }
 }
 
 function InitAppViewSortByMenu() {
   let sortType = gFolderDisplay.view.primarySortType;
@@ -723,17 +722,16 @@ function InitAppViewSortByMenu() {
   sortUnthreadedMenuItem.setAttribute("checked", !threaded && !grouped);
 
   let groupBySortOrderMenuItem = document.getElementById("appmenu_groupBySort");
 
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
 
   if (gFolderDisplay.view.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline()) {
-    groupBySortOrderMenuItem.setAttribute("disabled", true);
     sortThreadedMenuItem.setAttribute("disabled", true);
   } else {
     sortThreadedMenuItem.removeAttribute("disabled");
   }
 }
 
 function isSortTypeValidForGrouping(sortType) {
   return Boolean(
diff --git a/mail/base/content/threadPane.js b/mail/base/content/threadPane.js
--- a/mail/base/content/threadPane.js
+++ b/mail/base/content/threadPane.js
@@ -414,16 +414,17 @@ function MsgSortDescending() {
 
 // XXX this should probably migrate into FolderDisplayWidget, or whatever
 //  FolderDisplayWidget ends up using if it refactors column management out.
 function UpdateSortIndicators(sortType, sortOrder) {
   // Remove the sort indicator from all the columns
   var treeColumns = document.getElementById("threadCols").children;
   for (var i = 0; i < treeColumns.length; i++) {
     treeColumns[i].removeAttribute("sortDirection");
+    treeColumns[i].removeAttribute("primary");
   }
 
   // show the twisties if the view is threaded
   var threadCol = document.getElementById("threadCol");
   var subjectCol = document.getElementById("subjectCol");
   var sortedColumn;
   // set the sort indicator on the column we are sorted by
   var colID = ConvertSortTypeToColumnID(sortType);
@@ -432,21 +433,27 @@ function UpdateSortIndicators(sortType, 
   }
 
   var viewWrapper = gFolderDisplay.view;
 
   // the thread column is not visible when we are grouped by sort
   document.getElementById("threadCol").collapsed =
     viewWrapper.showGroupedBySort;
 
-  // show twisties only when grouping or threading
-  if (viewWrapper.showGroupedBySort || viewWrapper.showThreaded) {
-    subjectCol.setAttribute("primary", "true");
+  if (viewWrapper.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline()) {
+    // For multi-line views there is no subject column, so we show
+    // the twisties on the column that we sort by.
+    if (sortedColumn && viewWrapper.showGroupedBySort) {
+      sortedColumn.setAttribute("primary", "true");
+    }
   } else {
-    subjectCol.removeAttribute("primary");
+    // show twisties only when grouping or threading
+    if (viewWrapper.showGroupedBySort || viewWrapper.showThreaded) {
+      subjectCol.setAttribute("primary", "true");
+    }
   }
 
   if (sortedColumn) {
     sortedColumn.setAttribute(
       "sortDirection",
       sortOrder == Ci.nsMsgViewSortOrder.ascending ? "ascending" : "descending"
     );
   }
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -2171,76 +2171,136 @@ nsMsgDBView::GetColspanTextProperties(in
       break;
     }
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::IsMultiline(bool* isMulti) {
+  nsTreeColumn* col;
+  RefPtr<mozilla::dom::Element> el;
+  mozilla::IgnoredErrorResult rv1;
+  RefPtr<nsTreeColumns> cols;
+  if (mTree) cols = mTree->GetColumns();
+
   *isMulti =
       mozilla::Preferences::GetBool("mail.pane_config.multiline_all", false);
   if (*isMulti) {
     mIsMultiline = true;
-    if (mTree) {
-      RefPtr<nsTreeColumns> cols = mTree->GetColumns();
-      if (cols) {
-        nsTreeColumn* col;
-        for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
-          const nsAString& colID = col->GetId();
-          if (colID.EqualsLiteral("subjectCol")) {
-            RefPtr<mozilla::dom::Element> el = col->Element();
-            mozilla::IgnoredErrorResult rv1;
-            el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
-            break;
-          }
+    if (cols) {
+      for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+        const nsAString& colID = col->GetId();
+        if (colID.EqualsLiteral("subjectCol")) {
+          el = col->Element();
+          el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
+          break;
         }
       }
     }
   } else {
     // Whether we are multiline or not depends on the visibility of the Subject
     // column.
     *isMulti = mIsMultiline;
     // This should not happen since the tree is set before calling
     // IsMultiline().
-    if (!mTree) return NS_OK;
-    RefPtr<nsTreeColumns> cols = mTree->GetColumns();
-    if (!cols) return NS_OK;
+    if (!mTree || !cols) return NS_OK;
 
     // There are strange cases where we find no columns here, in this case
     // we use the previous result.
-    nsTreeColumn* col;
     for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
       const nsAString& colID = col->GetId();
       if (colID.EqualsLiteral("subjectCol")) {
-        RefPtr<mozilla::dom::Element> el = col->Element();
+        el = col->Element();
         nsAutoString val;
         el->GetAttribute(u"hidden"_ns, val);
         mIsMultiline = val.EqualsLiteral("true");
         break;
       }
     }
   }
 
   if (mIsMultiline) {
-    // Hide thread column, remove "primary" attribute and switch
-    // threading/grouping off.
-    nsCOMPtr<nsIMsgWindow> msgWindow(do_QueryReferent(mMsgWindowWeak));
-    nsCOMPtr<nsIDocShell> rootShell;
-    nsresult rv = msgWindow->GetRootDocShell(getter_AddRefs(rootShell));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    mozilla::IgnoredErrorResult rv1;
-    RefPtr<mozilla::dom::Element> el =
-        rootShell->GetDocument()->GetElementById(u"threadCol"_ns);
-    if (el) el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
-    el = rootShell->GetDocument()->GetElementById(u"subjectCol"_ns);
-    if (el) el->RemoveAttribute(u"primary"_ns, rv1);
-    m_viewFlags &= ~(nsMsgViewFlagsType::kGroupBySort |
-                     nsMsgViewFlagsType::kThreadedDisplay);
+    // Hide thread column, remove/move primary attribute and switch
+    // threading off.
+    for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+      const nsAString& colID = col->GetId();
+      el = col->Element();
+      if (colID.EqualsLiteral("threadCol")) {
+        el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
+      } else if (colID.EqualsLiteral("subjectCol")) {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+      } else if (m_viewFlags & nsMsgViewFlagsType::kGroupBySort) {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+        // Move the primary attribure onto the sort column.
+        // 14 valid sort types for "group by sort" from
+        // isSortTypeValidForGrouping(). We can't set it on the subjectCol.
+        bool set = false;
+        switch (m_sortType) {
+          case nsMsgViewSortType::byAccount:
+            if (colID.EqualsLiteral("accountCol")) set = true;
+            break;
+          case nsMsgViewSortType::byAttachments:
+            if (colID.EqualsLiteral("attachmentCol")) set = true;
+            break;
+          case nsMsgViewSortType::byAuthor:
+            if (colID.EqualsLiteral("senderCol")) set = true;
+            break;
+          case nsMsgViewSortType::byCorrespondent:
+            if (colID.EqualsLiteral("correspondentCol")) set = true;
+            break;
+          case nsMsgViewSortType::byDate:
+            if (colID.EqualsLiteral("dateCol")) set = true;
+            break;
+          case nsMsgViewSortType::byFlagged:
+            if (colID.EqualsLiteral("flaggedCol")) set = true;
+            break;
+          case nsMsgViewSortType::byLocation:
+            if (colID.EqualsLiteral("locationCol")) set = true;
+            break;
+          case nsMsgViewSortType::byPriority:
+            if (colID.EqualsLiteral("priorityCol")) set = true;
+            break;
+          case nsMsgViewSortType::byReceived:
+            if (colID.EqualsLiteral("receivedCol")) set = true;
+            break;
+          case nsMsgViewSortType::byRecipient:
+            if (colID.EqualsLiteral("recipientCol")) set = true;
+            break;
+          case nsMsgViewSortType::byStatus:
+            if (colID.EqualsLiteral("statusCol")) set = true;
+            break;
+          case nsMsgViewSortType::byTags:
+            if (colID.EqualsLiteral("tagsCol")) set = true;
+            break;
+          case nsMsgViewSortType::byCustom:
+            if (colID.EqualsLiteral("customSortCol")) set = true;
+            break;
+          default:
+            break;
+        }
+        if (set) el->SetAttribute(u"primary"_ns, u"true"_ns, rv1);
+      }
+    }
+    if (!(m_viewFlags & nsMsgViewFlagsType::kGroupBySort)) {
+      // Switch off pure threading.
+      m_viewFlags &= ~nsMsgViewFlagsType::kThreadedDisplay;
+    }
+  } else if (m_viewFlags & nsMsgViewFlagsType::kGroupBySort) {
+    // Put the primary attribute back onto the subject column
+    // and remove it elsewhere.
+    for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+      const nsAString& colID = col->GetId();
+      el = col->Element();
+      if (colID.EqualsLiteral("subjectCol")) {
+        el->SetAttribute(u"primary"_ns, u"true"_ns, rv1);
+      } else {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+      }
+    }
   }
   *isMulti = mIsMultiline;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::AlignWith(int32_t row, nsTreeColumn* col, bool* alignWith) {
   if (!IsValidIndex(row)) {
