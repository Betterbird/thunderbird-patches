# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1631221847 -7200
# Parent  0f9961e8c020ce2b767f677dcfe66c0ba74d3e34
Feature: Use nsIMultilineTreeView.

Based on the work of Paul Rouget in https://bugzilla.mozilla.org/show_bug.cgi?id=441414
and https://bugzilla.mozilla.org/show_bug.cgi?id=213945

diff --git a/mail/base/content/mailWindowOverlay.js b/mail/base/content/mailWindowOverlay.js
--- a/mail/base/content/mailWindowOverlay.js
+++ b/mail/base/content/mailWindowOverlay.js
@@ -616,16 +616,21 @@ function InitViewSortByMenu() {
 
   sortThreadedMenuItem.setAttribute("checked", threaded);
   sortUnthreadedMenuItem.setAttribute("checked", !threaded && !grouped);
 
   var groupBySortOrderMenuItem = document.getElementById("groupBySort");
 
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
+
+  if (gFolderDisplay.view.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline) {
+    groupBySortOrderMenuItem.setAttribute("disabled", true);
+    sortThreadedMenuItem.setAttribute("disabled", true);
+  }
 }
 
 function InitAppViewSortByMenu() {
   let sortType = gFolderDisplay.view.primarySortType;
 
   setSortByMenuItemCheckState(
     "appmenu_sortByDateMenuitem",
     sortType == Ci.nsMsgViewSortType.byDate
@@ -704,16 +709,21 @@ function InitAppViewSortByMenu() {
 
   sortThreadedMenuItem.setAttribute("checked", threaded);
   sortUnthreadedMenuItem.setAttribute("checked", !threaded && !grouped);
 
   let groupBySortOrderMenuItem = document.getElementById("appmenu_groupBySort");
 
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
+
+  if (gFolderDisplay.view.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline) {
+    groupBySortOrderMenuItem.setAttribute("disabled", true);
+    sortThreadedMenuItem.setAttribute("disabled", true);
+  }
 }
 
 function isSortTypeValidForGrouping(sortType) {
   return Boolean(
     sortType == Ci.nsMsgViewSortType.byAccount ||
       sortType == Ci.nsMsgViewSortType.byAttachments ||
       sortType == Ci.nsMsgViewSortType.byAuthor ||
       sortType == Ci.nsMsgViewSortType.byCorrespondent ||
diff --git a/mail/base/content/threadTree.inc.xhtml b/mail/base/content/threadTree.inc.xhtml
--- a/mail/base/content/threadTree.inc.xhtml
+++ b/mail/base/content/threadTree.inc.xhtml
@@ -74,20 +74,23 @@
                                  class="thread-tree-icon-header attachmentColumnHeader"
                                  persist="hidden ordinal sortDirection"
                                  fixed="true"
                                  closemenu="none"
                                  src="chrome://messenger/skin/icons/attachment-col.svg"
                                  label="&attachmentColumn.label;"
                                  tooltiptext="&attachmentColumn2.tooltip;"/>
                         <splitter class="tree-splitter"/>
+                        <!--
+                          subjectCol used to have ignoreincolumnpicker="true".
+                          Switching the subject off will now trigger the multi-line view.
+                        -->
                         <treecol id="subjectCol"
-                                 persist="ordinal width sortDirection"
+                                 persist="hidden ordinal width sortDirection"
                                  flex="7"
-                                 ignoreincolumnpicker="true"
                                  closemenu="none"
                                  label="&subjectColumn.label;"
                                  tooltiptext="&subjectColumn2.tooltip;"/>
                         <splitter class="tree-splitter"/>
                         <treecol is="treecol-image" id="unreadButtonColHeader"
                                  class="thread-tree-icon-header readColumnHeader"
                                  persist="hidden ordinal sortDirection"
                                  fixed="true"
diff --git a/mail/themes/linux/mail/messenger.css b/mail/themes/linux/mail/messenger.css
--- a/mail/themes/linux/mail/messenger.css
+++ b/mail/themes/linux/mail/messenger.css
@@ -439,8 +439,43 @@ treechildren::-moz-tree-row {
 
 :root[uidensity="compact"] treechildren::-moz-tree-row {
   min-height: 1.3rem;
 }
 
 :root[uidensity="touch"] treechildren::-moz-tree-row {
   min-height: 2.4rem;
 }
+
+/* Multiline tree */
+treechildren::-moz-tree-row(multiline) {
+  min-height: 3.2rem;
+}
+treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.6rem;
+}
+treechildren::-moz-tree-cell(multiline) {
+  /* For some reason, both min-height and height are needed on Windows */
+  min-height: 1.6rem;
+  height: 1.6rem;
+}
+
+:root[uidensity="compact"] treechildren::-moz-tree-row(multiline) {
+  min-height: 2.6rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.3rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 1.3rem;
+  height: 1.3rem;
+}
+
+:root[uidensity="touch"] treechildren::-moz-tree-row(multiline) {
+  min-height: 4.8rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 2.4rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 2.4rem;
+  height: 2.4rem;
+}
diff --git a/mail/themes/osx/mail/messenger.css b/mail/themes/osx/mail/messenger.css
--- a/mail/themes/osx/mail/messenger.css
+++ b/mail/themes/osx/mail/messenger.css
@@ -491,8 +491,43 @@ treechildren::-moz-tree-row {
 
 :root[uidensity="compact"] treechildren::-moz-tree-row {
   min-height: 1.6rem;
 }
 
 :root[uidensity="touch"] treechildren::-moz-tree-row {
   min-height: 2.4rem;
 }
+
+/* Multiline tree */
+treechildren::-moz-tree-row(multiline) {
+  min-height: 3.6rem;
+}
+treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.8rem;
+}
+treechildren::-moz-tree-cell(multiline) {
+  /* For some reason, both min-height and height are needed on Windows */
+  min-height: 1.8rem;
+  height: 1.8rem;
+}
+
+:root[uidensity="compact"] treechildren::-moz-tree-row(multiline) {
+  min-height: 3.2rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.6rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 1.6rem;
+  height: 1.6rem;
+}
+
+:root[uidensity="touch"] treechildren::-moz-tree-row(multiline) {
+  min-height: 4.8rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 2.4rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 2.4rem;
+  height: 2.4rem;
+}
diff --git a/mail/themes/shared/mail/mailWindow1.css b/mail/themes/shared/mail/mailWindow1.css
--- a/mail/themes/shared/mail/mailWindow1.css
+++ b/mail/themes/shared/mail/mailWindow1.css
@@ -36,16 +36,27 @@
 treechildren::-moz-tree-cell-text(read) {
   font-weight: normal;
 }
 
 treechildren::-moz-tree-cell-text(unread) {
   font-weight: bold;
 }
 
+treechildren::-moz-tree-cell-text(colspan) {
+  /* Italic is a matter of taste here. It can be removed in userChrome.css */
+  font-style: italic;
+}
+
+treechildren::-moz-tree-row(colspan) {
+  /* The colspan is drawn as a big cell spanning most columns, so remove the cell border */
+  border: none;
+  margin-inline: 0;
+}
+
 :root[lwt-tree-brighttext] treechildren::-moz-tree-cell-text(untagged, unread) {
   color: #fff !important;
 }
 
 /* on a collapsed thread, if the top level message is read, but the thread has
  * unread children, underline the text.  4.x mac did this, very slick
  */
 treechildren::-moz-tree-cell-text(container, closed, hasUnread, read) {
diff --git a/mail/themes/shared/mail/searchDialog.css b/mail/themes/shared/mail/searchDialog.css
--- a/mail/themes/shared/mail/searchDialog.css
+++ b/mail/themes/shared/mail/searchDialog.css
@@ -60,16 +60,27 @@ radio[value="and"] {
 treechildren::-moz-tree-cell-text(read) {
   font-weight: normal;
 }
 
 treechildren::-moz-tree-cell-text(unread) {
   font-weight: bold;
 }
 
+treechildren::-moz-tree-cell-text(colspan) {
+  /* Italic is a matter of taste here. It can be removed in userChrome.css */
+  font-style: italic;
+}
+
+treechildren::-moz-tree-row(colspan) {
+  /* The colspan is drawn as a big cell spanning most columns, so remove the cell border */
+  border: none;
+  margin-inline: 0;
+}
+
 /* on a collapsed thread, if the top level message is read, but the thread has
  * unread children, underline the text.  4.x mac did this, very slick
  */
 treechildren::-moz-tree-cell-text(container, closed, hasUnread, read) {
   text-decoration: underline;
 }
 
 #gray_horizontal_splitter {
diff --git a/mail/themes/windows/mail/messenger.css b/mail/themes/windows/mail/messenger.css
--- a/mail/themes/windows/mail/messenger.css
+++ b/mail/themes/windows/mail/messenger.css
@@ -708,11 +708,46 @@ treechildren::-moz-tree-row {
 :root[uidensity="compact"] treechildren::-moz-tree-row {
   height: 1.6rem;
 }
 
 :root[uidensity="touch"] treechildren::-moz-tree-row {
   height: 2.4rem;
 }
 
+/* Multiline tree */
+treechildren::-moz-tree-row(multiline) {
+  height: 3.6rem;
+}
+treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.8rem;
+}
+treechildren::-moz-tree-cell(multiline) {
+  /* For some reason, both min-height and height are needed on Windows */
+  min-height: 1.8rem;
+  height: 1.8rem;
+}
+
+:root[uidensity="compact"] treechildren::-moz-tree-row(multiline) {
+  height: 3.2rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 1.6rem;
+}
+:root[uidensity="compact"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 1.6rem;
+  height: 1.6rem;
+}
+
+:root[uidensity="touch"] treechildren::-moz-tree-row(multiline) {
+  height: 4.8rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-row(colspan) {
+  margin-top: 2.4rem;
+}
+:root[uidensity="touch"] treechildren::-moz-tree-cell(multiline) {
+  min-height: 2.4rem;
+  height: 2.4rem;
+}
+
 #folderPaneOptionsPopup {
   -moz-window-shadow: none;
 }
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -46,16 +46,19 @@
 #include "mozilla/Services.h"
 #include "mozilla/Attributes.h"
 #include "mozilla/dom/DataTransfer.h"
 #include "mozilla/mailnews/MimeHeaderParser.h"
 #include "nsTArray.h"
 #include "mozilla/intl/OSPreferences.h"
 #include "mozilla/intl/LocaleService.h"
 
+#include "nsIDocShell.h"
+#include "mozilla/dom/Document.h"
+
 using namespace mozilla::mailnews;
 nsrefcnt nsMsgDBView::gInstanceCount = 0;
 
 char16_t* nsMsgDBView::kHighestPriorityString = nullptr;
 char16_t* nsMsgDBView::kHighPriorityString = nullptr;
 char16_t* nsMsgDBView::kLowestPriorityString = nullptr;
 char16_t* nsMsgDBView::kLowPriorityString = nullptr;
 char16_t* nsMsgDBView::kNormalPriorityString = nullptr;
@@ -97,16 +100,17 @@ class viewSortInfo {
 NS_IMPL_ADDREF(nsMsgDBView)
 NS_IMPL_RELEASE(nsMsgDBView)
 
 NS_INTERFACE_MAP_BEGIN(nsMsgDBView)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIMsgDBView)
   NS_INTERFACE_MAP_ENTRY(nsIMsgDBView)
   NS_INTERFACE_MAP_ENTRY(nsIDBChangeListener)
   NS_INTERFACE_MAP_ENTRY(nsITreeView)
+  NS_INTERFACE_MAP_ENTRY(nsIMultilineTreeView)
   NS_INTERFACE_MAP_ENTRY(nsIJunkMailClassificationListener)
 NS_INTERFACE_MAP_END
 
 nsMsgDBView::nsMsgDBView() {
   // Member initializers and constructor code.
   m_sortValid = false;
   m_checkedCustomColumns = false;
   m_sortOrder = nsMsgViewSortOrder::none;
@@ -263,17 +267,17 @@ nsresult nsMsgDBView::AppendKeywordPrope
     *tagAdded = true;
     properties.Append(' ');
     properties.Append(selector);
   }
   return rv;
 }
 
 ///////////////////////////////////////////////////////////////////////////
-// nsITreeView Implementation Methods (and helper methods)
+// nsIMultilineTreeView Implementation Methods (and helper methods)
 ///////////////////////////////////////////////////////////////////////////
 
 static nsresult GetDisplayNameInAddressBook(const nsACString& emailAddress,
                                             nsAString& displayName) {
   nsresult rv;
   nsCOMPtr<nsIAbManager> abManager(
       do_GetService("@mozilla.org/abmanager;1", &rv));
   NS_ENSURE_SUCCESS(rv, rv);
@@ -2020,16 +2024,19 @@ nsMsgDBView::CellTextForColumn(int32_t a
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::SetTree(mozilla::dom::XULTreeElement* tree) {
   mTree = tree;
+  // Don't generally switch this off, there are strange (fake?) trees passing
+  // through here.
+  // mIsMultiline = false;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::ToggleOpenState(int32_t index) {
   uint32_t numChanged;
   nsresult rv = ToggleExpansion(index, &numChanged);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -2123,18 +2130,114 @@ nsMsgDBView::CycleCell(int32_t row, nsTr
     }
     default:
       break;
   }
 
   return NS_OK;
 }
 
+NS_IMETHODIMP
+nsMsgDBView::GetColspanTextProperties(int32_t row, nsAString& props) {
+  nsresult rv;
+
+  nsCOMPtr<nsIMsgDBHdr> msgHdr;
+  rv = GetMsgHdrForViewIndex(row, getter_AddRefs(msgHdr));
+  if (NS_FAILED(rv) || !msgHdr) {
+    ClearHdrCache();
+    return NS_MSG_INVALID_DBVIEW_INDEX;
+  }
+
+  RefPtr<nsTreeColumns> cols = mTree->GetColumns();
+  if (!cols) return NS_OK;
+
+  nsTreeColumn* col;
+  for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+    const nsAString& colID = col->GetId();
+    if (colID.EqualsLiteral("subjectCol")) {
+      rv = GetCellProperties(row, col, props);
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      // For the purpose of icons, this counts as a subject column and is also a
+      // colspan.
+      props.AppendLiteral(" subjectCol colspan");
+
+      break;
+    }
+  }
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsMsgDBView::IsMultiline(bool* isMulti) {
+  // Whether we are multiline or not depends on the visibility of the Subject
+  // column.
+  *isMulti = mIsMultiline;
+  // This should not happen since the tree is set before calling IsMultiline().
+  if (!mTree) return NS_OK;
+  RefPtr<nsTreeColumns> cols = mTree->GetColumns();
+  if (!cols) return NS_OK;
+
+  // There are strange cases where we find no columns here, in this case
+  // we use the previous result.
+  nsTreeColumn* col;
+  for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+    const nsAString& colID = col->GetId();
+    if (colID.EqualsLiteral("subjectCol")) {
+      RefPtr<mozilla::dom::Element> el = col->Element();
+      nsAutoString val;
+      el->GetAttribute(u"hidden"_ns, val);
+      mIsMultiline = val.EqualsLiteral("true");
+      break;
+    }
+  }
+
+  if (mIsMultiline) {
+    // Hide thread column.
+    nsCOMPtr<nsIMsgWindow> msgWindow(do_QueryReferent(mMsgWindowWeak));
+    nsCOMPtr<nsIDocShell> rootShell;
+    nsresult rv = msgWindow->GetRootDocShell(getter_AddRefs(rootShell));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    RefPtr<mozilla::dom::Element> el =
+        rootShell->GetDocument()->GetElementById(u"threadCol"_ns);
+    if (el) {
+      mozilla::IgnoredErrorResult rv1;
+      el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
+    }
+  }
+  *isMulti = mIsMultiline;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsMsgDBView::AlignWith(int32_t row, nsTreeColumn* col, bool* alignWith) {
+  if (!IsValidIndex(row)) {
+    return NS_MSG_INVALID_DBVIEW_INDEX;
+  }
+
+  *alignWith = false;
+  const nsAString& colID = col->GetId();
+  if (colID.EqualsLiteral("senderCol") || colID.EqualsLiteral("recipientCol") ||
+      colID.EqualsLiteral("correspondentCol") ||
+      colID.EqualsLiteral("dateCol") || colID.EqualsLiteral("receivedCol"))
+    *alignWith = true;
+
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsMsgDBView::IsColspanCol(nsTreeColumn* col, bool* isImageCol) {
+  const nsAString& colID = col->GetId();
+  *isImageCol = colID.EqualsLiteral("subjectCol") ? true : false;
+  return NS_OK;
+}
+
 ///////////////////////////////////////////////////////////////////////////
-// end nsITreeView Implementation Methods
+// end nsIMultilineTreeView Implementation Methods
 ///////////////////////////////////////////////////////////////////////////
 
 NS_IMETHODIMP
 nsMsgDBView::Open(nsIMsgFolder* folder, nsMsgViewSortTypeValue sortType,
                   nsMsgViewSortOrderValue sortOrder,
                   nsMsgViewFlagsTypeValue viewFlags, int32_t* pCount) {
   m_viewFlags = viewFlags;
   m_sortOrder = sortOrder;
@@ -2279,16 +2382,17 @@ nsMsgDBView::OpenWithHdrs(nsIMsgEnumerat
 }
 
 NS_IMETHODIMP
 nsMsgDBView::Init(nsIMessenger* aMessengerInstance, nsIMsgWindow* aMsgWindow,
                   nsIMsgDBViewCommandUpdater* aCmdUpdater) {
   mMessengerWeak = do_GetWeakReference(aMessengerInstance);
   mMsgWindowWeak = do_GetWeakReference(aMsgWindow);
   mCommandUpdater = aCmdUpdater;
+  mIsMultiline = false;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::SetSuppressCommandUpdating(bool aSuppressCommandUpdating) {
   mSuppressCommandUpdating = aSuppressCommandUpdating;
   return NS_OK;
 }
diff --git a/mailnews/base/src/nsMsgDBView.h b/mailnews/base/src/nsMsgDBView.h
--- a/mailnews/base/src/nsMsgDBView.h
+++ b/mailnews/base/src/nsMsgDBView.h
@@ -90,25 +90,26 @@ struct IdUint32 {
 struct IdKey : public IdUint32 {
   nsTArray<uint8_t> key;
 };
 
 // This is an abstract implementation class.
 // The actual view objects will be instances of sub-classes of this class.
 class nsMsgDBView : public nsIMsgDBView,
                     public nsIDBChangeListener,
-                    public nsITreeView,
+                    public nsIMultilineTreeView,
                     public nsIJunkMailClassificationListener {
  public:
   nsMsgDBView();
 
   NS_DECL_ISUPPORTS
   NS_DECL_NSIMSGDBVIEW
   NS_DECL_NSIDBCHANGELISTENER
   NS_DECL_NSITREEVIEW
+  NS_DECL_NSIMULTILINETREEVIEW
   NS_DECL_NSIJUNKMAILCLASSIFICATIONLISTENER
 
   nsMsgViewIndex GetInsertIndexHelper(nsIMsgDBHdr* msgHdr,
                                       nsTArray<nsMsgKey>& keys,
                                       nsCOMArray<nsIMsgFolder>* folders,
                                       nsMsgViewSortOrderValue sortOrder,
                                       nsMsgViewSortTypeValue sortType);
   int32_t SecondaryCompare(nsMsgKey key1, nsIMsgFolder* folder1, nsMsgKey key2,
@@ -131,16 +132,17 @@ class nsMsgDBView : public nsIMsgDBView,
   static char16_t* kForwardedString;
   static char16_t* kRedirectedString;
   static char16_t* kNewString;
 
   RefPtr<mozilla::dom::XULTreeElement> mTree;
   nsCOMPtr<nsITreeSelection> mTreeSelection;
   // We cache this to determine when to push command status notifications.
   uint32_t mNumSelectedRows;
+  bool mIsMultiline;
   // Set when the message pane is collapsed.
   bool mSuppressMsgDisplay;
   bool mSuppressCommandUpdating;
   // Set when we're telling the outline a row is being removed. Used to
   // suppress msg loading during delete/move operations.
   bool mRemovingRow;
   bool mCommandsNeedDisablingBecauseOfSelection;
   bool mSuppressChangeNotification;
