# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1641576006 -3600
# Parent  aafe52325572e5b9efe34b0ae4494906647d37f7
Misc: Add update check and fix release notes link.
* * *
Misc: Startup update check.
* * *
Misc: Add more logging to update check.
* * *
Misc: CSS tweak so download link aligns correctly.

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -71,17 +71,17 @@ pref("app.update.service.enabled", true)
 #endif
 
 #ifdef XP_WIN
 // This pref prevents BITS from being used by Thunderbird to download updates.
 pref("app.update.BITS.enabled", false);
 #endif
 
 // Release notes URL
-pref("app.releaseNotesURL", "https://live.thunderbird.net/%APP%/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
+pref("app.releaseNotesURL", "https://www.betterbird.eu/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
 
 // URL for "Learn More" for DataCollection
 pref("toolkit.datacollection.infoURL",
      "https://www.mozilla.org/thunderbird/legal/privacy/#telemetry");
 
 // URL for "Learn More" for Crash Reporter.
 pref("toolkit.crashreporter.infoURL",
      "https://www.mozilla.org/thunderbird/legal/privacy/#crash-reporter");
diff --git a/mail/base/content/aboutDialog.css b/mail/base/content/aboutDialog.css
--- a/mail/base/content/aboutDialog.css
+++ b/mail/base/content/aboutDialog.css
@@ -127,8 +127,16 @@
   color: var(--link-color);
 }
 
 #currentChannel {
   margin: 0;
   padding: 0;
   font-weight: bold;
 }
+
+#noUpdatesFound label {
+  margin-inline-start: 0;
+}
+#manualUpdate label {
+  margin-inline: 0 0.3em;
+  margin-block: 1px 2px;  /* align with link */
+}
diff --git a/mail/base/content/aboutDialog.js b/mail/base/content/aboutDialog.js
--- a/mail/base/content/aboutDialog.js
+++ b/mail/base/content/aboutDialog.js
@@ -7,17 +7,17 @@
 "use strict";
 
 // Services = object with smart getters for common XPCOM services
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 var { AppConstants } = ChromeUtils.import(
   "resource://gre/modules/AppConstants.jsm"
 );
 
-function init(aEvent) {
+async function init(aEvent) {
   if (aEvent.target != document) {
     return;
   }
 
   var distroId = Services.prefs.getCharPref("distribution.id", "");
   if (distroId) {
     var distroAbout = Services.prefs.getStringPref("distribution.about", "");
     // If there is about text, we always show it.
@@ -86,26 +86,79 @@ function init(aEvent) {
   if (AppConstants.MOZ_UPDATER) {
     gAppUpdater = new appUpdater({ buttonAutoFocus: true });
 
     let defaults = Services.prefs.getDefaultBranch("");
     let channelLabel = document.getElementById("currentChannel");
     channelLabel.value = defaults.getCharPref("app.update.channel");
   }
 
+  await BetterbirdUpdateCheck(window);
+
   window.sizeToContent();
 
   if (AppConstants.platform == "macosx") {
     window.moveTo(
       screen.availWidth / 2 - window.outerWidth / 2,
       screen.availHeight / 5
     );
   }
 }
 
+async function BetterbirdUpdateCheck(win) {
+  let needsUpdate = "arguments" in win && win.arguments[0].needsUpdate;
+  if (!needsUpdate) {
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        return;
+      }
+      let content = await response.text();
+      let lines = content.split("\n");
+      let version = Services.appinfo.version;
+      let buildID = Services.appinfo.appBuildID;
+      let os = Services.appinfo.OS
+      for (let l of lines) {
+        let parts = l.split(",");
+        // Format is os,version,buildid.
+        if (version.startsWith(parts[1]) && os == parts[0]) {
+          if (parts[2] > buildID) {
+            needsUpdate = true;
+            console.info(
+              `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+            );
+          } else {
+            console.info(
+              `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+            );
+          }
+          break;
+        }
+      }
+    } catch (ex) {}
+  }
+
+  if (needsUpdate) {
+    let el = document.getElementById("manualUpdate");
+    el.hidden = false;
+    el = document.getElementById("manualLink");
+    el.setAttribute(
+      "onclick",
+      'openLink("https://www.betterbird.eu/downloads/");'
+    );
+  } else {
+    // Up to date.
+    let el = document.getElementById("noUpdatesFound");
+    el.hidden = false;
+  }
+}
+
 // This function is used to open about: tabs. The caller should ensure the url
 // is only an about: url.
 function openAboutTab(url) {
   // Check existing windows
   let mailWindow = Services.wm.getMostRecentWindow("mail:3pane");
   if (mailWindow) {
     mailWindow.focus();
     mailWindow.document
diff --git a/mail/base/content/aboutDialog.xhtml b/mail/base/content/aboutDialog.xhtml
--- a/mail/base/content/aboutDialog.xhtml
+++ b/mail/base/content/aboutDialog.xhtml
@@ -48,16 +48,24 @@
           <label is="text-link" id="releasenotes" hidden="true">&releaseNotes.link;</label>
         </hbox>
 
         <label id="distribution" class="text-blurb"/>
         <label id="distributionId" class="text-blurb"/>
 
         <vbox id="detailsBox">
           <vbox id="updateBox">
+#ifdef BETTERBIRD
+          <hbox id="noUpdatesFound" align="center" hidden="true">
+            <label>&update.noUpdatesFound;</label>
+          </hbox>
+          <hbox id="manualUpdate" align="center" hidden="true">
+            <label>&update.manual.start;</label><label is="text-link" id="manualLink">&update.manual.linkText;</label><label>&update.manual.end;</label>
+          </hbox>
+#endif
 #ifdef MOZ_UPDATER
             <stack id="updateDeck" orient="vertical">
               <hbox id="checkForUpdates" align="center">
                 <button id="checkForUpdatesButton" align="start"
                         label="&update.checkForUpdatesButton.label;"
                         accesskey="&update.checkForUpdatesButton.accesskey;"
                         oncommand="gAppUpdater.checkForUpdates();"/>
                 <spacer flex="1"/>
diff --git a/mail/components/MailGlue.jsm b/mail/components/MailGlue.jsm
--- a/mail/components/MailGlue.jsm
+++ b/mail/components/MailGlue.jsm
@@ -542,26 +542,32 @@ MailGlue.prototype = {
    * _scheduleBestEffortUserIdleTasks.
    * Don't be fooled by thinking that the use of the timeout parameter
    * will delay your function: it will just ensure that it potentially
    * happens _earlier_ than expected (when the timeout limit has been reached),
    * but it will not make it happen later (and out of order) compared
    * to the other ones scheduled together.
    */
   _scheduleStartupIdleTasks() {
+    let self = this;
     const idleTasks = [
       {
         task() {
           // This module needs to be loaded so it registers to receive
           // FormAutoComplete:GetSelectedIndex messages and respond
           // appropriately, otherwise we get error messages like the one
           // reported in bug 1635422.
           ChromeUtils.import("resource://gre/actors/AutoCompleteParent.jsm");
         },
       },
+      {
+        task() {
+          self.BetterbirdUpdateCheck();
+        },
+      },
       // WebDriver components (Remote Agent and Marionette) need to be
       // initialized as very last step.
       {
         condition: AppConstants.ENABLE_WEBDRIVER,
         task: () => {
           // Use idleDispatch a second time to run this after the per-window
           // idle tasks.
           ChromeUtils.idleDispatch(() => {
@@ -664,11 +670,80 @@ MailGlue.prototype = {
         "_blank",
         "chrome,dialog=no,all",
         { type: "contentTab", tabParams }
       );
       linkHandled.data = true;
     }
   },
 
+  async BetterbirdUpdateCheck() {
+    let lastCheckTime = Services.prefs.getIntPref(
+      "betterbird.update.lastCheckTime",
+      0
+    );
+    let now = Math.round(Date.now() / 1000);
+    // We check once a week. 604800 = 7 * 24 * 60 * 60.
+    if (now - lastCheckTime < 604800) {
+      console.info(
+        `Betterbird skipping update check, last done ${new Date(lastCheckTime * 1000).toLocaleString()}`
+      );
+      return;
+    }
+    Services.prefs.setIntPref("betterbird.update.lastCheckTime", now);
+    let needsUpdate = false;
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        return;
+      }
+      let content = await response.text();
+      let lines = content.split("\n");
+      let version = Services.appinfo.version;
+      let buildID = Services.appinfo.appBuildID;
+      let os = Services.appinfo.OS
+      for (let l of lines) {
+        let parts = l.split(",");
+        // Format is os,version,buildid.
+        if (version.startsWith(parts[1]) && os == parts[0]) {
+          if (parts[2] > buildID) {
+            needsUpdate = true;
+            console.info(
+              `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+            );
+          } else {
+            console.info(
+              `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+            );
+          }
+          break;
+        }
+      }
+    } catch (ex) {}
+    if (!needsUpdate) {
+      return;
+    }
+    let win = Services.wm.getMostRecentWindow("mail:3pane");
+    if (!win) {
+      return;
+    }
+    let features = "chrome,";
+    if (AppConstants.platform == "win") {
+      features += "centerscreen,dependent";
+    } else if (AppConstants.platform == "macosx") {
+      features += "resizable=no,minimizable=no";
+    } else {
+      features += "centerscreen,dependent,dialog=no";
+    }
+    win.openDialog(
+      "chrome://messenger/content/aboutDialog.xhtml",
+      "",
+      features,
+      { needsUpdate }
+    );
+  },
+
   // for XPCOM
   QueryInterface: ChromeUtils.generateQI(["nsIObserver"]),
 };
