# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1626979775 -7200
# Parent  84a4f7ffb4bd5c258f6b0b4440e1d0d4d113228d
Bug 1721574 - Allow moving accounts after local folders.

diff --git a/mailnews/base/src/nsMsgAccountManager.cpp b/mailnews/base/src/nsMsgAccountManager.cpp
--- a/mailnews/base/src/nsMsgAccountManager.cpp
+++ b/mailnews/base/src/nsMsgAccountManager.cpp
@@ -1065,18 +1065,18 @@ nsresult nsMsgAccountManager::LoadAccoun
     rv = m_prefs->GetCharPref(serverKeyPref.get(), serverKey);
     if (NS_FAILED(rv)) continue;
 
     nsCOMPtr<nsIMsgAccount> serverAccount;
     findAccountByServerKey(serverKey, getter_AddRefs(serverAccount));
     // If we have an existing account with the same server, ignore this account
     if (serverAccount) continue;
 
-    if (NS_FAILED(
-            createKeyedAccount(accountsArray[i], getter_AddRefs(account))) ||
+    if (NS_FAILED(createKeyedAccount(accountsArray[i], getter_AddRefs(account),
+                                     false)) ||
         !account) {
       NS_WARNING("unexpected entry in account list; prefs corrupt?");
       continue;
     }
 
     // See nsIMsgAccount.idl for a description of the secondsToLeaveUnavailable
     //  and timeFoundUnavailable preferences
     nsAutoCString toLeavePref(PREF_MAIL_SERVER_PREFIX);
@@ -1529,17 +1529,18 @@ NS_IMETHODIMP
 nsMsgAccountManager::WriteToFolderCache(nsIMsgFolderCache* folderCache) {
   for (auto iter = m_incomingServers.Iter(); !iter.Done(); iter.Next()) {
     iter.Data()->WriteToFolderCache(folderCache);
   }
   return folderCache ? folderCache->Close() : NS_ERROR_FAILURE;
 }
 
 nsresult nsMsgAccountManager::createKeyedAccount(const nsCString& key,
-                                                 nsIMsgAccount** aAccount) {
+                                                 nsIMsgAccount** aAccount,
+                                                 bool addBeforeLocalFolders) {
   nsresult rv;
   nsCOMPtr<nsIMsgAccount> account = do_CreateInstance(kMsgAccountCID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
 
   account->SetKey(key);
 
   nsCString localFoldersAccountKey;
   nsCOMPtr<nsIMsgIncomingServer> localFoldersServer;
@@ -1565,17 +1566,19 @@ nsresult nsMsgAccountManager::createKeye
       rv = server->GetType(accountType);
       if (NS_SUCCEEDED(rv) && !accountType.EqualsLiteral("im")) {
         m_accounts[index]->GetKey(lastFolderAccountKey);
         break;
       }
     }
   }
 
-  if (!localFoldersAccountKey.IsEmpty() && !lastFolderAccountKey.IsEmpty() &&
+  // Insert a new account before "local folders" if "local folders" was last.
+  if (addBeforeLocalFolders && !localFoldersAccountKey.IsEmpty() &&
+      !lastFolderAccountKey.IsEmpty() &&
       lastFolderAccountKey == localFoldersAccountKey) {
     m_accounts.InsertElementAt(m_accounts.Length() - 1, account);
   } else {
     m_accounts.AppendElement(account);
   }
 
   nsCString newAccountKeyList;
   nsCString accountKey;
@@ -1593,17 +1596,17 @@ nsresult nsMsgAccountManager::createKeye
 
 NS_IMETHODIMP
 nsMsgAccountManager::CreateAccount(nsIMsgAccount** _retval) {
   NS_ENSURE_ARG_POINTER(_retval);
 
   nsAutoCString key;
   GetUniqueAccountKey(key);
 
-  return createKeyedAccount(key, _retval);
+  return createKeyedAccount(key, _retval, true);
 }
 
 NS_IMETHODIMP
 nsMsgAccountManager::GetAccount(const nsACString& aKey,
                                 nsIMsgAccount** aAccount) {
   NS_ENSURE_ARG_POINTER(aAccount);
   *aAccount = nullptr;
 
diff --git a/mailnews/base/src/nsMsgAccountManager.h b/mailnews/base/src/nsMsgAccountManager.h
--- a/mailnews/base/src/nsMsgAccountManager.h
+++ b/mailnews/base/src/nsMsgAccountManager.h
@@ -122,17 +122,18 @@ class nsMsgAccountManager : public nsIMs
                           const nsACString& username, const int32_t port,
                           const nsACString& type);
 
   // Cache the results of the last call to FolderUriFromDirInProfile
   nsCOMPtr<nsIFile> m_lastPathLookedUp;
   nsCString m_lastFolderURIForPath;
 
   /* internal creation routines - updates m_identities and m_incomingServers */
-  nsresult createKeyedAccount(const nsCString& key, nsIMsgAccount** _retval);
+  nsresult createKeyedAccount(const nsCString& key, nsIMsgAccount** _retval,
+                              bool addBeforeLocalFolders);
   nsresult createKeyedServer(const nsACString& key, const nsACString& username,
                              const nsACString& password, const nsACString& type,
                              nsIMsgIncomingServer** _retval);
 
   nsresult createKeyedIdentity(const nsACString& key, nsIMsgIdentity** _retval);
 
   nsresult GetLocalFoldersPrettyName(nsString& localFoldersName);
 
