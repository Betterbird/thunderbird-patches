diff --git a/mailnews/compose/src/nsMsgSendLater.h b/mailnews/compose/src/nsMsgSendLater.h
--- a/mailnews/compose/src/nsMsgSendLater.h
+++ b/mailnews/compose/src/nsMsgSendLater.h
@@ -133,6 +133,7 @@
   char* mIdentityKey;
   char* mAccountKey;
 
+  bool mJsSendModule;
   bool mSendingMessages;
   bool mUserInitiated;
   nsCOMPtr<nsIMsgIdentity> mIdentity;
diff --git a/mailnews/compose/src/nsMsgSendLater.cpp b/mailnews/compose/src/nsMsgSendLater.cpp
--- a/mailnews/compose/src/nsMsgSendLater.cpp
+++ b/mailnews/compose/src/nsMsgSendLater.cpp
@@ -41,6 +41,7 @@
                   nsIUrlListener, nsIMsgShutdownTask)
 
 nsMsgSendLater::nsMsgSendLater() {
+  mJsSendModule = false;
   mSendingMessages = false;
   mTimerSet = false;
   mTotalSentSuccessfully = 0;
@@ -84,6 +85,8 @@
   nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  prefs->GetBoolPref("mailnews.send.jsmodule", &mJsSendModule);
+
   bool sendInBackground;
   rv = prefs->GetBoolPref("mailnews.sendInBackground", &sendInBackground);
   // If we're not sending in the background, don't do anything else
@@ -852,6 +855,8 @@
       case 'b':
         if (!PL_strncasecmp("BCC", buf, end - buf)) {
           header = &m_bcc;
+          // MessageSend.jsm ensures bcc header is not sent.
+          prune_p = !mJsSendModule;
         }
         break;
       case 'C':
diff --git a/mailnews/compose/test/unit/test_attachment.js b/mailnews/compose/test/unit/test_attachment.js
--- a/mailnews/compose/test/unit/test_attachment.js
+++ b/mailnews/compose/test/unit/test_attachment.js
@@ -163,9 +163,5 @@
     mailTestUtils.firstMsgHdr(gDraftFolder)
   );
   // If only the first few chars are used, encoding will be incorrectly 7bit.
-  Assert.ok(
-    msgData.includes(
-      'Content-Disposition: attachment; filename="binary-after-plain.txt"\r\nContent-Transfer-Encoding: base64\r\n'
-    )
-  );
+  Assert.ok(msgData.includes("Content-Transfer-Encoding: base64\r\n"));
 });
diff --git a/mailnews/compose/test/unit/test_bcc.js b/mailnews/compose/test/unit/test_bcc.js
--- a/mailnews/compose/test/unit/test_bcc.js
+++ b/mailnews/compose/test/unit/test_bcc.js
@@ -14,6 +14,17 @@
 var gServer;
 var gSentFolder;
 
+function cleanUpSent() {
+  gSentFolder.deleteMessages(
+    [...gSentFolder.msgDatabase.EnumerateMessages()],
+    null,
+    true,
+    false,
+    null,
+    false
+  );
+}
+
 /**
  * Load local mail account and start fake SMTP server.
  */
@@ -159,6 +170,7 @@
 
 add_task(async function testBccWithSendLater() {
   gServer.resetTest();
+  cleanUpSent();
   let identity = getSmtpIdentity(
     "from@tinderbox.invalid",
     getBasicSmtpServer(gServer.port)
@@ -171,7 +183,7 @@
     "@mozilla.org/messengercompose/composefields;1"
   ].createInstance(Ci.nsIMsgCompFields);
   fields.to = "Nobody <to@tinderbox.invalid>";
-  fields.subject = "Test bcc";
+  fields.subject = "Test bcc with send later";
   fields.bcc = "bcc@tinderbox.invalid";
   fields.body = "A\r\nBcc: \r\n mail body\r\n.";
 
@@ -213,7 +225,7 @@
       // Should not contain extra \r\n between head and body.
       let notExpectedBody = `\r\n\r\n\r\n${fields.body}`;
 
-      Assert.ok(gServer._daemon.post.includes("Subject: Test bcc"));
+      Assert.ok(gServer._daemon.post.includes(`Subject: ${fields.subject}`));
       // Check that bcc header doesn't exist in the sent mail.
       Assert.ok(!gServer._daemon.post.includes("Bcc: bcc@tinderbox.invalid"));
       Assert.ok(gServer._daemon.post.includes(expectedBody));
@@ -223,7 +235,7 @@
         gSentFolder,
         mailTestUtils.getMsgHdrN(gSentFolder, 0)
       );
-      Assert.ok(msgData.includes("Subject: Test bcc"));
+      Assert.ok(msgData.includes(`Subject: ${fields.subject}`));
       // Check that bcc header exists in the mail copy.
       Assert.ok(msgData.includes("Bcc: bcc@tinderbox.invalid"));
       Assert.ok(msgData.includes(fields.body));

