# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1729188809 -7200
# Parent  0530bdd726cb2ab55dcdcf4ab7f69b9f0483d960
Backout TB's fix for bug 1837247 since it breaks opening attachments, see bug 1924637/1924856.

diff --git a/mail/extensions/openpgp/content/modules/mimeDecrypt.sys.mjs b/mail/extensions/openpgp/content/modules/mimeDecrypt.sys.mjs
--- a/mail/extensions/openpgp/content/modules/mimeDecrypt.sys.mjs
+++ b/mail/extensions/openpgp/content/modules/mimeDecrypt.sys.mjs
@@ -150,9 +150,8 @@ MimeDecryptHandler.prototype = {
       mimeSvc.mailChannel?.openpgpSink.ignoreStatusFrom("1");
     }
 
     this.uri = mimeSvc.messageURI;
-    this.outputRaw = this.uri && /[&?]outputformat=raw/.test(this.uri.spec);
 
     this.pipe = null;
     this.closePipe = false;
     this.exitCode = null;
@@ -234,13 +233,8 @@ MimeDecryptHandler.prototype = {
 
     if (count > 0) {
       var data = this.inStream.read(count);
 
-      if (this.outputRaw) {
-        this.cacheData(data);
-        return;
-      }
-
       if (this.mimePartCount == 0 && this.dataIsBase64 === null) {
         // try to determine if this could be a base64 encoded message part
         this.dataIsBase64 = this.isBase64Encoding(data);
       }
@@ -339,18 +333,13 @@ MimeDecryptHandler.prototype = {
     if (!this.initOk) {
       return;
     }
 
-    const mimeSvc = request.QueryInterface(Ci.nsIPgpMimeProxy);
-    if (this.outputRaw) {
-      this.returnData(mimeSvc, this.outQueue);
-      return;
-    }
-
     if (this.dataIsBase64) {
       this.processBase64Message();
     }
 
+    const mimeSvc = request.QueryInterface(Ci.nsIPgpMimeProxy);
     this.msgUriSpec = lazy.EnigmailVerify.lastMsgUri;
 
     const href = Services.wm.getMostRecentWindow(null)?.document?.location.href;
 
diff --git a/mail/modules/AttachmentInfo.sys.mjs b/mail/modules/AttachmentInfo.sys.mjs
--- a/mail/modules/AttachmentInfo.sys.mjs
+++ b/mail/modules/AttachmentInfo.sys.mjs
@@ -198,11 +198,9 @@ export class AttachmentInfo {
       // Just use the old method for handling messages, it works.
 
       let { name, url } = this;
 
-      url += url.includes("?") ? "&outputformat=raw" : "?outputformat=raw";
       const sourceURI = Services.io.newURI(url);
-
       async function saveToFile(path, isTmp = false) {
         const buffer = await new Promise((resolve, reject) => {
           lazy.NetUtil.asyncFetch(
             {
