# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1747678132 -7200
# Node ID a9e5cb44e92ed60e665dbf340f1bcc797ca8671c
# Parent  273211d02af71e219538f937abe4de4f6143d37c
Bug 1966256 - Block only remote UNC mailbox access outside the profile. r=BenC

Allow UNC paths, but if remote, and not under the user profile, don't. So check for dot (domain, or ipv4), ":" (ipv6) or % (somehing escaped...)
If host is listed in `mail.allowed_unc_hosts` - allow.

Differential Revision: https://phabricator.services.mozilla.com/D249538

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -607,8 +607,11 @@ pref("toolbar.customization.usesheet", t
 #else
 pref("toolbar.customization.usesheet", false);
 #endif
 
+// Comma separated list of allowed hostnames to have the account data at.
+pref("mail.allowed_unc_hosts", "");
+
 // Comma separated list of allowed hostnames detached attachments can
 // be located at.
 pref("mail.allowed_attachment_hostnames", "");
 
diff --git a/mailnews/local/src/nsMailboxProtocol.cpp b/mailnews/local/src/nsMailboxProtocol.cpp
--- a/mailnews/local/src/nsMailboxProtocol.cpp
+++ b/mailnews/local/src/nsMailboxProtocol.cpp
@@ -14,8 +14,9 @@
 #include "nsIMsgFolder.h"
 #include "nsICopyMessageStreamListener.h"
 #include "prtime.h"
 #include "mozilla/Logging.h"
+#include "mozilla/Preferences.h"
 #include "prerror.h"
 #include "prprf.h"
 #include "nspr.h"
 #include "nsIStreamTransportService.h"
@@ -24,8 +25,11 @@
 #include "nsMsgUtils.h"
 #include "nsIMsgWindow.h"
 #include "nsStreamUtils.h"
 
+#include "nsIScriptError.h"
+#include "nsPrintfCString.h"
+
 using namespace mozilla;
 
 static LazyLogModule MAILBOX("Mailbox");
 
@@ -49,19 +53,87 @@ nsMailboxProtocol::nsMailboxProtocol(nsI
 nsMailboxProtocol::~nsMailboxProtocol() {}
 
 nsresult nsMailboxProtocol::Initialize(nsIURI* aURL) {
   NS_ASSERTION(aURL, "invalid URL passed into MAILBOX Protocol");
+
   nsresult rv = NS_OK;
   if (aURL) {
+    // We want to prevent mailbox URLs using UNC paths to access
+    // access arbitrary remote servers. But we don't want to disallow the
+    // case where a user's profile is on a shared drive on the LAN.
+    //
+    // Note that individual accounts can have their storage pointed
+    // to places outside the profile.
+    //
+    // UNC names are of the form:
+    //   \\host-name\share-name\object-name
+    // We'll disallow access to any host-name which looks like a FQDN,
+    // unless it is listed as an exception in `allowed_unc_hosts`.
+    //
+    // So:
+    //  "\\profileserver\bob\mail\Inbox"   -> OK
+    //  "\\steal-your-stuff.com\bob\mail/Inbox"  -> NO!
+    //            unless "steal-your-stuff.com" is in `mail.allowed_unc_hosts`.
+
     m_runningUrl = do_QueryInterface(aURL, &rv);
     nsCString filePath;
     rv = aURL->GetFilePath(filePath);
     NS_ENSURE_SUCCESS(rv, rv);
-    if (filePath.Length() >= 2 &&
-        (filePath.CharAt(1) == '/' || filePath.CharAt(1) == '%' ||
-         filePath.CharAt(1) == '\\')) {
-      // Disallow UNC mailbox:// access.
-      return NS_ERROR_UNEXPECTED;
+    NS_UnescapeURL(filePath);
+    filePath.ReplaceChar('\\', '/');
+    if (filePath.Length() >= 2 && filePath.CharAt(1) == '/') {
+      // We have an UNC path - file:////
+      // file:// +  path of which first may be / (linux root) - ok.
+      // If second is also / we have an UNC path.
+
+      int32_t dashPos = filePath.FindChar('/', 2);
+      if (dashPos <= 0) {
+        NS_WARNING(nsPrintfCString("Bad mailbox: %s", filePath.get()).get());
+        return NS_ERROR_FILE_UNRECOGNIZED_PATH;
+      }
+
+      nsCOMPtr<nsIFile> profD;
+      rv = NS_GetSpecialDirectory("ProfD", getter_AddRefs(profD));
+      NS_ENSURE_SUCCESS(rv, rv);
+      nsCOMPtr<nsIURI> profileFileURI;
+      nsresult rv = NS_NewFileURI(getter_AddRefs(profileFileURI), profD);
+      NS_ENSURE_SUCCESS(rv, rv);
+      nsCString profileSpec = profileFileURI->GetSpecOrDefault();
+      profileSpec.Replace(0, 5, "mailbox:"_ns);  // file: -> mailbox:
+      // If under the profile, allow it.
+      if (!StringBeginsWith(aURL->GetSpecOrDefault(), profileSpec)) {
+        // It's not a path under the profile. See if we still can allow it.
+        nsCString uncPath(StringHead(filePath, dashPos));  // -> //example.com
+
+        nsCString uncHosts;
+        Preferences::GetCString("mail.allowed_unc_hosts", uncHosts);
+        nsTArray<nsCString> hosts;
+        ParseString(uncHosts, ',', hosts);
+        bool allowed = false;
+        for (auto host : hosts) {
+          if (StringEndsWith(uncPath, "/"_ns + host)) {
+            allowed = true;
+            break;
+          }
+        }
+
+        if (!allowed) {
+          // Not explicitely allowd.
+          // Then check if FQDN or IPv4/v6 and deny if it is.
+          if (uncPath.FindChar('.') != -1 || uncPath.FindChar(':') != -1) {
+            // Disallow remote UNC mailbox:// access.
+            nsPrintfCString blocked("Blocking UNC mailbox at %s.",
+                                    uncPath.get());
+            NS_WARNING(blocked.get());
+            blocked.Append(
+                " To allow, add the hostname to mail.allowed_unc_hosts."_ns);
+            MsgLogToConsole4(NS_ConvertUTF8toUTF16(blocked),
+                             NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                             nsIScriptError::warningFlag);
+            return NS_ERROR_FILE_UNRECOGNIZED_PATH;
+          }
+        }
+      }
     }
     if (NS_SUCCEEDED(rv) && m_runningUrl) {
       nsCOMPtr<nsIMsgWindow> window;
       rv = m_runningUrl->GetMailboxAction(&m_mailboxAction);
