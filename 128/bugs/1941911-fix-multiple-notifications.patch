# HG changeset patch
# User Geoff Lankow <geoff@darktrojan.net>
# Date 1737037789 -3600
# Node ID 578b25792b7f311033aba88ff86d19b838687521
# Parent  ef00fd6ce238f84c17f3c593087f0a6dc391a2aa
Bug 1941911 - Simplify new mail notification dispatcher. r=mkmelin

We no longer support Windows 7, which is the only platform that needed to fall back to the custom
notification when there was no system notification. So I've removed the fall back code, which means
we only use the custom notification if the preferences say so.

This makes it easier to fix the notification time recording when using the custom notification.
Previously the time was recorded when the mail arrived but it should be when the notification
actually happened. Custom notifications get queued when more than one folder gets new mail. It's
these queued folders that had the problem.

Differential Revision: https://phabricator.services.mozilla.com/D234446

diff --git a/mail/test/browser/notification/browser_notification.js b/mail/test/browser/notification/browser_notification.js
--- a/mail/test/browser/notification/browser_notification.js
+++ b/mail/test/browser/notification/browser_notification.js
@@ -35,9 +35,8 @@ var gTotalOpenTime;
 var gMsgMinutes = 9000;
 
 // We'll use this mock alerts service to capture notification events
 var gMockAlertsService = {
-  _doFail: false,
   _doClick: false,
 
   QueryInterface: ChromeUtils.generateQI(["nsIAlertsService"]),
 
@@ -53,14 +52,8 @@ var gMockAlertsService = {
 
   showAlert(alertInfo, alertListener) {
     info(`showAlert: ${alertInfo.name}`);
     const { imageURL, title, text, textClickable, cookie, name } = alertInfo;
-    // Setting the _doFail flag allows us to revert to the newmailalert.xhtml
-    // notification
-    if (this._doFail) {
-      SimpleTest.expectUncaughtException(true);
-      throw Components.Exception("", Cr.NS_ERROR_FAILURE);
-    }
     this._didNotify = true;
     this._imageUrl = imageURL;
     this._title = title;
     this._text = text;
@@ -105,9 +98,8 @@ var gMockAlertsService = {
     if (this._alertListener) {
       this._alertListener.observe(null, "alertfinished", this._cookie);
     }
 
-    this._doFail = false;
     this._doClick = false;
     this._didNotify = false;
     this._imageUrl = null;
     this._title = null;
@@ -178,9 +170,8 @@ registerCleanupFunction(function () {
 
 function setupTest() {
   gFolder.markAllMessagesRead(null);
   gMockAlertsService._reset();
-  gMockAlertsService._doFail = false;
   gFolder.biffState = Ci.nsIMsgFolder.nsMsgBiffState_NoMail;
   gFolder2.biffState = Ci.nsIMsgFolder.nsMsgBiffState_NoMail;
 
   remember_and_set_bool_pref("mail.biff.alert.show_subject", true);
@@ -734,28 +725,19 @@ add_task(async function test_load_messag
   await closedPromise;
 });
 
 /**
- * Test that we revert to newmailalert.xhtml if there is no system notification
- * service present.
- *
- * NOTE: this test should go last because if
- * nsIAlertsService.showAlertNotification failed for once, we always fallback to
- * newmailalert.xhtml afterwards.
+ * Test that the custom notification (newmailalert.xhtml) works if the
+ * preference is set.
  */
 add_task(async function test_revert_to_newmailalert() {
   setupTest();
-  // Set up the gMockAlertsService so that it fails to send a notification.
-  gMockAlertsService._doFail = true;
 
-  if (AppConstants.platform == "macosx") {
-    // newmailalert.xhtml doesn't work on macOS.
-    return;
-  }
+  Services.prefs.setBoolPref("mail.biff.use_system_alert", false);
 
   // We expect the newmailalert.xhtml window.
   const alertPromise = promise_new_window("alert:alert");
   await make_gradually_newer_sets_in_folder([gFolder], [{ count: 2 }]);
   const win = await alertPromise;
   // The alert closes itself.
   await BrowserTestUtils.domWindowClosed(win);
-});
+}).skip(AppConstants.platform == "macosx"); // newmailalert.xhtml doesn't work on macOS.
diff --git a/mailnews/base/src/MailNotificationManager.sys.mjs b/mailnews/base/src/MailNotificationManager.sys.mjs
--- a/mailnews/base/src/MailNotificationManager.sys.mjs
+++ b/mailnews/base/src/MailNotificationManager.sys.mjs
@@ -27,9 +27,8 @@ export class MailNotificationManager {
     "mozINewMailListener",
   ]);
 
   constructor() {
-    this._systemAlertAvailable = true;
     this._unreadChatCount = 0;
     this._unreadMailCount = 0;
     this._unreadMailExtra = "";
     // @type {Map<string, number>} - A map of folder URIs and the date of the
@@ -197,22 +196,28 @@ export class MailNotificationManager {
 
     this._logger.debug(
       `Filling alert info; folder.URI=${folder.URI}, numNewMessages=${numNewMessages}`
     );
-    const firstNewMsgHdr = folder.msgDatabase.getMsgHdrForKey(newMsgKeys[0]);
+    if (Services.prefs.getBoolPref("mail.biff.use_system_alert", true)) {
+      const firstNewMsgHdr = folder.msgDatabase.getMsgHdrForKey(newMsgKeys[0]);
 
-    const title = this._getAlertTitle(folder, numNewMessages);
-    let body;
-    try {
-      body = await this._getAlertBody(folder, firstNewMsgHdr);
-    } catch (e) {
-      this._logger.error(e);
+      const title = this._getAlertTitle(folder, numNewMessages);
+      let body;
+      try {
+        body = await this._getAlertBody(folder, firstNewMsgHdr);
+      } catch (e) {
+        this._logger.error(e);
+      }
+      if (!title || !body) {
+        return;
+      }
+
+      this._showAlert(firstNewMsgHdr, title, body);
+      this._saveNotificationTime(folder, newMsgKeys);
+    } else {
+      this._showCustomizedAlert(folder);
     }
-    if (!title || !body) {
-      return;
-    }
-    this._showAlert(firstNewMsgHdr, title, body);
-    this._saveNotificationTime(folder, newMsgKeys);
+
     this._animateDockIcon();
   }
 
   /**
@@ -331,40 +336,25 @@ export class MailNotificationManager {
    */
   _showAlert(msgHdr, title, body) {
     const folder = msgHdr.folder;
 
-    // Try to use system alert first.
-    if (
-      Services.prefs.getBoolPref("mail.biff.use_system_alert", true) &&
-      this._systemAlertAvailable
-    ) {
-      const alertsService = Cc[
-        "@mozilla.org/system-alerts-service;1"
-      ].getService(Ci.nsIAlertsService);
-      const cookie = folder.generateMessageURI(msgHdr.messageKey);
-      try {
-        const alert = Cc["@mozilla.org/alert-notification;1"].createInstance(
-          Ci.nsIAlertNotification
-        );
-        alert.init(
-          cookie,
-          "chrome://messenger/skin/icons/new-mail-alert.png",
-          title,
-          body,
-          true /* text clickable */,
-          cookie
-        );
-        alertsService.showAlert(alert, this);
-        return;
-      } catch (e) {
-        this._logger.error(e);
-        this._systemAlertAvailable = false;
-      }
-    }
+    const alertsService = Cc["@mozilla.org/system-alerts-service;1"].getService(
+      Ci.nsIAlertsService
+    );
+    const cookie = folder.generateMessageURI(msgHdr.messageKey);
 
-    // The use_system_alert pref is false or showAlert somehow failed, use the
-    // customized alert window.
-    this._showCustomizedAlert(folder);
+    const alert = Cc["@mozilla.org/alert-notification;1"].createInstance(
+      Ci.nsIAlertNotification
+    );
+    alert.init(
+      cookie,
+      "chrome://messenger/skin/icons/new-mail-alert.png",
+      title,
+      body,
+      true /* text clickable */,
+      cookie
+    );
+    alertsService.showAlert(alert, this);
   }
 
   /**
    * Show a customized alert window (newmailalert.xhtml), if there is already
