# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1750337666 -7200
# Node ID dfede95aacb878dbffa953283f497664eca0eeb8
# Parent  070260ee6955fdb562e26bc79e28211d6f8cd87c
Bug 1971603 - Reset #attachmentName event handlers for new message, to avoid mess with attachment url display. r=freaktechnik

Base problem is that we re-use #attachmentName and keep adding eventListeners to it.

ClearAttachmentList() was called mostly in combination with ClearCurrentHeaders() - where not in combination seems like a bug.
ClearCurrentHeaders() was called when it had just been called.

Differential Revision: https://phabricator.services.mozilla.com/D253540

diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -542,9 +542,8 @@ var messageProgressListener = {
     const previousBodyElement = getMessagePaneBrowser().contentDocument?.body;
     if (previousBodyElement) {
       previousBodyElement.innerHTML = "";
     }
-    ClearAttachmentList();
     gMessageNotificationBar.clearMsgNotifications();
 
     request.listener = this;
     request.openpgpSink = openpgpSink;
@@ -671,12 +670,10 @@ var messageProgressListener = {
       gViewAllHeaders = false;
     }
 
     document.title = "";
-    ClearCurrentHeaders();
     gBuiltExpandedView = false;
     gBuildAttachmentsForCurrentMsg = false;
-    ClearAttachmentList();
     gMessageNotificationBar.clearMsgNotifications();
 
     // Reset the blocked hosts so we can populate it again for this message.
     document.getElementById("remoteContentOptions").value = "";
@@ -1448,14 +1445,23 @@ function UpdateExpandedMessageHeaders() 
   // Now update the view to make sure the right elements are visible.
   updateExpandedView();
 }
 
+/**
+ * Clear global header data in anticipation of a new message to be displayed.
+ */
 function ClearCurrentHeaders() {
   // eslint-disable-next-line no-global-assign
   currentHeaderData = {};
   // eslint-disable-next-line no-global-assign
   currentAttachments = [];
   currentCharacterSet = "";
+
+  // Get rid of earlier event handlers on #attachmentName.
+  const attachmentName = document.getElementById("attachmentName");
+  attachmentName.replaceWith(attachmentName.cloneNode(true));
+
+  document.getElementById("attachmentList").replaceChildren();
 }
 
 function ShowMessageHeaderPane() {
   document.getElementById("msgHeaderView").collapsed = false;
@@ -2450,18 +2456,8 @@ async function saveLinkAttachmentsToFile
     );
   }
 }
 
-function ClearAttachmentList() {
-  // clear selection
-  var list = document.getElementById("attachmentList");
-  list.clearSelection();
-
-  while (list.hasChildNodes()) {
-    list.lastChild.remove();
-  }
-}
-
 // See attachmentBucketDNDObserver, which should have the same logic.
 const attachmentListDNDObserver = {
   onDragStart(event) {
     // NOTE: Starting a drag on an attachment item will normally also select
