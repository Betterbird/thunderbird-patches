# HG changeset patch
# User Yury Ivanovich <Yury.Ivanovich@linuxmail.org>
# Date 1745663234 -7200
# Node ID 676d6a8cb631ceec227b18d1e3339a593fdb9695
# Parent  5801e8b88e0aae4dcfb97d8691ca4090c5afc147
Bug 1946186 - Align code for drag&drop from 'Seach Messages' panel with code in thread pane. r=mkmelin

Align messageFlavorDataProvider.getFlavorData() and ThreadPaneOnDragStart() with equivalent code in
threadPane._flavorDataProvider.getFlavorData() and threadPane._onDragStart().

Differential Revision: https://phabricator.services.mozilla.com/D236932

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -4684,16 +4684,13 @@ var threadPane = {
       // text/plain should be unnecessary, but getFlavorData can't get at
       // text/x-moz-message for some reason.
       event.dataTransfer.mozSetDataAt("text/plain", uri, index);
       event.dataTransfer.mozSetDataAt("text/x-moz-message", uri, index);
-      event.dataTransfer.mozSetDataAt(
-        "text/x-moz-url",
-        msgService.getUrlForUri(uri).spec,
-        index
-      );
+      const msgUrlSpec = msgService.getUrlForUri(uri).spec;
+      event.dataTransfer.mozSetDataAt("text/x-moz-url", msgUrlSpec, index);
       event.dataTransfer.mozSetDataAt(
         "application/x-moz-file-promise-url",
-        msgService.getUrlForUri(uri).spec,
+        msgUrlSpec,
         index
       );
       event.dataTransfer.mozSetDataAt(
         "application/x-moz-file-promise",
diff --git a/mail/base/content/messenger.js b/mail/base/content/messenger.js
--- a/mail/base/content/messenger.js
+++ b/mail/base/content/messenger.js
@@ -820,50 +820,38 @@ function messageFlavorDataProvider() {}
 
 messageFlavorDataProvider.prototype = {
   QueryInterface: ChromeUtils.generateQI(["nsIFlavorDataProvider"]),
 
+  // This code is used when dragging a message from a "Search Messages" panel.
   getFlavorData(aTransferable, aFlavor) {
     if (aFlavor !== "application/x-moz-file-promise") {
       return;
     }
-    const fileUriPrimitive = {};
+    const fileName = {};
     aTransferable.getTransferData(
-      "application/x-moz-file-promise-url",
-      fileUriPrimitive
+      "application/x-moz-file-promise-dest-filename",
+      fileName
     );
+    fileName.value.QueryInterface(Ci.nsISupportsString);
 
-    const fileUriStr = fileUriPrimitive.value.QueryInterface(
-      Ci.nsISupportsString
-    );
-    const fileUri = Services.io.newURI(fileUriStr.data);
-    const fileUrl = fileUri.QueryInterface(Ci.nsIURL);
-    const fileName = fileUrl.fileName.replace(/(.{74}).*(.{10})$/u, "$1...$2");
-
-    const destDirPrimitive = {};
+    const destDir = {};
     aTransferable.getTransferData(
       "application/x-moz-file-promise-dir",
-      destDirPrimitive
+      destDir
     );
-    const destDirectory = destDirPrimitive.value.QueryInterface(Ci.nsIFile);
-    const file = destDirectory.clone();
-    file.append(fileName);
+    destDir.value.QueryInterface(Ci.nsIFile);
 
-    const messageUriPrimitive = {};
-    aTransferable.getTransferData("text/x-moz-message", messageUriPrimitive);
-    const messageUri = messageUriPrimitive.value.QueryInterface(
-      Ci.nsISupportsString
-    );
+    const file = destDir.value.clone();
+    file.append(fileName.value.data);
+
+    const messageURI = {};
+    aTransferable.getTransferData("text/plain", messageURI);
+    messageURI.value.QueryInterface(Ci.nsISupportsString);
 
     const messenger = Cc["@mozilla.org/messenger;1"].createInstance(
       Ci.nsIMessenger
     );
-    messenger.saveAs(
-      messageUri.data,
-      true,
-      null,
-      decodeURIComponent(file.path),
-      true
-    );
+    messenger.saveAs(messageURI.value.data, true, null, file.path, true);
   },
 };
 
 var TabsInTitlebar = {
diff --git a/mail/base/content/threadPane.js b/mail/base/content/threadPane.js
--- a/mail/base/content/threadPane.js
+++ b/mail/base/content/threadPane.js
@@ -14,8 +14,9 @@ ChromeUtils.defineESModuleGetters(this, 
   ThreadPaneColumns: "chrome://messenger/content/ThreadPaneColumns.mjs",
   TreeSelection: "chrome://messenger/content/TreeSelection.mjs",
 });
 
+// This code is used when dragging a message from a "Search Messages" panel.
 function ThreadPaneOnDragStart(aEvent) {
   if (aEvent.target.localName != "treechildren") {
     return;
   }
@@ -78,16 +79,25 @@ function ThreadPaneOnDragStart(aEvent) {
     }
 
     msgFileName = msgFileName + ".eml";
 
-    const msgUrl = msgService.getUrlForUri(msgUri);
-    const separator = msgUrl.spec.includes("?") ? "&" : "?";
+    // When dragging messages to the filesystem:
+    // - Windows fetches application/x-moz-file-promise-url and writes it to
+    //     a file.
+    // - Linux uses the flavor data provider, if a single message is dragged.
+    //     If multiple messages are dragged AND text/x-moz-url exists, it
+    //     fetches application/x-moz-file-promise-url and writes it to a file.
+    // - MacOS always uses the flavor data provider.
 
+    // text/plain should be unnecessary, but getFlavorData can't get at
+    // text/x-moz-message for some reason.
+    aEvent.dataTransfer.mozSetDataAt("text/plain", msgUri, index);
     aEvent.dataTransfer.mozSetDataAt("text/x-moz-message", msgUri, index);
-    aEvent.dataTransfer.mozSetDataAt("text/x-moz-url", msgUrl.spec, index);
+    const msgUrlSpec = msgService.getUrlForUri(msgUri).spec;
+    aEvent.dataTransfer.mozSetDataAt("text/x-moz-url", msgUrlSpec, index);
     aEvent.dataTransfer.mozSetDataAt(
       "application/x-moz-file-promise-url",
-      msgUrl.spec + separator + "fileName=" + encodeURIComponent(msgFileName),
+      msgUrlSpec,
       index
     );
     aEvent.dataTransfer.mozSetDataAt(
       "application/x-moz-file-promise",
