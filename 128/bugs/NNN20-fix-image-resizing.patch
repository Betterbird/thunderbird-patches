# HG changeset patch
# User alta88@fixall.com
# Date 1733177774 -3600
# Parent  01d553d5d769033f057bbfc18d8b8d508414e519
NNN20 - Fix image resizing regressions.

diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -50,28 +50,25 @@ function messagePaneOnResize() {
   if (doc?.URL.startsWith("http") || !doc?.images) {
     return;
   }
 
-  const availableWidth = Math.max(
-    document.body.scrollWidth,
-    window.visualViewport.width
-  );
-
   for (const img of doc.querySelectorAll(
     "img:is([shrinktofit],[overflowing])"
   )) {
-    if (!img.complete || img.closest("[href]")) {
+    if (!img.complete) {
       continue;
     }
+
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
     if (img.hasAttribute("shrinktofit")) {
       // Determine if the image could be enlarged.
-      img.toggleAttribute("overflowing", img.naturalWidth > img.clientWidth);
-    } else if (
-      img.hasAttribute("overflowing") &&
-      img.clientWidth < availableWidth
-    ) {
-      // Handle zoomed images that are no longer overflowing after a resize.
-      img.removeAttribute("overflowing");
+      img.toggleAttribute("overflowing", isOverflowing);
+    } else {
+      // Handle zoomed images that may no longer be overflowing after a resize.
+      img.toggleAttribute("overflowing", isOverflowing);
       img.setAttribute("shrinktofit", "true");
     }
   }
 }
diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -4351,20 +4351,25 @@ function OnMsgParsed(aUrl) {
         img.addEventListener("load", resolve, { once: true });
       });
     }
     await stylesReadyPromise;
-    if (img.naturalWidth > img.clientWidth) {
-      img.setAttribute("overflowing", "true");
-    }
+
+    // An image is overflowing iff its naturalWidth is larger than the
+    // messagepane viewport AND its naturalWidth (unconstrained) is greater
+    // than its displayed width. The naturalWidth should always be available
+    // due to await for the load to complete. Also in messagePaneOnResize().
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
+    img.toggleAttribute("overflowing", isOverflowing);
   };
 
   // Scale any overflowing images, exclude http content.
   const imgs = doc && !doc.URL.startsWith("http") ? doc.images : [];
   for (const img of imgs) {
-    // No zooming for children of clickable links.
-    if (img.closest("[href]")) {
-      continue;
-    }
+    // Any overflowing image must be click zoomable. An overflowing link image
+    // will have the url displayed on hover and can be opened via contextmenu.
     applyOverflowingToImg(img);
   }
 }
 
