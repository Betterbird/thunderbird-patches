# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1713976347 -7200
# Parent  ca20eb6e304330cf5665cdab0fd9f0ba4aa9191d
NNN11 - re-introduce elements from 1775376-fix-dict-edit-draft.patch to make subject spell checking work for "context: Compose message To".

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -6059,8 +6059,9 @@ function ComposeUnload() {
 
   // In some tests, the window is closed so quickly that the observer
   // hasn't fired and removed itself yet, so let's remove it here.
   spellCheckReadyObserver.removeObserver();
+  checkerReadyObserver.removeObserver();
   // Stop spell checker so personal dictionary is saved.
   enableInlineSpellCheck(false);
 
   EditorCleanup();
@@ -7781,17 +7782,13 @@ async function ComposeChangeLanguage(lan
 
   const checker = GetCurrentEditorSpellChecker();
 
   // Spell checker needs to be ready before we can select new dictionaries.
-  if (gSpellCheckingEnabled && checker?.spellCheckPending) {
-    await new Promise(resolve => {
-      Services.obs.addObserver(function observe(subject, topic) {
-        if (!gMsgCompose || subject == gMsgCompose.editor) {
-          Services.obs.removeObserver(observe, topic);
-          resolve();
-        }
-      }, "inlineSpellChecker-spellCheck-ended");
-    });
+  if (gSpellCheckingEnabled) {
+    let count = 0;
+    while (count++ < 20 && !checkerReadyObserver.isReady()) {
+      await new Promise(r => setTimeout(r, 100));
+    }
   }
 
   await gSpellChecker?.selectDictionaries(languages);
 
@@ -11733,10 +11730,48 @@ function setParagraphState(event) {
 function updateDocumentLanguage(e) {
   ComposeChangeLanguage(e.detail.dictionaries).catch(console.error);
 }
 
+var checkerReadyObserver = {
+  _topic: "inlineSpellChecker-spellCheck-ended",
+  _isReady: false,
+
+  observe(aSubject, aTopic) {
+    if (aTopic != this._topic) {
+      return;
+    }
+    this._isReady = true;
+  },
+
+  _isAdded: false,
+
+  addObserver() {
+    if (this._isAdded) {
+      return;
+    }
+
+    Services.obs.addObserver(this, this._topic);
+    this._isAdded = true;
+  },
+
+  removeObserver() {
+    if (!this._isAdded) {
+      return;
+    }
+
+    Services.obs.removeObserver(this, this._topic);
+    this._isAdded = false;
+    this._isReady = false;
+  },
+
+  isReady() {
+    return this._isReady;
+  },
+};
+
 function toggleSpellCheckingEnabled() {
   enableInlineSpellCheck(!gSpellCheckingEnabled);
+  checkerReadyObserver.removeObserver();
 }
 
 // This function is called either at startup (see InitEditor above), or when
 // the user clicks on one of the two menu items that allow them to toggle the
@@ -11749,8 +11784,12 @@ function enableInlineSpellCheck(aEnableI
   if (gSpellCheckingEnabled != aEnableInlineSpellCheck) {
     // If state of spellchecker is about to change, clear any pending observer.
     spellCheckReadyObserver.removeObserver();
   }
+  checkerReadyObserver.removeObserver();
+  if (aEnableInlineSpellCheck) {
+    checkerReadyObserver.addObserver();
+  }
 
   gSpellCheckingEnabled = checker.enableRealTimeSpell = aEnableInlineSpellCheck;
   document
     .getElementById("msgSubject")
