# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1711492918 -3600
# Parent  d160c0e799becefbdb4ee7e904d274b354618f9f
NNN9 - Suppress unneeded logging to the error console.

diff --git a/toolkit/components/extensions/ExtensionChild.sys.mjs b/toolkit/components/extensions/ExtensionChild.sys.mjs
--- a/toolkit/components/extensions/ExtensionChild.sys.mjs
+++ b/toolkit/components/extensions/ExtensionChild.sys.mjs
@@ -665,8 +665,13 @@ class ProxyAPIImplementation extends Sch
     map.listeners.delete(listener);
     map.ids.delete(id);
     map.removedIds.add(id);
 
+    // The following call throws if there is no actor.
+    // No benefit in calling it.
+    if (!this.childApiManager.conduit.actor) {
+      return;
+    }
     this.childApiManager.conduit.sendRemoveListener({
       childId: this.childApiManager.id,
       listenerId: id,
       path: this.path,
diff --git a/toolkit/components/extensions/ExtensionParent.sys.mjs b/toolkit/components/extensions/ExtensionParent.sys.mjs
--- a/toolkit/components/extensions/ExtensionParent.sys.mjs
+++ b/toolkit/components/extensions/ExtensionParent.sys.mjs
@@ -315,9 +315,11 @@ const ProxyMessenger = {
 
   getTopBrowsingContextId(tabId) {
     // If a tab alredy has content scripts, no need to check private browsing.
     let tab = apiManager.global.tabTracker.getTab(tabId, null);
-    if (!tab || (tab.browser || tab).getAttribute("pending") === "true") {
+    // tab.getAttribute("pending") throws, so the following doesn't work:
+    // if (!tab || (tab.browser || tab).getAttribute("pending") === "true") {
+    if (!tab || !tab.browser || tab.browser.getAttribute("pending") === "true") {
       // No receivers in discarded tabs, so bail early to keep the browser lazy.
       throw new ExtensionError(ERROR_NO_RECEIVERS);
     }
     let browser = tab.linkedBrowser || tab.browser;
@@ -1093,9 +1095,17 @@ ParentAPIManager = {
     }
   },
 
   async recvAPICall(data, { actor }) {
-    let context = this.getContextById(data.childId);
+    let context;
+    // getContextById will throw if the context has been destroyed
+    // in the meantime.
+    try {
+      context = this.getContextById(data.childId);
+    } catch (ex) {
+      console.info(`No context for ${data.childId}`);
+      return;
+    }
     let target = actor.browsingContext?.top.embedderElement;
 
     verifyActorForContext(actor, context);
 
diff --git a/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs b/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
--- a/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
+++ b/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
@@ -161,9 +161,14 @@ const observer = {
   observe(subject, topic, _data) {
     switch (topic) {
       case "autocomplete-did-enter-text": {
         let input = subject.QueryInterface(Ci.nsIAutoCompleteInput);
-        let { selectedIndex } = input.popup;
+        let selectedIndex;
+        try {
+          selectedIndex = input.popup.selectedIndex;
+        } catch (ex) {
+          selectedIndex = -1;
+        }
         if (selectedIndex < 0 || selectedIndex >= input.controller.matchCount) {
           break;
         }
 
