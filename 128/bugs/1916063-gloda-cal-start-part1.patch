# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1742587244 -3600
# Node ID 5d683c29e8f4f56bffc495f8b40b2ceac0d3f09a
# Parent  c73fabb8d7a327c748baf06ba927ca63126d069a
Bug 1916063 - Don't break calendar data handling for missing start date. r=john.bieling

Differential Revision: https://phabricator.services.mozilla.com/D224583

diff --git a/calendar/base/modules/calRecurrenceUtils.sys.mjs b/calendar/base/modules/calRecurrenceUtils.sys.mjs
--- a/calendar/base/modules/calRecurrenceUtils.sys.mjs
+++ b/calendar/base/modules/calRecurrenceUtils.sys.mjs
@@ -25,10 +25,9 @@ ChromeUtils.defineESModuleGetters(lazy, 
  * @param {string} bundleName - Name of the properties file, e.g. "calendar-event-dialog".
  * @param {string} stringName - Name of the string within the properties file.
  * @param {string[]} [params] - (optional) Parameters to format the string.
  * @returns {string | null} A string describing the recurrence
- *                                        pattern or null if the item has no
- *                                        recurrence info.
+ *   pattern or null if the item has no info.
  */
 export function recurrenceStringFromItem(item, bundleName, stringName, params) {
   // See the `parentItem` property of `calIItemBase`.
   const parent = item.parentItem;
@@ -46,9 +45,9 @@ export function recurrenceStringFromItem
   const startDate = rawStartDate ? rawStartDate.getInTimezone(kDefaultTimezone) : null;
   const endDate = rawEndDate ? rawEndDate.getInTimezone(kDefaultTimezone) : null;
 
   return (
-    recurrenceRule2String(recurrenceInfo, startDate, endDate, startDate.isDate) ||
+    recurrenceRule2String(recurrenceInfo, startDate, endDate, startDate?.isDate) ||
     cal.l10n.getString(bundleName, stringName, params)
   );
 }
 
@@ -86,8 +85,15 @@ export function recurrenceRule2String(re
     const mask = aByDay.reduce((value, item) => value | (1 << item), 1);
     return aByDay.length == 7 && mask == Math.pow(2, 8) - 1;
   }
 
+  if (!startDate) {
+    // https://datatracker.ietf.org/doc/html/rfc5545#section-3.6.1
+    // DTSTART is optional when METHOD is used.
+    // For such occasions, we're not able to display anything sensible.
+    return getRString("ruleTooComplexSummary");
+  }
+
   // Retrieve a valid recurrence rule from the currently
   // set recurrence info. Bail out if there's more
   // than a single rule or something other than a rule.
   recurrenceInfo = recurrenceInfo.clone();
diff --git a/calendar/base/modules/utils/calDateTimeUtils.sys.mjs b/calendar/base/modules/utils/calDateTimeUtils.sys.mjs
--- a/calendar/base/modules/utils/calDateTimeUtils.sys.mjs
+++ b/calendar/base/modules/utils/calDateTimeUtils.sys.mjs
@@ -211,10 +211,10 @@ export var dtz = {
   /**
    * Convert a calIDateTime to a Javascript date object. This is the
    * replacement for the former .jsDate property.
    *
-   * @param cdt       The calIDateTime instance
-   * @returns The Javascript date equivalent.
+   * @param {calIDateTime} cdt - The calIDateTime instance
+   * @returns {Date} The JavaScript date equivalent.
    */
   dateTimeToJsDate(cdt) {
     if (cdt.isDate) {
       return new Date(cdt.year, cdt.month, cdt.day);
diff --git a/calendar/base/modules/utils/calInvitationUtils.sys.mjs b/calendar/base/modules/utils/calInvitationUtils.sys.mjs
--- a/calendar/base/modules/utils/calInvitationUtils.sys.mjs
+++ b/calendar/base/modules/utils/calInvitationUtils.sys.mjs
@@ -422,9 +422,9 @@ export var invitation = {
         const repeatString = recurrenceRule2String(
           ev.recurrenceInfo,
           startDate,
           endDate,
-          startDate.isDate
+          startDate ? startDate.isDate : false
         );
         if (repeatString) {
           return repeatString;
         }
@@ -480,10 +480,10 @@ export var invitation = {
         // Only show modified occurrence if start, duration or location
         // has changed.
         exc.QueryInterface(Ci.calIEvent);
         if (
-          exc.startDate.compare(exc.recurrenceId) != 0 ||
-          exc.duration.compare(ev.duration) != 0 ||
+          (exc.startDate && exc.startDate.compare(exc.recurrenceId)) != 0 ||
+          (exc.duration && exc.duration.compare(ev.duration)) != 0 ||
           excLocation != ev.getProperty("LOCATION")
         ) {
           cal.data.binaryInsert(modifiedOccurrences, exc, dateComptor, true);
         }
diff --git a/calendar/base/modules/utils/calItipUtils.sys.mjs b/calendar/base/modules/utils/calItipUtils.sys.mjs
--- a/calendar/base/modules/utils/calItipUtils.sys.mjs
+++ b/calendar/base/modules/utils/calItipUtils.sys.mjs
@@ -1537,9 +1537,9 @@ ItipOpListener.prototype = {
   mOldItem: null,
   mExtResponse: null,
 
   onOperationComplete(aCalendar, aStatus, aOperationType, aId, aDetail) {
-    lazy.cal.ASSERT(Components.isSuccessCode(aStatus), "error on iTIP processing");
+    lazy.cal.ASSERT(Components.isSuccessCode(aStatus), `iTIP processing failed: ${aDetail}`);
     if (Components.isSuccessCode(aStatus)) {
       itip.checkAndSend(aOperationType, aDetail, this.mOldItem, this.mExtResponse);
     }
     if (this.mOpListener) {
@@ -2049,9 +2049,9 @@ ItipItemFinder.prototype = {
                         ),
                       e =>
                         opListener.onOperationComplete(
                           item.calendar,
-                          e.result,
+                          e.result || Cr.NS_ERROR_FAILURE,
                           Ci.calIOperationListener.DELETE,
                           item.id,
                           e
                         )
@@ -2071,9 +2071,9 @@ ItipItemFinder.prototype = {
                       ),
                     e =>
                       opListener.onOperationComplete(
                         item.calendar,
-                        e.result,
+                        e.result || Cr.NS_ERROR_FAILURE,
                         Ci.calIOperationListener.DELETE,
                         item.id,
                         e
                       )
@@ -2142,9 +2142,9 @@ ItipItemFinder.prototype = {
                   ),
                 e =>
                   listener.onOperationComplete(
                     newItem.calendar,
-                    e.result,
+                    e.result || Cr.NS_ERROR_FAILURE,
                     Ci.calIOperationListener.ADD,
                     newItem.id,
                     e
                   )
@@ -2154,9 +2154,9 @@ ItipItemFinder.prototype = {
             break;
           }
           case "CANCEL": // has already been processed
           case "REPLY": // item has been previously removed from the calendar
-          case "COUNTER": // the item has been previously removed form the calendar
+          case "COUNTER": // the item has been previously removed from the calendar
             break;
           default:
             rc = Cr.NS_ERROR_NOT_IMPLEMENTED;
             break;
diff --git a/calendar/providers/storage/CalStorageItemModel.sys.mjs b/calendar/providers/storage/CalStorageItemModel.sys.mjs
--- a/calendar/providers/storage/CalStorageItemModel.sys.mjs
+++ b/calendar/providers/storage/CalStorageItemModel.sys.mjs
@@ -1101,9 +1101,9 @@ export class CalStorageItemModel extends
     this.#setDateParamHelper(params, "event_end", item.endDate);
     const dtstamp = item.stampTime;
     params.bindByName("event_stamp", dtstamp && dtstamp.nativeTime);
 
-    if (item.startDate.isDate) {
+    if (item.startDate?.isDate) {
       flags |= CAL_ITEM_FLAG.EVENT_ALLDAY;
     }
 
     params.bindByName("flags", flags);
diff --git a/calendar/test/browser/invitations/data/cancel-repeat-event.eml b/calendar/test/browser/invitations/data/cancel-repeat-event.eml
--- a/calendar/test/browser/invitations/data/cancel-repeat-event.eml
+++ b/calendar/test/browser/invitations/data/cancel-repeat-event.eml
@@ -14,9 +14,9 @@ Content-Transfer-Encoding: 7bit
 
 BEGIN:VCALENDAR
 METHOD:CANCEL
 BEGIN:VEVENT
-DTSTART:20220316T110000Z
+X-NOTE: This is missing DTSTART 20220316T110000Z
 DTEND:20220316T113000Z
 RRULE:FREQ=DAILY;WKST=SU;COUNT=3;INTERVAL=1
 DTSTAMP:20220316T191602Z
 UID:02e79b96
