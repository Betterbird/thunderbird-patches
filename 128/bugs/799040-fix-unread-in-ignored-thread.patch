# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1711905368 -7200
# Parent  14a9208b9554c6ceaaf6a184666813cf82f2bc2a
Bug 799040 - If ignored thread received new message, don't increase unread count.

diff --git a/mailnews/base/public/nsIMsgThread.idl b/mailnews/base/public/nsIMsgThread.idl
--- a/mailnews/base/public/nsIMsgThread.idl
+++ b/mailnews/base/public/nsIMsgThread.idl
@@ -26,8 +26,9 @@ interface nsIMsgThread : nsISupports {
   nsIMsgDBHdr getChildHdrAt(in unsigned long index);
   nsIMsgDBHdr getRootHdr();
   void removeChildAt(in unsigned long index);
   void removeChildHdr(in nsIMsgDBHdr child, in nsIDBChangeAnnouncer announcer);
+  void resetNumUnreadChildren();
 
   void markChildNew(in boolean bRead);
   void markChildRead(in boolean bRead);
 
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -6135,8 +6135,15 @@ nsresult nsMsgDBView::MarkThreadRead(nsI
       idsMarkedRead.InsertElementAt(0, hdrMsgId);
     }
   }
 
+  uint32_t numUnreadChildren;
+  threadHdr->GetNumUnreadChildren(&numUnreadChildren);
+  if (numUnreadChildren > 0) {
+    // Repair damage from bug 799040.
+    threadHdr->ResetNumUnreadChildren();
+    mTree->InvalidateRow(threadIndex);
+  }
   return NS_OK;
 }
 
 bool nsMsgDBView::AdjustReadFlag(nsIMsgDBHdr* msgHdr, uint32_t* msgFlags) {
diff --git a/mailnews/base/src/nsMsgGroupThread.cpp b/mailnews/base/src/nsMsgGroupThread.cpp
--- a/mailnews/base/src/nsMsgGroupThread.cpp
+++ b/mailnews/base/src/nsMsgGroupThread.cpp
@@ -96,8 +96,12 @@ NS_IMETHODIMP nsMsgGroupThread::GetNumUn
   *aNumUnreadChildren = m_numUnreadChildren;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgGroupThread::ResetNumUnreadChildren() {
+  return NS_OK;  // No-op, only used for repair in nsMsgThread.
+}
+
 void nsMsgGroupThread::InsertMsgHdrAt(nsMsgViewIndex index, nsIMsgDBHdr* hdr) {
   nsMsgKey msgKey;
   hdr->GetMessageKey(&msgKey);
   m_keys.InsertElementAt(index, msgKey);
diff --git a/mailnews/base/src/nsMsgXFViewThread.cpp b/mailnews/base/src/nsMsgXFViewThread.cpp
--- a/mailnews/base/src/nsMsgXFViewThread.cpp
+++ b/mailnews/base/src/nsMsgXFViewThread.cpp
@@ -95,8 +95,12 @@ nsMsgXFViewThread::GetNumUnreadChildren(
   *aNumUnreadChildren = m_numUnreadChildren;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgXFViewThread::ResetNumUnreadChildren() {
+  return NS_OK;  // No-op, only used for repair in nsMsgThread.
+}
+
 NS_IMETHODIMP
 nsMsgXFViewThread::AddChild(nsIMsgDBHdr* aNewHdr, nsIMsgDBHdr* aInReplyTo,
                             bool aThreadInThread,
                             nsIDBChangeAnnouncer* aAnnouncer) {
diff --git a/mailnews/db/msgdb/src/nsMsgThread.cpp b/mailnews/db/msgdb/src/nsMsgThread.cpp
--- a/mailnews/db/msgdb/src/nsMsgThread.cpp
+++ b/mailnews/db/msgdb/src/nsMsgThread.cpp
@@ -919,8 +919,15 @@ nsresult nsMsgThread::ChangeNewChildCoun
   m_numNewChildren += delta;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgThread::ResetNumUnreadChildren() {
+  nsresult rv = m_mdbDB->UInt32ToRowCellColumn(
+      m_metaRow, m_mdbDB->m_threadUnreadChildrenColumnToken, 0);
+  m_numUnreadChildren = 0;
+  return rv;
+}
+
 nsresult nsMsgThread::ChangeUnreadChildCount(int32_t delta) {
   nsresult rv;
 
   uint32_t childCount = 0;
