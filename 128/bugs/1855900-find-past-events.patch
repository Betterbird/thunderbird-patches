# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1724960876 -7200
# Parent  3250b106b03962db3edd4b834af3556ff09365bf
Bug 1855900 - Add Past Events and All Events options to unifinder.

diff --git a/calendar/base/content/calendar-tab-panels.inc.xhtml b/calendar/base/content/calendar-tab-panels.inc.xhtml
--- a/calendar/base/content/calendar-tab-panels.inc.xhtml
+++ b/calendar/base/content/calendar-tab-panels.inc.xhtml
@@ -134,8 +134,11 @@
           <hbox id="unifinder-searchBox" class="themeable-brighttext" persist="collapsed">
             <box align="center">
               <menulist id="event-filter-menulist" value="P7D" persist="value">
                 <menupopup id="event-filter-menupopup" oncommand="refreshUnifinderFilterInterval()">
+                  <menuitem id="event-filter-past"
+                            value="past"
+                            data-l10n-id="calendar-event-listing-interval-past"/>
                   <menuitem id="event-filter-today"
                             value="today"
                             data-l10n-id="calendar-event-listing-interval-today"/>
                   <menuitem id="event-filter-next7days"
@@ -166,8 +169,13 @@
                             data-l10n-id="calendar-event-listing-interval-selected-day"/>
                   <menuitem id="event-filter-currentview"
                             value="currentview"
                             data-l10n-id="calendar-event-listing-interval-current-view"/>
+                  <!-- Enable this when the TB folks have all the relevant translations.
+                  <menuitem id="event-filter-all"
+                            value="all"
+                            data-l10n-id="calendar-event-listing-interval-all"/>
+                  -->
                 </menupopup>
               </menulist>
             </box>
             <box align="center" flex="1">
diff --git a/calendar/base/content/calendar-unifinder.js b/calendar/base/content/calendar-unifinder.js
--- a/calendar/base/content/calendar-unifinder.js
+++ b/calendar/base/content/calendar-unifinder.js
@@ -256,8 +256,15 @@ function refreshUnifinderFilterInterval(
   let startDate, endDate;
 
   const intervalSelection = document.getElementById("event-filter-menulist").selectedItem.value;
   switch (intervalSelection) {
+    case "past":
+      startDate = today.clone();
+      // Use last 100 yrs instead of unbounded value, to avoid performance
+      // issues with recurring events.
+      startDate.year -= 100;
+      endDate = today;
+      break;
     case "today":
       startDate = today;
       endDate = today.clone();
       endDate.day++;
@@ -300,13 +307,20 @@ function refreshUnifinderFilterInterval(
     case "currentview":
       startDate = view.startDate;
       endDate = view.endDate;
       break;
+    case "all":
+      // Use last +-100 yrs instead of unbounded values, to avoid performance
+      // issues with recurring events.
+      startDate = today.clone();
+      startDate.year -= 100;
+      endDate = today.clone();
+      endDate.year += 100;
+      break;
   }
 
   const filteredView = getUnifinderView();
   if (filteredView) {
-    filteredView.startDate = startDate;
-    filteredView.endDate = endDate;
+    filteredView.setDateRange(startDate, endDate);
     filteredView.refreshItems();
   }
 }
diff --git a/calendar/base/content/widgets/calendar-filter-tree-view.js b/calendar/base/content/widgets/calendar-filter-tree-view.js
--- a/calendar/base/content/widgets/calendar-filter-tree-view.js
+++ b/calendar/base/content/widgets/calendar-filter-tree-view.js
@@ -195,67 +195,47 @@ class CalendarFilteredTreeView extends C
     this.selection?.clearSelection();
   }
 
   addItems(items) {
+    this._tree?.beginUpdateBatch();
+    this.#saveSelection();
+
     let anyItemsMatchedFilter = false;
 
     for (const item of items) {
-      const row = new CalendarFilteredTreeViewRow(item);
-
-      const sortValue = row.getValue(this.#sortColumn);
-
-      let addIndex = null;
-      for (let i = 0; addIndex === null && i < this.#allRows.length; i++) {
-        const comparison = this.#collator.compare(
-          sortValue,
-          this.#allRows[i].getValue(this.#sortColumn)
-        );
-        if (
-          (comparison < 0 && this.#sortDirection == "ascending") ||
-          (comparison >= 0 && this.#sortDirection == "descending")
-        ) {
-          addIndex = i;
-        }
-      }
-
-      if (addIndex === null) {
-        addIndex = this.#allRows.length;
-      }
-      this.#allRows.splice(addIndex, 0, row);
+      this.#allRows.push(new CalendarFilteredTreeViewRow(item));
 
       if (this.#itemMatchesFilterIfAny(item)) {
         anyItemsMatchedFilter = true;
       }
     }
 
+    this.#sortBy(this.#sortColumn, this.#sortDirection, true);
+
     if (anyItemsMatchedFilter) {
-      this.#saveSelection();
-
-      this._tree?.beginUpdateBatch();
       this._rowMap = this.#allRows.filter(row => this.#itemMatchesFilterIfAny(row.item));
-      this._tree?.endUpdateBatch();
+    }
 
-      this.#restoreSelection();
-    }
+    this.#restoreSelection();
+    this._tree?.endUpdateBatch();
   }
 
   removeItems(items) {
+    this._tree?.beginUpdateBatch();
+    this.#saveSelection();
+
     const hashIdsToRemove = items.map(i => i.hashId);
     for (let i = this.#allRows.length - 1; i >= 0; i--) {
       if (hashIdsToRemove.includes(this.#allRows[i].item.hashId)) {
         this.#allRows.splice(i, 1);
       }
     }
 
-    this.#saveSelection();
-
-    this._tree?.beginUpdateBatch();
     for (let i = this._rowMap.length - 1; i >= 0; i--) {
       if (hashIdsToRemove.includes(this._rowMap[i].item.hashId)) {
         this._rowMap.splice(i, 1);
       }
     }
-    this._tree?.endUpdateBatch();
 
     if (this.selection) {
       // Don't leave behind bogus rows in the selection. Restoring the selection
       // doesn't touch items beyond the end of the row map, but we've just
@@ -266,8 +246,9 @@ class CalendarFilteredTreeView extends C
       this.selection.selectEventsSuppressed = false;
     }
 
     this.#restoreSelection();
+    this._tree?.endUpdateBatch();
   }
 
   removeItemsFromCalendar(calendarId) {
     const itemsToRemove = this.#allRows
@@ -290,11 +271,11 @@ class CalendarFilteredTreeView extends C
 
     this.#sortBy(column.id, direction);
   }
 
-  #sortBy(sortColumn, sortDirection) {
+  #sortBy(sortColumn, sortDirection, force) {
     // Sort underlying array of rows first.
-    if (sortColumn == this.#sortColumn) {
+    if (sortColumn == this.#sortColumn && !force) {
       if (sortDirection == this.#sortDirection) {
         // Sort order hasn't changed; do nothing.
         return;
       }
diff --git a/calendar/base/content/widgets/calendar-filter.js b/calendar/base/content/widgets/calendar-filter.js
--- a/calendar/base/content/widgets/calendar-filter.js
+++ b/calendar/base/content/widgets/calendar-filter.js
@@ -1122,8 +1122,37 @@ let CalendarFilteredViewMixin = Base =>
       this.#invalidate();
     }
 
     /**
+     * Set start and end range of the filter, all at once, avoiding the
+     * double #invalidate() calls that would otherwise take place.
+     *
+     * @param {?calIDateTime} start - Start time.
+     * @param {?calIDateTime} end - End time.
+     */
+    setDateRange(start, end) {
+      let changed = false;
+      if (
+        this.startDate?.compare(start) != 0 ||
+        this.startDate?.timezone.tzid != start.timezone.tzid
+      ) {
+        this.#filter.startDate = start.clone();
+        this.#filter.startDate.makeImmutable();
+        changed = true;
+      }
+
+      if (this.endDate?.compare(end) != 0 || this.endDate?.timezone.tzid != end.timezone.tzid) {
+        this.#filter.endDate = end.clone();
+        this.#filter.endDate.makeImmutable();
+        changed = true;
+      }
+
+      if (changed) {
+        this.#invalidate();
+      }
+    }
+
+    /**
      * One of the calICalendar.ITEM_FILTER_TYPE constants.
      * This must be set to a non-zero value in order to display any items.
      *
      * @type {number}
@@ -1288,11 +1317,10 @@ let CalendarFilteredViewMixin = Base =>
         return;
       }
       const iterator = cal.iterate.streamValues(this.#filter.getItems(calendar));
       this.#iterators.add(iterator);
-      for await (const chunk of iterator) {
-        this.addItems(chunk);
-      }
+      const items = await Array.fromAsync(iterator);
+      this.addItems(items.flat());
       this.#iterators.delete(iterator);
     }
 
     /**
diff --git a/calendar/base/src/CalReadableStreamFactory.sys.mjs b/calendar/base/src/CalReadableStreamFactory.sys.mjs
--- a/calendar/base/src/CalReadableStreamFactory.sys.mjs
+++ b/calendar/base/src/CalReadableStreamFactory.sys.mjs
@@ -222,9 +222,9 @@ class CalBoundedReadableStreamController
 export class CalReadableStreamFactory {
   /**
    * The default amount of items to queue before providing via the reader.
    */
-  static defaultQueueSize = 10;
+  static defaultQueueSize = 100;
 
   /**
    * Creates a generic ReadableStream using the passed object as the
    * UnderlyingSource. Use this method instead of creating streams directly
diff --git a/calendar/locales/en-US/calendar/calendar-event-listing.ftl b/calendar/locales/en-US/calendar/calendar-event-listing.ftl
--- a/calendar/locales/en-US/calendar/calendar-event-listing.ftl
+++ b/calendar/locales/en-US/calendar/calendar-event-listing.ftl
@@ -62,8 +62,11 @@ calendar-event-listing-column-title =
   .tooltiptext = Sort by title
 
 ## Interval dropdown options
 
+calendar-event-listing-interval-past =
+  .label = Events in the Past
+
 calendar-event-listing-interval-calendar-month =
   .label = Events in this Calendar Month
 
 calendar-event-listing-interval-current-view =
@@ -83,8 +86,11 @@ calendar-event-listing-interval-next-6-m
 
 calendar-event-listing-interval-next-12-months =
   .label = Events in the Next 12 Months
 
+calendar-event-listing-interval-all =
+  .label = All Events
+
 calendar-event-listing-interval-selected-day =
   .label = Currently Selected Day
 
 calendar-event-listing-interval-today =
