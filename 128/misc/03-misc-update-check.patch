# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1711561395 -3600
# Parent  f9b444ba19b45ca224155aa1b7b0acb1356d8eb0
Misc: Add update check and fix release notes link.
* * *
Misc: Startup update check.
* * *
Misc: Add more logging to update check.
* * *
Misc: CSS tweak so download link aligns correctly.
* * *
Misc: Improve behaviour when update check fails.
* * *
Misc: Make update check take policy DisableAppUpdate into account.

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -42,8 +42,9 @@ pref("app.update.timerMinimumDelay", 120
 // minimum=10 seconds, default=30 seconds, and maximum=120 seconds
 pref("app.update.timerFirstInterval", 30000);
 
 // App-specific update preferences
+pref("betterbird.update.checkIntervalDays", 5);
 
 // The interval to check for updates (app.update.interval) is defined in
 // the branding files.
 
@@ -118,9 +119,9 @@ pref("app.update.service.enabled", true)
 pref("app.update.BITS.enabled", false);
 #endif
 
 // Release notes URL
-pref("app.releaseNotesURL", "https://live.thunderbird.net/%APP%/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
+pref("app.releaseNotesURL", "https://www.betterbird.eu/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
 
 #ifdef XP_MACOSX
   // If set to true, Thunderbird will automatically restart if it is left
   // running with no windows open.
diff --git a/mail/base/content/aboutDialog.js b/mail/base/content/aboutDialog.js
--- a/mail/base/content/aboutDialog.js
+++ b/mail/base/content/aboutDialog.js
@@ -21,9 +21,9 @@ if (AppConstants.MOZ_UPDATER) {
   // This method is in the aboutDialog-appUpdater.js file.
   window.addEventListener("unload", onUnload);
 }
 
-function onLoad(event) {
+async function onLoad(event) {
   if (event.target !== document) {
     return;
   }
 
@@ -119,8 +119,79 @@ function onLoad(event) {
       event.preventDefault();
       openAboutTab(event.target.href);
     };
   }
+
+  await BetterbirdUpdateCheck(window);
+}
+
+async function BetterbirdUpdateCheck(win) {
+  let needsUpdate = "arguments" in win && win.arguments[0].needsUpdate;
+  let checkForUpdate = !needsUpdate;
+  let cantCheck = false;
+  if (Services.policies && !Services.policies.isAllowed("appUpdate")) {
+    console.info(
+      "Betterbird skipping update check due to policy DisableAppUpdate"
+    );
+    checkForUpdate = false;
+    cantCheck = true;
+  }
+
+  if (checkForUpdate) {
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        console.error("Betterbird update check FAILED");
+        cantCheck = true;
+      } else {
+        let content = await response.text();
+        let lines = content.split("\n");
+        let version = Services.appinfo.version;
+        let buildID = Services.appinfo.appBuildID;
+        let os = Services.appinfo.OS;
+        for (let l of lines) {
+          let parts = l.split(",");
+          // Format is os,version,buildid.
+          if (version.startsWith(parts[1]) && os == parts[0]) {
+            if (parts[2] > buildID) {
+              needsUpdate = true;
+              console.info(
+                `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+              );
+            } else {
+              console.info(
+                `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+              );
+            }
+            break;
+          }
+        }
+      }
+    } catch (ex) {
+      console.error("Betterbird update check FAILED");
+      cantCheck = true;
+    }
+  }
+
+  if (needsUpdate) {
+    let el = document.getElementById("manualUpdate");
+    el.style = "display: normal";
+    // Replacement for
+    // https://searchfox.org/comm-central/rev/16c0bb426b179283b0b8a3076b4bf03208207c4a/mozilla/browser/base/content/aboutDialog-appUpdater.js#55
+    let link = document.getElementById("manualLink");
+    link.href = "https://www.betterbird.eu/downloads/";
+    link.textContent = "www.betterbird.eu/downloads";
+  } else if (cantCheck) {
+    let el = document.getElementById("checkingFailed");
+    el.style = "display: normal";
+  } else {
+    // Up to date.
+    let el = document.getElementById("noUpdatesFound");
+    el.style = "display: normal";
+  }
 }
 
 // This function is used to open about: tabs. The caller should ensure the url
 // is only an about: url.
diff --git a/mail/base/content/aboutDialog.xhtml b/mail/base/content/aboutDialog.xhtml
--- a/mail/base/content/aboutDialog.xhtml
+++ b/mail/base/content/aboutDialog.xhtml
@@ -43,8 +43,20 @@
         <span id="distributionId" class="text-blurb"></span>
 
         <xul:vbox id="detailsBox">
           <xul:hbox id="updateBox">
+            <div id="noUpdatesFound" style="display: none;">
+              <span data-l10n-id="update-no-updates-found"></span>
+            </div>
+            <div id="checkingFailed" style="display: none;">
+              <span data-l10n-id="aboutdialog-update-checking-failed"></span>
+            </div>
+            <div id="manualUpdate" style="display: none;">
+              <span data-l10n-id="update-manual">
+                <a id="manualLink" data-l10n-name="manual-link"
+                   class="manualLink text-link browser-link"></a>
+              </span>
+            </div>
 #ifdef MOZ_UPDATER
             <div id="icons">
               <img class="icon update-throbber" role="presentation"/>
               <img class="icon noUpdatesFound" src="chrome://global/skin/icons/check.svg" role="presentation"/>
diff --git a/mail/components/MailGlue.sys.mjs b/mail/components/MailGlue.sys.mjs
--- a/mail/components/MailGlue.sys.mjs
+++ b/mail/components/MailGlue.sys.mjs
@@ -702,8 +702,9 @@ MailGlue.prototype = {
    * but it will not make it happen later (and out of order) compared
    * to the other ones scheduled together.
    */
   _scheduleStartupIdleTasks() {
+    let self = this;
     const idleTasks = [
       {
         task() {
           // This module needs to be loaded so it registers to receive
@@ -802,8 +803,13 @@ MailGlue.prototype = {
         },
       },
       {
         task() {
+          self.BetterbirdUpdateCheck();
+        },
+      },
+      {
+        task() {
           // Use idleDispatch a second time to run this after the per-window
           // idle tasks.
           ChromeUtils.idleDispatch(() => {
             Services.obs.notifyObservers(
@@ -917,8 +923,108 @@ MailGlue.prototype = {
       linkHandled.data = true;
     }
   },
 
+  async BetterbirdUpdateCheck() {
+    if (Services.policies && !Services.policies.isAllowed("appUpdate")) {
+      console.info(
+        "Betterbird skipping update check due to policy DisableAppUpdate"
+      );
+      return;
+    }
+
+    let lastCheckTime = Services.prefs.getIntPref(
+      "betterbird.update.lastCheckTime",
+      0
+    );
+    let now = Math.round(Date.now() / 1000);
+    let days = Services.prefs.getIntPref(
+      "betterbird.update.checkIntervalDays",
+      5
+    );
+    if (days < 0) {
+      days = 5;
+    } else if (days == 0) {
+      console.info("Betterbird skipping update check, interval set to zero");
+      return;
+    }
+    let checkInterval = days * 24 * 60 * 60;
+    if (now - lastCheckTime < checkInterval) {
+      console.info(
+        `Betterbird skipping update check, last done ${new Date(
+          lastCheckTime * 1000
+        ).toLocaleString()}, interval ${days} days`
+      );
+      return;
+    }
+    Services.prefs.setIntPref("betterbird.update.lastCheckTime", now);
+    let needsUpdate = false;
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        console.error(
+          `Betterbird update check FAILED, last done ${new Date(
+            lastCheckTime * 1000
+          ).toLocaleString()}`
+        );
+        return;
+      }
+      let content = await response.text();
+      let lines = content.split("\n");
+      let version = Services.appinfo.version;
+      let buildID = Services.appinfo.appBuildID;
+      let os = Services.appinfo.OS;
+      for (let l of lines) {
+        let parts = l.split(",");
+        // Format is os,version,buildid.
+        if (version.startsWith(parts[1]) && os == parts[0]) {
+          if (parts[2] > buildID) {
+            needsUpdate = true;
+            console.info(
+              `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+            );
+          } else {
+            console.info(
+              `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+            );
+          }
+          break;
+        }
+      }
+    } catch (ex) {
+      console.error(
+        `Betterbird update check FAILED, last done ${new Date(
+          lastCheckTime * 1000
+        ).toLocaleString()}`
+      );
+      return;
+    }
+    if (!needsUpdate) {
+      return;
+    }
+    let win = Services.wm.getMostRecentWindow("mail:3pane");
+    if (!win) {
+      return;
+    }
+    let features = "chrome,";
+    if (AppConstants.platform == "win") {
+      features += "centerscreen,dependent";
+    } else if (AppConstants.platform == "macosx") {
+      features += "resizable=no,minimizable=no";
+    } else {
+      features += "centerscreen,dependent,dialog=no";
+    }
+    win.openDialog(
+      "chrome://messenger/content/aboutDialog.xhtml",
+      "",
+      features,
+      { needsUpdate }
+    );
+  },
+
   // for XPCOM
   QueryInterface: ChromeUtils.generateQI(["nsIObserver"]),
 };
 
