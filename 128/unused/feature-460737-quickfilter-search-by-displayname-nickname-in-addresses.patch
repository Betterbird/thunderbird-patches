# HG changeset patch
# User alta88@fixall.com
# Date 1720033327 -7200
# Parent  697aa5c3d9d1e2b4459fc06ee19d7a6877250a44
QuickFilter search for textFilter matches of Display Name and Nickname contact emails in Address Books.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/base/content/about3Pane.xhtml b/mail/base/content/about3Pane.xhtml
--- a/mail/base/content/about3Pane.xhtml
+++ b/mail/base/content/about3Pane.xhtml
@@ -36,8 +36,11 @@
 
   <link rel="localization" href="messenger/about3Pane.ftl" />
   <link rel="localization" href="messenger/treeView.ftl" />
   <link rel="localization" href="messenger/messenger.ftl" />
+  <link rel="localization" href="messenger/addressbook/aboutAddressBook.ftl" />
+  <link rel="localization" href="messenger/accountCentral.ftl" />
+  <link rel="localization" href="messenger/aboutImport.ftl"/>
   <link rel="localization" href="toolkit/global/textActions.ftl" />
   <link rel="localization" href="toolkit/main-window/findbar.ftl" />
 
   <script defer="defer" src="chrome://messenger/content/globalOverlay.js"></script>
diff --git a/mail/base/content/quickFilterBar.inc.xhtml b/mail/base/content/quickFilterBar.inc.xhtml
--- a/mail/base/content/quickFilterBar.inc.xhtml
+++ b/mail/base/content/quickFilterBar.inc.xhtml
@@ -54,9 +54,9 @@
             <span data-l10n-id="quick-filter-bar-attachment-label"></span>
           </button>
         </div>
         <span id="qfb-searching-icon"></span>
-        <span id="qfb-info-icon"
+        <span class="qfb-info-icon"
               data-l10n-id="quick-filter-bar-negate"></span>
         <span id="qfb-results-label"></span>
       </div>
       <div id="quickFilterBarSecondFilters">
@@ -76,8 +76,26 @@
             <button is="toggle-button" id="qfb-qs-body"
                     class="button check-button"
                     data-l10n-id="quick-filter-bar-text-filter-body"></button>
           </div>
+          <div class="roving-group button-group emailaddress-extra-group">
+            <button is="toggle-button" id="qfb-qs-email-address"
+                    class="button check-button"
+                    noinvert="true"
+                    data-l10n-id="quick-filter-bar-text-filter-email-address"></button>
+            <button is="toggle-button" id="qfb-qs-emailaddrbook-displayname"
+                    class="button check-button"
+                    noinvert="true"
+                    data-l10n-id="quick-filter-bar-text-filter-emailaddrbook-displayname"></button>
+            <button is="toggle-button" id="qfb-qs-emailaddrbook-nickname"
+                    class="button check-button"
+                    noinvert="true"
+                    data-l10n-id="quick-filter-bar-text-filter-emailaddrbook-nickname"></button>
+            <span class="qfb-info-icon"
+                  data-l10n-id="quick-filter-bar-emailaddress-extra"></span>
+          </div>
+          <span id="qfb-results-textfilter-label"
+                data-l10n-id="quick-filter-bar-textfilter-error"></span>
         </div>
         <div id="quickFilterBarTagsContainer" hidden="hidden">
           <xul:menulist id="qfb-boolean-mode" value="OR">
             <xul:menupopup>
diff --git a/mail/base/content/quickFilterBar.js b/mail/base/content/quickFilterBar.js
--- a/mail/base/content/quickFilterBar.js
+++ b/mail/base/content/quickFilterBar.js
@@ -25,9 +25,13 @@ class ToggleButton extends HTMLButtonEle
     this.addEventListener("keypress", event => {
       this.inverted = event.ctrlKey && !this.inverted;
       this.pressed = !this.inverted && this.pressed;
     });
-    this.addEventListener("contextmenu", () => {
+    this.addEventListener("contextmenu", event => {
+      if (this.noinvert) {
+        event.stopImmediatePropagation();
+        return;
+      }
       this.pressed = this.inverted = !this.inverted;
     });
   }
 
@@ -53,9 +57,13 @@ class ToggleButton extends HTMLButtonEle
     return this.hasAttribute("inverted");
   }
 
   set inverted(value) {
-    this.toggleAttribute("inverted", value === true);
+    this.toggleAttribute("inverted", value === true && !this.noinvert);
+  }
+
+  get noinvert() {
+    return this.hasAttribute("noinvert");
   }
 }
 customElements.define("toggle-button", ToggleButton, { extends: "button" });
 
@@ -460,8 +468,9 @@ var quickFilterBar = {
    *
    * @param [aFilterName] If only a single filter needs to be updated, name it.
    */
   reflectFiltererState(aFilterName) {
+    console.warn("reflectFiltererState");
     // If we aren't visible then there is no need to update the widgets.
     if (this.filterer.visible) {
       const filterValues = this.filterer.filterValues;
       for (const filterDef of QuickFilterManager.filterDefs) {
@@ -588,9 +597,9 @@ var quickFilterBar = {
   /**
    * Update the user terms part of the search definition to reflect the active
    * filterer's current state.
    */
-  updateSearch() {
+  async updateSearch() {
     if (!this._filterer || !gViewWrapper?.search) {
       return;
     }
 
@@ -601,10 +610,11 @@ var quickFilterBar = {
       // A value of null will not create this listener.
       this.filterer.setFilterValue("results", this.searchHit ? 0 : null, true);
     }
 
-    const [terms, listeners] = this.filterer.createSearchTerms(
-      gViewWrapper.search.session
+    const [terms, listeners] = await this.filterer.createSearchTerms(
+      gViewWrapper.search.session,
+      this
     );
 
     for (const [listener, filterDef] of listeners) {
       // it registers itself with the search session.
diff --git a/mail/locales/en-US/messenger/about3Pane.ftl b/mail/locales/en-US/messenger/about3Pane.ftl
--- a/mail/locales/en-US/messenger/about3Pane.ftl
+++ b/mail/locales/en-US/messenger/about3Pane.ftl
@@ -117,8 +117,13 @@ quick-filter-bar-negate =
       • [Subject] negated and [Body] selected: Show all messages where ‘Subject’ Does Not Contain “word” AND ‘Body’ Contains “word”.
       • [Any of] with [Important] negated and [Work] and [Personal] selected:
       Show all tagged messages which Do Not have the ‘Important’ tag AND which have the ‘Work’ OR the ‘Personal’ tag.
 
+# Explain email type textFilter searches with address book display Name
+# and Nickname.
+quick-filter-bar-emailaddress-extra =
+    .title = Search for matches in full Email address or for contact emails with matching Display Name or Nickname in your address books.
+
 # The contents of the results box when there is a filter active but there
 # are no messages matching the filter.
 quick-filter-bar-no-results = No results
 
@@ -185,8 +190,19 @@ quick-filter-bar-text-filter-subject = S
 # The button label that toggles whether the text filter searches the message
 # body for the string.
 quick-filter-bar-text-filter-body = Body
 
+# For email address type textFilters, additionally search in full Email
+# or for contact emails from address books with the filter matching Display
+# Name or Nickname values. These strings are borrowed from accountCentral.ftl
+# and aboutAddressBook.ftl.
+quick-filter-bar-text-filter-email-address = { email-label }
+quick-filter-bar-text-filter-emailaddrbook-displayname = { about-addressbook-name-format-display.label }
+quick-filter-bar-text-filter-emailaddrbook-nickname = { about-addressbook-column-header-nickname2 }
+# For error on textFilter with extra address book search. Borrowed from
+# aboutImport.ftl.
+quick-filter-bar-textfilter-error = { error-pane-title }
+
 # The first line of the panel popup that tells the user we found no matches
 # but we can convert to a global search for them.
 quick-filter-bar-gloda-upsell-line1 = Continue this search across all folders
 # The second line of the panel popup that tells the user we found no matches.
diff --git a/mail/modules/QuickFilterManager.sys.mjs b/mail/modules/QuickFilterManager.sys.mjs
--- a/mail/modules/QuickFilterManager.sys.mjs
+++ b/mail/modules/QuickFilterManager.sys.mjs
@@ -177,13 +177,16 @@ export class QuickFilterState {
   /**
    * Create the search terms appropriate to the current filter states.
    *
    * @param {nsIMsgSearchSession} aTermCreator
+   * @param {object} aMuxer - The frontend handler for the quick filter bar (
+   *   quickFilterBar in quickFilterBar.js).
    */
-  createSearchTerms(aTermCreator) {
-    return QuickFilterManager.createSearchTerms(
+  async createSearchTerms(aTermCreator, aMuxer) {
+    return await QuickFilterManager.createSearchTerms(
       this.filterValues,
-      aTermCreator
+      aTermCreator,
+      aMuxer
     );
   }
 
   /**
@@ -565,21 +568,24 @@ export var QuickFilterManager = {
    * as per the contract.
    *
    * @param {object} aFilterValues - The values to clear by filter.
    * @param {nsIMsgSearchSession} aTermCreator
+   * @param {object} aMuxer - The frontend handler for the quick filter bar (
+   *   quickFilterBar in quickFilterBar.js).
    * @returns {Array.<?string[], Array.<Array.<SearchListener, FilterDefinition>>>}
    */
-  createSearchTerms(aFilterValues, aTermCreator) {
+  async createSearchTerms(aFilterValues, aTermCreator, aMuxer) {
     const searchTerms = [],
       listeners = [];
     for (const filterName in aFilterValues) {
       const filterValue = aFilterValues[filterName];
       const filterDef = this.filterDefsByName[filterName];
       try {
-        const listener = filterDef.appendTerms(
+        const listener = await filterDef.appendTerms(
           aTermCreator,
           searchTerms,
-          filterValue
+          filterValue,
+          aMuxer
         );
         if (listener) {
           listeners.push([listener, filterDef]);
         }
@@ -1223,9 +1229,10 @@ export var MessageTextFilter = {
    * filters OR'ed together. So if the user queries for 'foo bar' with
    * sender and recipient enabled, we build:
    * ("foo" sender OR "foo" recipient) AND ("bar" sender OR "bar" recipient)
    */
-  appendTerms(aTermCreator, aTerms, aFilterValue) {
+  async appendTerms(aTermCreator, aTerms, aFilterValue, aMuxer) {
+    console.warn(aFilterValue);
     let term, value;
 
     if (aFilterValue.text) {
       const haveNegation = Object.entries(aFilterValue.states).some(
@@ -1236,13 +1243,38 @@ export var MessageTextFilter = {
         let firstClause = true;
         term = null;
         const splitPhrases = groupedPhrases.split("|");
         for (const phrase of splitPhrases) {
+          const success = await this.cacheEmailAddressesByDisplayNameNickName(
+            aFilterValue.states,
+            phrase
+          );
+          if (!success) {
+            aTerms.length = 0;
+            aMuxer.setFilterValue("resultstextfilter", "Error", true);
+            aMuxer.reflectFiltererState("resultstextfilter");
+            return;
+          }
+          aMuxer.setFilterValue("resultstextfilter", null, true);
+
           for (const [tfName, tfValue] of Object.entries(aFilterValue.states)) {
             if (tfValue !== true && tfValue !== false) {
               continue;
             }
             const tfDef = this.textFilterDefs[tfName];
+            if (tfDef.attrib === undefined) {
+              continue;
+            }
+            console.warn(
+              "appendTerms: tfName:tfValue - " + tfName + ":" + tfValue
+            );
+
+            const extraSearchEmailAddressTerms =
+              this.createExtraTermsForEmailTextfilter(
+                aTermCreator,
+                tfDef.attrib,
+                tfValue
+              );
 
             term = aTermCreator.createTerm();
             term.attrib = tfDef.attrib;
             value = term.value;
@@ -1256,16 +1288,171 @@ export var MessageTextFilter = {
             term.booleanAnd = firstClause || (!firstClause && haveNegation);
             term.beginsGrouping = firstClause ? 1 : 0;
             aTerms.push(term);
             firstClause = false;
+
+            if (
+              this.emailAddressTextFilterNames.has(tfName) &&
+              !aFilterValue.states.emailAddress
+            ) {
+              // Searching for emailAddressTextFilter with emailAddress not
+              // selected..
+              if (
+                extraSearchEmailAddressTerms.length ||
+                (!aFilterValue.states.emailAddrbookDisplayName &&
+                  !aFilterValue.states.emailAddrbookNickName)
+              ) {
+                // If displayName or nickName emails found, remove the term
+                // for emailAddress and transfer grouping. If neither are
+                // selected, remove the term for the emailAddress (default
+                // search) to restore unfiltered view.
+                aTerms.pop();
+                if (extraSearchEmailAddressTerms.length) {
+                  extraSearchEmailAddressTerms[0].booleanAnd = term.booleanAnd;
+                  extraSearchEmailAddressTerms[0].beginsGrouping =
+                    term.beginsGrouping;
+                }
+              } else {
+                // Need to generate a no results situation.
+                value.str = "\x01";
+                term.value = value;
+              }
+            }
+            // Add terms created to match emails with displayName or nickName
+            // values in the address books, if any. There will be none unless
+            // an emailAddressTextFilter is selected.
+            for (const extraTerm of extraSearchEmailAddressTerms) {
+              aTerms.push(extraTerm);
+            }
           }
         }
-        if (term) {
-          term.endsGrouping = 1;
+        if (aTerms.length) {
+          aTerms[aTerms.length - 1].endsGrouping = 1;
         }
       }
     }
   },
+
+  /**
+   * Create an array of contact email addresses that match text with address
+   * book DisplayName or NickName fields.
+   *
+   * @param {object} states - The filterValue.states object.
+   * @param {string} searchVal - The search text.
+   * @returns {boolean} - Success if true, error if false.
+   */
+  async cacheEmailAddressesByDisplayNameNickName(states, searchVal) {
+    if (!this.isEmailAddressTextFilterActive(states)) {
+      this.emailAddressesByDisplayNameNickName = [];
+      return true;
+    }
+
+    let searchString = states.emailAddrbookDisplayName
+      ? `(DisplayName,c,${searchVal})`
+      : "";
+    searchString += states.emailAddrbookNickName
+      ? `(NickName,c,${searchVal})`
+      : "";
+    console.warn(searchString);
+
+    if (!searchString) {
+      this.emailAddressesByDisplayNameNickName = [];
+      return true;
+    }
+
+    let emailAddresses = [];
+    const doSearch = async () => {
+      for (const addrbook of MailServices.ab.directories) {
+        await new Promise(resolve => {
+          const searchListener = {
+            onSearchFoundCard(card) {
+              emailAddresses = emailAddresses.concat(card.emailAddresses);
+            },
+            onSearchFinished() {
+              resolve();
+            },
+          };
+          addrbook.search(searchString, "", searchListener);
+        });
+        console.warn(addrbook.dirName);
+      }
+    };
+
+    await doSearch();
+    console.warn(emailAddresses);
+    this.emailAddressesByDisplayNameNickName = [...new Set(emailAddresses)];
+    if (this.emailAddressesByDisplayNameNickName.length > 14000) {
+      console.warn(
+        "cacheEmailAddressesByDisplayNameNickName: too many search conditions; search value is too general"
+      );
+      this.emailAddressesByDisplayNameNickName = [];
+      return false;
+    }
+    return true;
+  },
+
+  /**
+   * Create extra terms to match an email address to an email type attrib value.
+   *
+   * @param {nsIMsgSearchSession} termCreator
+   * @param {nsMsgSearchAttrib} attrib
+   * @param {boolean} tfValue
+   *
+   * @returns {nsiTerm[]}  - Array of nsiTerm or empty array.
+   */
+  createExtraTermsForEmailTextfilter(termCreator, attrib, tfValue) {
+    const terms = [];
+    let term, value;
+    for (const emailAddress of this.emailAddressesByDisplayNameNickName) {
+      term = termCreator.createTerm();
+      term.attrib = attrib;
+      value = term.value;
+      value.attrib = attrib;
+      value.str = emailAddress;
+      term.value = value;
+      term.op = tfValue
+        ? Ci.nsMsgSearchOp.Contains
+        : Ci.nsMsgSearchOp.DoesntContain;
+      // Explicit OR here unless negated (tfValue === false).
+      term.booleanAnd = tfValue === false;
+      term.beginsGrouping = 0;
+      term.endsGrouping = 0;
+      terms.push(term);
+    }
+    return terms;
+  },
+
+  /**
+   * @param {object} states - The filterValue.states object.
+   * @returns {boolean} - True if any textFilter is checked.
+   */
+  isTextFilterActive(states) {
+    return Object.entries(states).some(
+      ([tfName, tfValue]) =>
+        this.textFilterDefs[tfName].attrib &&
+        (tfValue === true || tfValue === false)
+    );
+  },
+
+  /**
+   * @param {object} states - The filterValue.states object.
+   * @returns {boolean} - True if an email type textFilter is checked.
+   */
+  isEmailAddressTextFilterActive(states) {
+    return Object.entries(states).some(
+      ([tfName, tfValue]) =>
+        this.emailAddressTextFilterNames.has(tfName) &&
+        (tfValue === true || tfValue === false)
+    );
+  },
+
+  isEmailAddressTextFilterExtraActive(states) {
+    return Object.entries(states).some(
+      ([tfName, tfValue]) =>
+        !this.textFilterDefs[tfName].attrib && tfValue === true
+    );
+  },
+
   getDefaults() {
     const states = Object.assign({}, this._defaultStates);
     return {
       text: null,
@@ -1326,9 +1513,25 @@ export var MessageTextFilter = {
       // There are three possible states: null, true, and false (inverted).
       const state = aMuxer.getFilterValueForMutation(MessageTextFilter.name);
       const filterDef = MessageTextFilter.textFilterDefsByDomId[this.id];
       state.states[filterDef.name] = !this.pressed ? null : !this.inverted;
-      aMuxer.deferredUpdateSearch();
+      aDocument
+        .getElementById("quick-filter-bar-filter-text-bar")
+        .toggleAttribute(
+          "emailFilterActive",
+          MessageTextFilter.isEmailAddressTextFilterActive(state.states)
+        );
+      aMuxer.setFilterValue("resultstextfilter", null);
+      aDocument.getElementById("qfb-results-textfilter-label").hidden = true;
+      if (
+        MessageTextFilter.emailAddressTextFilterNames.has(filterDef.name) &&
+        !MessageTextFilter.isEmailAddressTextFilterExtraActive(state.states)
+      ) {
+        // Do not run search on email address textFilter unless an extra is
+        // selected.
+      } else {
+        aMuxer.deferredUpdateSearch();
+      }
       lazy.XULStoreUtils.setValue(
         "messenger",
         "quickFilter",
         "textFilters",
@@ -1347,8 +1550,9 @@ export var MessageTextFilter = {
     }
   },
 
   onCommand(aState, aNode, aEvent, aDocument) {
+    console.warn("onCommand: textfilter");
     const text = aEvent.detail || null;
     const isSearch = aEvent.type === "search";
     let update;
     if (isSearch) {
@@ -1368,8 +1572,19 @@ export var MessageTextFilter = {
     }
 
     aState.text = text;
     aDocument.getElementById("quick-filter-bar-filter-text-bar").hidden = !text;
+
+    aDocument.getElementById("qfb-results-textfilter-label").hidden = true;
+    if (
+      !this.isTextFilterActive(aState.states) ||
+      (this.isEmailAddressTextFilterActive(aState.states) &&
+        !this.isEmailAddressTextFilterExtraActive(aState.states))
+    ) {
+      // Don't run needless code on text input if no textFilter is selected.
+      return [aState, false];
+    }
+
     return [aState, update];
   },
 
   reflectInDOM(aNode, aFilterValue, aDocument, aMuxer, aFromPFP) {
@@ -1429,15 +1644,23 @@ export var MessageTextFilter = {
 
     // Toggle the expanded filters visibility.
     aDocument.getElementById("quick-filter-bar-filter-text-bar").hidden =
       aFilterValue.text == null;
+
+    aDocument
+      .getElementById("quick-filter-bar-filter-text-bar")
+      .toggleAttribute(
+        "emailFilterActive",
+        this.isEmailAddressTextFilterActive(states)
+      );
   },
 
   /**
    * In order to do our upsell we need to know when we are not getting any
    * results.
    */
   postFilterProcess(aState, aViewWrapper, aFiltering) {
+    console.warn("postFilterProcess: textfilter");
     // If we're not filtering, not filtering on text, there are results, or
     // gloda is not enabled so upselling makes no sense, then bail.
     // (Currently we always return "nosale" to make sure our panel is closed;
     // this might be overkill but unless it becomes a performance problem, it
@@ -1486,8 +1709,22 @@ export var MessageTextFilter = {
    * @type {Object<string, object>}
    */
   textFilterDefsByDomId: {},
   /**
+   * All possible email type textFilter names, with nsMsgSearchAttrib for each.
+   *
+   * @type {Set<string>}
+   */
+  emailAddressTextFilterNames: new Set([
+    "sender",
+    "to",
+    "cc",
+    "bcc",
+    "recipients",
+    "alladdresses",
+  ]),
+
+  /**
    * Add a message field available for text filtering.
    *
    * @param {object} aTextDef - Text filter definition.
    * @param {string} aTextDef.name - Name of the filter.
@@ -1533,8 +1770,42 @@ MessageTextFilter.defineTextFilter({
   domId: "qfb-qs-body",
   attrib: Ci.nsMsgSearchAttrib.Body,
   defaultState: null,
 });
+MessageTextFilter.defineTextFilter({
+  name: "emailAddress",
+  domId: "qfb-qs-email-address",
+  defaultState: true,
+});
+MessageTextFilter.defineTextFilter({
+  name: "emailAddrbookDisplayName",
+  domId: "qfb-qs-emailaddrbook-displayname",
+  defaultState: null,
+});
+MessageTextFilter.defineTextFilter({
+  name: "emailAddrbookNickName",
+  domId: "qfb-qs-emailaddrbook-nickname",
+  defaultState: null,
+});
+
+/**
+ * Show error feedback, if any, for textFilter results.
+ */
+QuickFilterManager.defineFilter({
+  name: "resultstextfilter",
+  domId: "qfb-results-textfilter-label",
+  appendTerms() {},
+  clearState() {
+    return [null, false];
+  },
+  propagateState() {
+    return null;
+  },
+  reflectInDOM(aNode, aFilterValue /*, aDocument*/) {
+    console.warn("reflectInDOM: results-textfilter - " + aFilterValue);
+    aNode.hidden = aFilterValue === null;
+  },
+});
 
 /**
  * The results label says whether there were any matches and, if so, how many.
  */
@@ -1626,7 +1897,8 @@ QuickFilterManager.defineFilter({
    * to implement propagateState since the state they store would be pretty
    * expensive.)
    */
   postFilterProcess(aState, aViewWrapper, aFiltering) {
+    console.warn("postFilterProcess: results");
     return [aFiltering ? aViewWrapper.dbView.numMsgsInView : null, true, false];
   },
 });
diff --git a/mail/themes/shared/mail/quickFilterBar.css b/mail/themes/shared/mail/quickFilterBar.css
--- a/mail/themes/shared/mail/quickFilterBar.css
+++ b/mail/themes/shared/mail/quickFilterBar.css
@@ -69,9 +69,9 @@
   background-image: var(--icon-filter);
   display: none;
 }
 
-#qfb-info-icon {
+.qfb-info-icon {
   & {
     margin: var(--button-margin);
     content: var(--icon-info);
     fill: transparent;
@@ -118,8 +118,9 @@
   text-align: end;
   align-self: center;
 }
 
+#qfb-results-textfilter-label,
 #quick-filter-bar[filterActive="nomatches"] #qfb-results-label {
   color: var(--color-red-50);
 }
 
@@ -264,8 +265,12 @@
 
   & > .button-group > .button {
     min-width: 0;
   }
+
+  &:not([emailFilterActive]) > .emailaddress-extra-group {
+    display: none;
+  }
 }
 
 #qfb-upsell-line-one {
   font-weight: bold;
