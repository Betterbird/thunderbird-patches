# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1719991819 -7200
# Parent  f47f75bfa1a5eaa0b8385756d20514bbd45e8f3f
Improve QuickFilter status feedback when searching and switching folders:
- Remove unused activeElement
- Don't show feedback on startup.

diff --git a/mail/base/content/quickFilterBar.js b/mail/base/content/quickFilterBar.js
--- a/mail/base/content/quickFilterBar.js
+++ b/mail/base/content/quickFilterBar.js
@@ -64,17 +64,8 @@ var quickFilterBar = {
   activeTopLevelFilters: new Map(),
   topLevelFilters: ["unread", "starred", "addrBook", "attachment", "tags"],
 
   /**
-   * The UI element that last triggered a search. This can be used to avoid
-   * updating the element when a search returns - in particular the text box,
-   * which the user may still be typing into.
-   *
-   * @type {Element}
-   */
-  activeElement: null,
-
-  /**
    * This identifies the timer for the deferred search, which is cleared when
    * another deferred search is scheduled.
    *
    * @type {integer}
@@ -276,9 +267,9 @@ var quickFilterBar = {
           try {
             const postValue = !domNode.pressed ? null : !domNode.inverted;
             this.filterer.setFilterValue(filterDef.name, postValue);
             this.updateFiltersSettings(filterDef.name, postValue);
-            this.deferredUpdateSearch(domNode);
+            this.deferredUpdateSearch();
           } catch (ex) {
             console.error(ex);
           }
         };
@@ -312,9 +303,9 @@ var quickFilterBar = {
           );
           this.filterer.setFilterValue(filterDef.name, postValue, !update);
           this.updateFiltersSettings(filterDef.name, postValue);
           if (update) {
-            this.deferredUpdateSearch(domNode);
+            this.deferredUpdateSearch();
           }
         };
         handlerMenuItems = event => {
           if (filterDef.name == "tags") {
@@ -572,16 +563,15 @@ var quickFilterBar = {
   /**
    * For UI responsiveness purposes, defer the actual initiation of the search
    * until after the button click handling has completed and had the ability
    * to paint such.
-   *
-   * @param {Element} activeElement - The element that triggered a call to
-   *   this function, if any.
    */
-  deferredUpdateSearch(activeElement) {
+  deferredUpdateSearch(init = false) {
     // Immediate 'searching' UI feedback though.
     this.clearInDOM();
-    this.reflectSearchStart();
+    if (!init || (init && this._filterer.isAnyFilterActive())) {
+      this.reflectSearchStart();
+    }
 
     if (gViewWrapper?.searching) {
       // Search is interrupted and restarted or cleared. This entry point is
       // the earliest we know this.
@@ -589,26 +579,22 @@ var quickFilterBar = {
     }
 
     clearTimeout(this.searchTimeoutID);
     this.searchTimeoutID = setTimeout(
-      () => this.updateSearch(activeElement),
+      () => this.updateSearch(),
       this.deferredDelay
     );
   },
 
   /**
    * Update the user terms part of the search definition to reflect the active
    * filterer's current state.
-   *
-   * @param {Element?} activeElement - The element that triggered a call to
-   *   this function, if any.
    */
-  updateSearch(activeElement) {
+  updateSearch() {
     if (!this._filterer || !gViewWrapper?.search) {
       return;
     }
 
-    this.activeElement = activeElement;
     this.filterer.displayedFolder = gFolder;
 
     if (this._filterer.isAnyFilterActive()) {
       // Set to 0 to create a filter listener if a search is about to start.
@@ -658,9 +644,9 @@ var quickFilterBar = {
     this.reflectFiltererState();
     XULStoreUtils.setValue("messenger", "quickFilterBar", "visible", show);
 
     // Update the message list to reflect the filters status.
-    this.deferredUpdateSearch();
+    this.deferredUpdateSearch(init);
     // Cannot call the below function when threadTree hasn't been initialized yet.
     if (!init) {
       threadTree.table.body.focus();
     }
@@ -706,9 +692,8 @@ var quickFilterBar = {
    * The displayed folder changed. Reset or reapply the filter, depending on
    * the sticky state.
    */
   async onFolderSelected() {
-    this.activeElement = null;
     this.clearInDOM();
     this.filterer = new QuickFilterState(this.filterer);
     if (this._filterer?.filterValues.sticky) {
       if (this._filterer.isAnyFilterActive()) {
