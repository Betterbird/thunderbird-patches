# HG changeset patch
# User alta88@fixall.com
# Date 1716676717 -7200
# Parent  b0bbb4488fef3b1eef4ffc4c682f0a1a8a735ad2
29-feature-rethreading-UPDATE2.patch

1. Implement threadpane contextmenu "unthread" and "reset" actions, currently only available via keyboard.
2. Ensure any message in a tab/window is also replaced post rethread/edit.
3. Fix external dnd for threadpane.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -4923,10 +4923,8 @@ var threadPane = {
     if (event.target.closest("thead")) {
       this._clearDropTarget();
       return; // Only allow dropping in the body.
     }
-    // Must prevent default. Otherwise dropEffect gets cleared.
-    event.preventDefault();
     event.dataTransfer.dropEffect = "none";
     const types = Array.from(event.dataTransfer.mozTypesAt(0));
     const targetFolder = gFolder;
     if (targetFolder && types.includes("application/x-moz-file")) {
@@ -4948,15 +4946,17 @@ var threadPane = {
         this._clearDropTarget();
         return;
       }
       event.dataTransfer.dropEffect = "copy";
-      if (row.index == this._currentDropRow?.index) {
-        return;
-      }
-      this._clearDropTarget();
-      row.classList.add("drop-target");
-      this._currentDropRow = row;
-    }
+      if (row.index != this._currentDropRow?.index) {
+        this._clearDropTarget();
+        row.classList.add("drop-target");
+        this._currentDropRow = row;
+      }
+    }
+
+    // Must prevent default. Otherwise dropEffect gets cleared.
+    event.preventDefault();
   },
 
   /**
    * Handle threadPane drop events.
@@ -5327,17 +5327,26 @@ var threadPane = {
    * @param {string} action - In "rethread", "unthread", "reset".
    */
   updateThreading(action = "rethread") {
     action = threadTree.inKeyDnD ?? action;
-    const dragIndex = this._currentDragRow.index;
-    const dropIndex = this._currentDropRow?.index;
-    const newParentMessageURI = gDBView.getURIForViewIndex(dropIndex);
-
+    this.doUpdateThreading(
+      action,
+      this._currentDragRow.index,
+      gDBView.getURIForViewIndex(this._currentDropRow?.index)
+    );
+  },
+
+  /*
+   * @param {string} action - In "rethread", "unthread", "reset".
+   * @param {integer} sourceIndex - Index of message to rethread.
+   * @param {?string} newParentMessageURI - Actually a nsIMsgMailNewsUrl url.
+   */
+  doUpdateThreading(action, sourceIndex, newParentMessageURI) {
     const [successFn, errorFn] =
-      this.saveStateForMessageReplaceAtIndex(dragIndex);
+      this.saveStateForMessageReplaceAtIndex(sourceIndex);
 
     const messageEditor = new MessageEditor({
-      messageURI: gDBView.getURIForViewIndex(dragIndex),
+      messageURI: gDBView.getURIForViewIndex(sourceIndex),
       msgWindow: top.msgWindow,
       successFn,
       errorFn,
     });
diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -322,8 +322,9 @@ window.addEventListener("DOMContentLoade
   SetAttachmentListLocation();
 
   preferenceObserver.init();
   Services.obs.addObserver(msgObserver, "message-content-updated");
+  Services.obs.addObserver(msgObserver, "message-replaced");
 
   const browser = getMessagePaneBrowser();
 
   if (parent == top) {
@@ -358,8 +359,9 @@ window.addEventListener("unload", () => 
   OnUnloadMsgHeaderPane();
   MailServices.mailSession.RemoveFolderListener(folderListener);
   preferenceObserver.cleanUp();
   Services.obs.removeObserver(msgObserver, "message-content-updated");
+  Services.obs.removeObserver(msgObserver, "message-replaced");
   gViewWrapper?.close();
 });
 
 function displayMessage(uri, viewWrapper) {
@@ -559,8 +561,49 @@ var msgObserver = {
       // This notification is triggered after a partial pop3 message was
       // fully downloaded. The old message URI is now gone. To reload the
       // message, we display it with its new URI.
       displayMessage(data, gViewWrapper);
+    } else if (topic == "message-replaced") {
+      // A message has been rethreaded/edited and the next message was selected
+      // upon delete; reselect the original which has a new messageURI.
+      // The |subject| will contain the old messageURI and the new messageURI.
+      // The message may be standalone in a window (tabOrWindow.isChromeWindow
+      // is true) or tab (tabOrWindow.name is mailMessageTab).
+      // Or, the message may be in a mail3PaneTab type in other windows or tabs
+      // with a message list, including synthetic (tabOrWindow.name is
+      // mail3PaneTab).
+      const tabOrWindow = window.tabOrWindow || parent.tabOrWindow;
+      const isMail3PaneTab = tabOrWindow.mode?.name == "mail3PaneTab";
+      const isSynthetic = isMail3PaneTab && parent.gViewWrapper.isSynthetic;
+      const { oldMessageURI, newMessageURI } = subject.wrappedJSObject;
+      const doMessageUpdate =
+        gMessageURI &&
+        gMessageURI != newMessageURI &&
+        messageHistory.lastSelectedRemovedMessageURI == oldMessageURI;
+
+      if (doMessageUpdate || isSynthetic) {
+        if (isMail3PaneTab) {
+          const msgService = MailServices.messageServiceFromURI(newMessageURI);
+          const msgHdr = msgService.messageURIToMsgHdr(newMessageURI);
+          if (isSynthetic) {
+            // A search results list with no gFolder; refresh() to get the
+            // updated list otherwise the message won't be there.
+            // XXX: this does not work very well.
+            setTimeout(() => {
+              parent.gViewWrapper.refresh();
+              if (doMessageUpdate) {
+                displayMessage(newMessageURI, gViewWrapper);
+              }
+            }, 500);
+          } else if (doMessageUpdate) {
+            // Select the message in the list.
+            parent.selectMessage(msgHdr);
+          }
+        } else if (doMessageUpdate) {
+          // Only for standalone messages (window or tab).
+          displayMessage(newMessageURI, gViewWrapper);
+        }
+      }
     }
   },
 };
 
@@ -624,20 +667,24 @@ var messageHistory = {
    * @type {MessageHistoryEntry[]}
    */
   _history: [],
   _currentIndex: -1,
+  lastSelectedRemovedMessageURI: null,
   /**
    * Remove the message from the history, cleaning up the state as needed in
    * the process.
    *
    * @param {nsIMsgFolder} parentFolder
    * @param {nsIMsgDBHdr} message
    */
   onMessageRemoved(parentFolder, message) {
+    const messageURI = parentFolder.generateMessageURI(message.messageKey);
+    if (gMessageURI == messageURI) {
+      this.lastSelectedRemovedMessageURI = messageURI;
+    }
     if (!this._history.length) {
       return;
     }
-    const messageURI = parentFolder.generateMessageURI(message.messageKey);
     const folderURI = parentFolder.URI;
     const oldLength = this._history.length;
     let removedEntriesBeforeFuture = 0;
     this._history = this._history.filter((entry, index) => {
diff --git a/mail/base/content/mailContext.inc.xhtml b/mail/base/content/mailContext.inc.xhtml
--- a/mail/base/content/mailContext.inc.xhtml
+++ b/mail/base/content/mailContext.inc.xhtml
@@ -348,8 +348,15 @@
           class="menu-iconic"
           data-l10n-id="mail-context-menu-threads"
           data-l10n-attrs="accesskey">
       <menupopup id="mailContext-threadsPopup">
+        <menuitem id="mailContext-unthreadMessage"
+                  data-l10n-id="mail-context-unthread-message"
+                  data-l10n-attrs="accesskey"/>
+        <menuitem id="mailContext-resetMessageThreading"
+                  data-l10n-id="mail-context-reset-message-threading"
+                  data-l10n-attrs="accesskey"/>
+        <menuseparator id="mailContext-thread-sep"/>
         <menuitem id="mailContext-ignoreThread"
                   type="checkbox"
                   label="&contextKillThreadMenu.label;"
                   accesskey="&contextKillThreadMenu.accesskey;"/>
diff --git a/mail/base/content/mailContext.js b/mail/base/content/mailContext.js
--- a/mail/base/content/mailContext.js
+++ b/mail/base/content/mailContext.js
@@ -470,8 +470,20 @@ var mailContextMenu = {
         count: numSelectedMessages,
       }
     );
 
+    showItem("mailContext-unthreadMessage", inThreadTree);
+    enableItem(
+      "mailContext-unthreadMessage",
+      gViewWrapper.showThreaded && numSelectedMessages == 1
+    );
+    showItem("mailContext-resetMessageThreading", inThreadTree);
+    enableItem(
+      "mailContext-resetMessageThreading",
+      gViewWrapper.showThreaded && numSelectedMessages == 1
+    );
+    showItem("mailContext-thread-sep", inThreadTree);
+
     checkItem(
       "mailContext-ignoreThread",
       folder?.msgDatabase.isIgnored(message?.messageKey)
     );
@@ -697,8 +709,24 @@ var mailContextMenu = {
           false
         );
         break;
 
+      // Message threading
+      case "mailContext-unthreadMessage":
+        window.threadPane.doUpdateThreading(
+          "unthread",
+          gDBView.selection.currentIndex,
+          null
+        );
+        break;
+      case "mailContext-resetMessageThreading":
+        window.threadPane.doUpdateThreading(
+          "reset",
+          gDBView.selection.currentIndex,
+          null
+        );
+        break;
+
       // Save/print/download
       default: {
         if (
           document.getElementById("mailContext-moveMenu").contains(event.target)
diff --git a/mail/locales/en-US/messenger/messenger.ftl b/mail/locales/en-US/messenger/messenger.ftl
--- a/mail/locales/en-US/messenger/messenger.ftl
+++ b/mail/locales/en-US/messenger/messenger.ftl
@@ -269,8 +269,16 @@ mail-context-menu-organize =
 mail-context-menu-threads =
     .label = Threads
     .accesskey = T
 
+mail-context-unthread-message =
+    .label = Unthread Message
+    .accesskey = U
+
+mail-context-reset-message-threading =
+    .label = Restore Original Threading
+    .accesskey = R
+
 context-menu-redirect-msg =
     .label = Redirect
 
 # This menu item is for canceling an NNTP message
diff --git a/mail/modules/ConversationOpener.sys.mjs b/mail/modules/ConversationOpener.sys.mjs
--- a/mail/modules/ConversationOpener.sys.mjs
+++ b/mail/modules/ConversationOpener.sys.mjs
@@ -15,9 +15,13 @@ export class ConversationOpener {
     }
     if (!message || !message.folder) {
       return false;
     }
-    return Gloda.isMessageIndexed(message);
+    try {
+      return Gloda.isMessageIndexed(message);
+    } catch (e) {
+      return false;
+    }
   }
 
   constructor(window) {
     this.window = window;
diff --git a/mail/modules/MessageEditor.sys.mjs b/mail/modules/MessageEditor.sys.mjs
--- a/mail/modules/MessageEditor.sys.mjs
+++ b/mail/modules/MessageEditor.sys.mjs
@@ -1525,14 +1525,26 @@ export class MessageEditor {
         this.origMsgHdrKeywords
       );
     }
 
+    const newMessageURI = newMsgHdr.folder.getUriForMsg(newMsgHdr);
+    const oldMessageURI = this.#messageURI;
+
     // Initialize this object again with the new message. This will allow
     // repeated operations on an updated message.
-    this.#initialize(newMsgHdr.folder.getUriForMsg(newMsgHdr));
+    this.#initialize(newMessageURI);
     await this.#getMessageDeferred.promise;
 
     this.#successFn(newMsgHdr);
+
+    this.log.debug("#onSuccess: oldMessageURI - " + oldMessageURI);
+    this.log.debug("#onSuccess: newMessageURI - " + newMessageURI);
+
+    // And update all other places with the new message.
+    Services.obs.notifyObservers(
+      { oldMessageURI, newMessageURI },
+      "message-replaced"
+    );
   }
 
   #onError(error) {
     this.log.error("#onError: error - " + (error ?? "logged to console"));
