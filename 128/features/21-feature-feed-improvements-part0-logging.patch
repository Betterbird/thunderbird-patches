# HG changeset patch
# User alta88@fixall.com
# Date 1736032531 -3600
# Parent  9a5b5844f331a46ea126dabd9b6bedfb6e4ad384
Fix feed vandalization - make logging useful again

diff --git a/mailnews/extensions/newsblog/Feed.sys.mjs b/mailnews/extensions/newsblog/Feed.sys.mjs
--- a/mailnews/extensions/newsblog/Feed.sys.mjs
+++ b/mailnews/extensions/newsblog/Feed.sys.mjs
@@ -127,11 +127,9 @@ Feed.prototype = {
     // a sanity check so we don't try opening mailto urls, imap urls, etc. that
     // the user may have tried to subscribe to as an rss feed.
     if (!lazy.FeedUtils.isValidScheme(this.url)) {
       // Simulate an invalid feed error.
-      lazy.FeedUtils.log.info(
-        "Feed.download: invalid protocol for - " + this.url
-      );
+      lazy.FeedUtils.log.log("download: invalid protocol for - " + this.url);
       this.onParseError(this);
       return;
     }
 
@@ -205,18 +203,18 @@ Feed.prototype = {
       Feed.prototype.onDownloadError(aEvent);
       return;
     }
 
-    lazy.FeedUtils.log.debug(
-      "Feed.onDownloaded: got a download, fileSize:url - " +
+    lazy.FeedUtils.log.log(
+      "onDownloaded: got a download, fileSize:url - " +
         aEvent.loaded +
         " : " +
         url
     );
     const feed = FeedCache.getFeed(url);
     if (!feed) {
       throw new Error(
-        "Feed.onDownloaded: error - couldn't retrieve feed from cache"
+        "onDownloaded: error - couldn't retrieve feed from cache"
       );
     }
 
     // If the server sends a Last-Modified header, store the property on the
@@ -266,10 +264,10 @@ Feed.prototype = {
         error = lazy.FeedUtils.kNewsBlogNoNewItems;
       } else {
         const [errType, errName] =
           lazy.FeedUtils.createTCPErrorFromFailedXHR(request);
-        lazy.FeedUtils.log.info(
-          "Feed.onDownloaded: request errType:errName:statusCode - " +
+        lazy.FeedUtils.log.log(
+          "onDownloadError: request errType:errName:statusCode - " +
             errType +
             ":" +
             errName +
             ":" +
@@ -335,18 +333,17 @@ Feed.prototype = {
   // nsIUrlListener methods for getDatabaseWithReparse().
   OnStartRunningUrl() {},
   OnStopRunningUrl(aUrl, aExitCode) {
     if (Components.isSuccessCode(aExitCode)) {
-      lazy.FeedUtils.log.debug(
-        "Feed.OnStopRunningUrl: rebuilt msgDatabase for " +
+      lazy.FeedUtils.log.log(
+        "OnStopRunningUrl: rebuilt msgDatabase for " +
           this.folder.name +
           " - " +
           this.folder.filePath.path
       );
     } else {
       lazy.FeedUtils.log.error(
-        "Feed.OnStopRunningUrl: rebuild msgDatabase failed, " +
-          "error " +
+        "OnStopRunningUrl: rebuild msgDatabase failed, error " +
           aExitCode +
           ", for " +
           this.folder.name +
           " - " +
@@ -499,9 +496,9 @@ Feed.prototype = {
     for (const id in ds.data) {
       const item = ds.data[id];
       if (item.feedURLs.includes(this.url)) {
         item.valid = false;
-        lazy.FeedUtils.log.trace("Feed.invalidateItems: item - " + id);
+        lazy.FeedUtils.log.debug("invalidateItems: item - " + id);
       }
     }
     ds.saveSoon();
   },
@@ -516,9 +513,9 @@ Feed.prototype = {
    * @returns {void}
    */
   removeInvalidItems(aDeleteFeed) {
     const ds = lazy.FeedUtils.getItemsDS(this.server);
-    lazy.FeedUtils.log.debug("Feed.removeInvalidItems: for url - " + this.url);
+    lazy.FeedUtils.log.log("removeInvalidItems: for url - " + this.url);
 
     const currentTime = new Date().getTime();
     for (const id in ds.data) {
       const item = ds.data[id];
@@ -535,14 +532,14 @@ Feed.prototype = {
         // Don't immediately purge items in active feeds; do so for deleted feeds.
         continue;
       }
 
-      lazy.FeedUtils.log.trace("Feed.removeInvalidItems: item - " + id);
+      lazy.FeedUtils.log.debug("removeInvalidItems: item - " + id);
       // Detach the item from this feed (it could be shared by multiple feeds).
       item.feedURLs = item.feedURLs.filter(url => url != this.url);
       if (item.feedURLs.length > 0) {
-        lazy.FeedUtils.log.debug(
-          "Feed.removeInvalidItems: " +
+        lazy.FeedUtils.log.log(
+          "removeInvalidItems: " +
             id +
             " is from more than one feed; only the reference to" +
             " this feed removed"
         );
@@ -563,10 +560,10 @@ Feed.prototype = {
         .QueryInterface(Ci.nsIMsgLocalMailFolder)
         .createLocalSubfolder(this.folderName);
     } catch (ex) {
       // An error creating.
-      lazy.FeedUtils.log.info(
-        "Feed.createFolder: error creating folder - '" +
+      lazy.FeedUtils.log.warn(
+        "createFolder: error creating folder - '" +
           this.folderName +
           "' in parent folder " +
           this.server.rootMsgFolder.filePath.path +
           " -- " +
@@ -667,10 +664,10 @@ Feed.prototype = {
 
       // Flush any feed item changes to disk.
       const ds = lazy.FeedUtils.getItemsDS(aFeed.server);
       ds.saveSoon();
-      lazy.FeedUtils.log.debug(
-        "Feed.cleanupParsingState: items stored - " + this.itemsStored
+      lazy.FeedUtils.log.log(
+        "cleanupParsingState: items stored - " + this.itemsStored
       );
     }
 
     // Force the xml http request to go away.  This helps reduce some nasty
diff --git a/mailnews/extensions/newsblog/FeedItem.sys.mjs b/mailnews/extensions/newsblog/FeedItem.sys.mjs
--- a/mailnews/extensions/newsblog/FeedItem.sys.mjs
+++ b/mailnews/extensions/newsblog/FeedItem.sys.mjs
@@ -122,10 +122,10 @@ FeedItem.prototype = {
         stored: false,
       };
       ds.data[this.id] = resource;
       if (!this.content) {
-        lazy.FeedUtils.log.trace(
-          "FeedItem.store: " +
+        lazy.FeedUtils.log.debug(
+          "store: " +
             this.identity +
             " no content; storing description or title"
         );
         this.content = this.description || this.title;
@@ -148,18 +148,18 @@ FeedItem.prototype = {
 
   findStoredResource() {
     // Checks to see if the item has already been stored in its feed's
     // message folder.
-    lazy.FeedUtils.log.trace(
-      "FeedItem.findStoredResource: checking if stored - " + this.identity
+    lazy.FeedUtils.log.debug(
+      "findStoredResource: checking if stored - " + this.identity
     );
 
     const server = this.feed.server;
     const folder = this.feed.folder;
 
     if (!folder) {
       lazy.FeedUtils.log.debug(
-        "FeedItem.findStoredResource: folder '" +
+        "findStoredResource: folder '" +
           this.feed.folderName +
           "' doesn't exist; creating as child of " +
           server.rootMsgFolder.prettyName +
           "\n"
@@ -170,13 +170,13 @@ FeedItem.prototype = {
 
     const ds = lazy.FeedUtils.getItemsDS(server);
     const item = ds.data[this.id];
     if (!item || !item.stored) {
-      lazy.FeedUtils.log.trace("FeedItem.findStoredResource: not stored");
+      lazy.FeedUtils.log.debug("findStoredResource: not stored");
       return null;
     }
 
-    lazy.FeedUtils.log.trace("FeedItem.findStoredResource: already stored");
+    lazy.FeedUtils.log.debug("findStoredResource: already stored");
     return item;
   },
 
   markValid(resource) {
@@ -196,10 +196,10 @@ FeedItem.prototype = {
     resource.stored = true;
   },
 
   writeToFolder() {
-    lazy.FeedUtils.log.trace(
-      "FeedItem.writeToFolder: " +
+    lazy.FeedUtils.log.debug(
+      "writeToFolder: " +
         this.identity +
         " writing to message folder " +
         this.feed.name
     );
@@ -299,10 +299,10 @@ FeedItem.prototype = {
         "\n" +
         this.content;
     }
 
-    lazy.FeedUtils.log.trace(
-      "FeedItem.writeToFolder: " +
+    lazy.FeedUtils.log.debug(
+      "writeToFolder: " +
         this.identity +
         " is " +
         source.length +
         " characters long"
diff --git a/mailnews/extensions/newsblog/FeedParser.sys.mjs b/mailnews/extensions/newsblog/FeedParser.sys.mjs
--- a/mailnews/extensions/newsblog/FeedParser.sys.mjs
+++ b/mailnews/extensions/newsblog/FeedParser.sys.mjs
@@ -42,9 +42,9 @@ FeedParser.prototype = {
     if (doc.namespaceURI == lazy.FeedUtils.MOZ_PARSERERROR_NS) {
       // Gecko caught a basic parsing error.
       const errStr =
         doc.firstChild.textContent + "\n" + doc.firstElementChild.textContent;
-      lazy.FeedUtils.log.info("FeedParser.parseFeed: - " + errStr);
+      lazy.FeedUtils.log.warn("parseFeed: - " + errStr);
       aFeed.onParseError(aFeed);
       return [];
     } else if (aDOM.querySelector("redirect")) {
       // Check for RSS2.0 redirect document.
@@ -59,43 +59,31 @@ FeedParser.prototype = {
       doc.namespaceURI == lazy.FeedUtils.RDF_SYNTAX_NS &&
       doc.getElementsByTagNameNS(lazy.FeedUtils.RSS_NS, "channel")[0]
     ) {
       aFeed.mFeedType = "RSS_1.xRDF";
-      lazy.FeedUtils.log.debug(
-        "FeedParser.parseFeed: type:url - " +
-          aFeed.mFeedType +
-          " : " +
-          aFeed.url
+      lazy.FeedUtils.log.log(
+        "parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
       );
 
       return this.parseAsRSS1(aFeed, aDOM);
     } else if (doc.namespaceURI == lazy.FeedUtils.ATOM_03_NS) {
       aFeed.mFeedType = "ATOM_0.3";
-      lazy.FeedUtils.log.debug(
-        "FeedParser.parseFeed: type:url - " +
-          aFeed.mFeedType +
-          " : " +
-          aFeed.url
+      lazy.FeedUtils.log.log(
+        "parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
       );
       return this.parseAsAtom(aFeed, aDOM);
     } else if (doc.namespaceURI == lazy.FeedUtils.ATOM_IETF_NS) {
       aFeed.mFeedType = "ATOM_IETF";
-      lazy.FeedUtils.log.debug(
-        "FeedParser.parseFeed: type:url - " +
-          aFeed.mFeedType +
-          " : " +
-          aFeed.url
+      lazy.FeedUtils.log.log(
+        "parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
       );
       return this.parseAsAtomIETF(aFeed, aDOM);
     } else if (
       doc.getElementsByTagNameNS(lazy.FeedUtils.RSS_090_NS, "channel")[0]
     ) {
       aFeed.mFeedType = "RSS_0.90";
-      lazy.FeedUtils.log.debug(
-        "FeedParser.parseFeed: type:url - " +
-          aFeed.mFeedType +
-          " : " +
-          aFeed.url
+      lazy.FeedUtils.log.log(
+        "parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
       );
       return this.parseAsRSS2(aFeed, aDOM);
     }
 
@@ -106,10 +94,10 @@ FeedParser.prototype = {
       aFeed.mFeedType = "RSS_" + rssVer;
     } else {
       aFeed.mFeedType = "RSS_0.9x?";
     }
-    lazy.FeedUtils.log.debug(
-      "FeedParser.parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
+    lazy.FeedUtils.log.log(
+      "parseFeed: type:url - " + aFeed.mFeedType + " : " + aFeed.url
     );
     return this.parseAsRSS2(aFeed, aDOM);
   },
 
@@ -140,10 +128,9 @@ FeedParser.prototype = {
     }
 
     if (!(aFeed.title || aFeed.description)) {
       lazy.FeedUtils.log.error(
-        "FeedParser.parseAsRSS2: missing mandatory element " +
-          "<title> and <description>"
+        "parseAsRSS2: missing mandatory element " + "<title> and <description>"
       );
       // The RSS2 spec requires a <link> as well, but we can do without it
       // so ignore the case of (valid) link missing.
       aFeed.onParseError(aFeed);
@@ -160,11 +147,9 @@ FeedParser.prototype = {
     // XXX use getElementsByTagNameNS for now; childrenByTagNameNS would be
     // better, but RSS .90 is still with us.
     let itemNodes = aDOM.getElementsByTagNameNS(nsURI, "item");
     itemNodes = itemNodes ? itemNodes : [];
-    lazy.FeedUtils.log.debug(
-      "FeedParser.parseAsRSS2: items to parse - " + itemNodes.length
-    );
+    lazy.FeedUtils.log.log("parseAsRSS2: items to parse - " + itemNodes.length);
 
     for (const itemNode of itemNodes) {
       if (!itemNode.childElementCount) {
         continue;
@@ -230,10 +215,10 @@ FeedParser.prototype = {
       item.description = this.getNodeValueFormatted(tags ? tags[0] : null);
       tags = this.childrenByTagNameNS(itemNode, nsURI, "title");
       item.title = this.getNodeValue(tags ? tags[0] : null);
       if (!(item.title || item.description)) {
-        lazy.FeedUtils.log.info(
-          "FeedParser.parseAsRSS2: <item> missing mandatory " +
+        lazy.FeedUtils.log.log(
+          "parseAsRSS2: <item> missing mandatory " +
             "element, either <title> or <description>; skipping"
         );
         continue;
       }
@@ -426,9 +411,9 @@ FeedParser.prototype = {
     feed.link = this.validLink(this.getNodeValue(linkNode)) || feed.url;
 
     if (!(feed.title || feed.description) || !feed.link) {
       lazy.FeedUtils.log.error(
-        "FeedParser.parseAsRSS1: missing mandatory element " +
+        "parseAsRSS1: missing mandatory element " +
           "<title> and <description>, or <link>"
       );
       feed.onParseError(feed);
       return [];
@@ -486,10 +471,10 @@ FeedParser.prototype = {
       if (!item.title && item.description) {
         item.title = this.stripTags(item.description).substr(0, 150);
       }
       if (!item.url || !item.title) {
-        lazy.FeedUtils.log.info(
-          "FeedParser.parseAsRSS1: <item> missing mandatory " +
+        lazy.FeedUtils.log.log(
+          "parseAsRSS1: <item> missing mandatory " +
             "element <item rdf:about> and <link>, or <title> and " +
             "no <description>; skipping"
         );
         continue;
@@ -528,10 +513,10 @@ FeedParser.prototype = {
       item.content = this.getNodeValueFormatted(contentNode);
 
       this.parsedItems.push(item);
     }
-    lazy.FeedUtils.log.debug(
-      "FeedParser.parseAsRSS1: items parsed - " + this.parsedItems.length
+    lazy.FeedUtils.log.log(
+      "parseAsRSS1: items parsed - " + this.parsedItems.length
     );
 
     return this.parsedItems;
   },
@@ -566,9 +551,9 @@ FeedParser.prototype = {
     aFeed.link = this.validLink(this.findAtomLink("alternate", tags));
 
     if (!aFeed.title) {
       lazy.FeedUtils.log.error(
-        "FeedParser.parseAsAtom: missing mandatory element <title>"
+        "parseAsAtom: missing mandatory element <title>"
       );
       aFeed.onParseError(aFeed);
       return [];
     }
@@ -585,11 +570,9 @@ FeedParser.prototype = {
       lazy.FeedUtils.ATOM_03_NS,
       "entry"
     );
     items = items ? items : [];
-    lazy.FeedUtils.log.debug(
-      "FeedParser.parseAsAtom: items to parse - " + items.length
-    );
+    lazy.FeedUtils.log.log("parseAsAtom: items to parse - " + items.length);
 
     for (const itemNode of items) {
       if (!itemNode.childElementCount) {
         continue;
@@ -626,10 +609,10 @@ FeedParser.prototype = {
         this.getNodeValue(tags ? tags[0] : null) ||
         (item.description ? item.description.substr(0, 150) : null);
       if (!item.title || !item.id) {
         // We're lenient about other mandatory tags, but insist on these.
-        lazy.FeedUtils.log.info(
-          "FeedParser.parseAsAtom: <entry> missing mandatory " +
+        lazy.FeedUtils.log.log(
+          "parseAsAtom: <entry> missing mandatory " +
             "element <id>, or <title> and no <summary>; skipping"
         );
         continue;
       }
@@ -813,11 +796,9 @@ FeedParser.prototype = {
       lazy.FeedUtils.ATOM_IETF_NS,
       "entry"
     );
     items = items ? items : [];
-    lazy.FeedUtils.log.debug(
-      "FeedParser.parseAsAtomIETF: items to parse - " + items.length
-    );
+    lazy.FeedUtils.log.log("parseAsAtomIETF: items to parse - " + items.length);
 
     for (const itemNode of items) {
       if (!itemNode.childElementCount) {
         continue;
@@ -889,10 +870,10 @@ FeedParser.prototype = {
           (item.description ? item.description.substr(0, 150) : null)
       );
       if (!item.title || !item.id) {
         // We're lenient about other mandatory tags, but insist on these.
-        lazy.FeedUtils.log.info(
-          "FeedParser.parseAsAtomIETF: <entry> missing mandatory " +
+        lazy.FeedUtils.log.log(
+          "parseAsAtomIETF: <entry> missing mandatory " +
             "element <id>, or <title> and no <summary>; skipping"
         );
         continue;
       }
@@ -964,11 +945,9 @@ FeedParser.prototype = {
         item.author = author ? ["<" + author + ">"] : item.author;
       } else {
         item.author = authors;
       }
-      lazy.FeedUtils.log.trace(
-        "FeedParser.parseAsAtomIETF: author(s) - " + item.author
-      );
+      lazy.FeedUtils.log.debug("parseAsAtomIETF: author(s) - " + item.author);
 
       tags = this.childrenByTagNameNS(
         itemNode,
         lazy.FeedUtils.ATOM_IETF_NS,
@@ -1136,10 +1115,10 @@ FeedParser.prototype = {
       newUrl != oldUrl &&
       lazy.FeedUtils.isValidScheme(newUrl) &&
       lazy.FeedUtils.changeUrlForFeed(aFeed, newUrl)
     ) {
-      lazy.FeedUtils.log.info(
-        "FeedParser.isPermanentRedirect: found <" +
+      lazy.FeedUtils.log.warn(
+        "isPermanentRedirect: found <" +
           tagName +
           "> tag; updated feed url from: " +
           oldUrl +
           " to: " +
@@ -1197,20 +1176,18 @@ FeedParser.prototype = {
   cleanAuthorName(authorString) {
     if (!authorString) {
       return "";
     }
-    lazy.FeedUtils.log.trace(
-      "FeedParser.cleanAuthor: author1 - " + authorString
-    );
+    lazy.FeedUtils.log.debug("cleanAuthor: author1 - " + authorString);
     let author = authorString
       .replace(/[\n\r\t]+/g, " ")
       .replace(/"/g, '\\"')
       .trim();
     // If the name contains special chars, quote it.
     if (author.match(/[<>@,"]/)) {
       author = '"' + author + '"';
     }
-    lazy.FeedUtils.log.trace("FeedParser.cleanAuthor: author2 - " + author);
+    lazy.FeedUtils.log.debug("cleanAuthor: author2 - " + author);
 
     return author;
   },
 
@@ -1396,10 +1373,10 @@ FeedParser.prototype = {
       lazy.FeedUtils.RSS_SY_NS,
       "updateBase"
     );
     const updateBase = this.getNodeValue(tag ? tag[0] : null) || "";
-    lazy.FeedUtils.log.debug(
-      "FeedParser.findSyUpdateTags: updatePeriod:updateFrequency - " +
+    lazy.FeedUtils.log.log(
+      "findSyUpdateTags: updatePeriod:updateFrequency - " +
         updatePeriod +
         ":" +
         updateFrequency
     );
@@ -1475,10 +1452,10 @@ FeedParser.prototype = {
       // It's an integer, so maybe it's a timestamp.
       const d = new Date(parseInt(dateString) * 1000);
       const now = new Date();
       const yeardiff = now.getFullYear() - d.getFullYear();
-      lazy.FeedUtils.log.trace(
-        "FeedParser.dateRescue: Rescue Timestamp date - " +
+      lazy.FeedUtils.log.debug(
+        "dateRescue: Rescue Timestamp date - " +
           d.toString() +
           " ,year diff - " +
           yeardiff
       );
diff --git a/mailnews/extensions/newsblog/FeedUtils.sys.mjs b/mailnews/extensions/newsblog/FeedUtils.sys.mjs
--- a/mailnews/extensions/newsblog/FeedUtils.sys.mjs
+++ b/mailnews/extensions/newsblog/FeedUtils.sys.mjs
@@ -166,16 +166,13 @@ export var FeedUtils = {
     // Save new accounts in case of a crash.
     try {
       MailServices.accounts.saveAccountInfo();
     } catch (ex) {
-      this.log.error(
-        "FeedUtils.createRssAccount: error on saveAccountInfo - " + ex
-      );
+      this.log.error("createRssAccount: error on saveAccountInfo - " + ex);
     }
 
     this.log.debug(
-      "FeedUtils.createRssAccount: " +
-        account.incomingServer.rootFolder.prettyName
+      "createRssAccount: " + account.incomingServer.rootFolder.prettyName
     );
 
     return account;
   },
@@ -195,10 +192,10 @@ export var FeedUtils = {
     if (sub === undefined) {
       return false;
     }
     const folder = sub.destFolder;
-    this.log.info(
-      "FeedUtils.feedAlreadyExists: feed url " +
+    this.log.warn(
+      "feedAlreadyExists: feed url " +
         aUrl +
         " subscribed in folder url " +
         decodeURI(folder)
     );
@@ -602,10 +599,10 @@ export var FeedUtils = {
       return false;
     }
 
     if (this.feedAlreadyExists(aNewUrl, aFeed.server)) {
-      this.log.info(
-        "FeedUtils.changeUrlForFeed: new feed url " +
+      this.log.warn(
+        "changeUrlForFeed: new feed url " +
           aNewUrl +
           " already subscribed in account " +
           aFeed.server.prettyName
       );
@@ -737,9 +734,9 @@ export var FeedUtils = {
     }
 
     // Force a reparse.
     FeedUtils.log.debug(
-      "checkMsgDb: rebuild msgDatabase for " +
+      "isMsgDatabaseOpenable: rebuild msgDatabase for " +
         aFolder.name +
         " - " +
         aFolder.filePath.path
     );
@@ -1039,20 +1036,20 @@ export var FeedUtils = {
    *
    * @returns {void}
    */
   updateSubscriptionsDS(aFolder, aOrigFolder, aAction) {
-    this.log.debug(
-      "FeedUtils.updateSubscriptionsDS: " +
+    this.log.log(
+      "updateSubscriptionsDS: " +
         "\nfolder changed - " +
         aAction +
         "\nnew folder  - " +
         aFolder.filePath.path +
         "\norig folder - " +
         aOrigFolder.filePath.path
     );
 
-    this.log.debug(
-      `updateSubscriptions(${aFolder.name}, ${aOrigFolder.name}, ${aAction})`
+    this.log.log(
+      `updateSubscriptionsDS(${aFolder.name}, ${aOrigFolder.name}, ${aAction})`
     );
 
     if (aFolder.server.type != "rss" || FeedUtils.isInTrash(aOrigFolder)) {
       // Target not a feed account folder; nothing to do, or move/rename in
@@ -1104,9 +1101,9 @@ export var FeedUtils = {
     aOrigFolder,
     aNewAncestorURI,
     aOrigAncestorURI
   ) {
-    this.log.debug(
+    this.log.log(
       "updateFolderChangeInFeedsDS: " +
         "\naFolder       - " +
         aFolder.URI +
         "\naOrigFolder   - " +
@@ -1122,15 +1119,15 @@ export var FeedUtils = {
     const origURI =
       aNewAncestorURI && aOrigAncestorURI
         ? folderURI.replace(aNewAncestorURI, aOrigAncestorURI)
         : aOrigFolder.URI;
-    this.log.debug("updateFolderChangeInFeedsDS: urls origURI  - " + origURI);
+    this.log.log("updateFolderChangeInFeedsDS: urls origURI  - " + origURI);
 
     // Get affected feed subscriptions - all the ones in the original folder.
     const origDS = this.getSubscriptionsDS(aOrigFolder.server);
     const affectedSubs = origDS.data.filter(sub => sub.destFolder == origURI);
     if (affectedSubs.length == 0) {
-      this.log.debug("updateFolderChangeInFeedsDS: no feedUrls in this folder");
+      this.log.log("updateFolderChangeInFeedsDS: no feedUrls in this folder");
       return;
     }
 
     if (this.isInTrash(aFolder)) {
@@ -1337,9 +1334,9 @@ export var FeedUtils = {
     // above is reset immediately.
     const doBiff = Services.prefs.getBoolPref(
       serverPrefStr + ".check_new_mail"
     );
-    FeedUtils.log.debug(
+    FeedUtils.log.log(
       "initAcct: " + aServer.prettyName + " doBiff - " + doBiff
     );
     this.pauseFeedFolderUpdates(aServer.rootFolder, !doBiff, false);
   },
@@ -1522,9 +1519,9 @@ export var FeedUtils = {
     if (dt.getData(types[0])) {
       // The url is the data.
       uri = Services.io.newURI(dt.mozGetDataAt(types[0], 0));
       validUri = this.isValidScheme(uri);
-      this.log.trace(
+      this.log.debug(
         "getFeedUriFromDataTransfer: dropEffect:type:value - " +
           dt.dropEffect +
           " : " +
           types[0] +
@@ -1534,9 +1531,9 @@ export var FeedUtils = {
     } else if (dt.getData(types[1])) {
       // The url is the first part of the data, the second part is random.
       uri = Services.io.newURI(dt.mozGetDataAt(types[1], 0).split("\n")[0]);
       validUri = this.isValidScheme(uri);
-      this.log.trace(
+      this.log.debug(
         "getFeedUriFromDataTransfer: dropEffect:type:value - " +
           dt.dropEffect +
           " : " +
           types[0] +
@@ -1546,9 +1543,9 @@ export var FeedUtils = {
     } else {
       // Go through the types and see if there's a url; get the first one.
       for (let i = 0; i < dt.types.length; i++) {
         const spec = dt.mozGetDataAt(dt.types[i], 0);
-        this.log.trace(
+        this.log.debug(
           "getFeedUriFromDataTransfer: dropEffect:index:type:value - " +
             dt.dropEffect +
             " : " +
             i +
@@ -1865,18 +1862,19 @@ export var FeedUtils = {
     downloaded(feed, aErrorCode, aDisable) {
       const folderName = feed.folder
         ? feed.folder.name
         : feed.server.rootFolder.prettyName;
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "downloaded: " +
-          (this.mSubscribeMode ? "Subscribe " : "Update ") +
+          (this.mSubscribeMode ? "[Subscribe] " : "[Update] ") +
           "errorCode:folderName:feedUrl - " +
           aErrorCode +
           " : " +
           folderName +
           " : " +
           feed.url
       );
+      let logLevel = "log";
       if (this.mSubscribeMode) {
         if (aErrorCode == FeedUtils.kNewsBlogSuccess) {
           // Add the feed to the databases.
           FeedUtils.addFeed(feed);
@@ -1938,15 +1936,9 @@ export var FeedUtils = {
 
             feed.options = options;
             FeedUtils.setStatus(feed.folder, feed.url, "enabled", false);
             FeedUtils.log.warn(
-              "downloaded: updates disabled due to error, " +
-                "check the url - " +
-                feed.url
-            );
-          } else {
-            FeedUtils.log.warn(
-              "downloaded: update failed, check the url - " + feed.url
+              "downloaded: updates disabled due to error on url - " + feed.url
             );
           }
         }
 
@@ -1962,9 +1954,9 @@ export var FeedUtils = {
             // This feed may belong to a folder with multiple other feeds, some
             // of which may not yet be finished, so free only if the folder is
             // no longer busy.
             feed.folder.msgDatabase = null;
-            FeedUtils.log.debug(
+            FeedUtils.log.log(
               "downloaded: msgDatabase freed - " + feed.folder.name
             );
           }
         }
@@ -1988,43 +1980,48 @@ export var FeedUtils = {
           message = FeedUtils.strings.formatStringFromName(
             "newsblog-feedNotValid",
             [feed.url]
           );
+          logLevel = "warn";
           break;
         case FeedUtils.kNewsBlogRequestFailure:
           message = FeedUtils.strings.formatStringFromName(
             "newsblog-networkError",
             [feed.url]
           );
+          logLevel = "warn";
           break;
         case FeedUtils.kNewsBlogFileError:
           message = FeedUtils.strings.GetStringFromName(
             "subscribe-errorOpeningFile"
           );
+          logLevel = "warn";
           break;
         case FeedUtils.kNewsBlogBadCertError: {
           const host = Services.io.newURI(feed.url).host;
           message = FeedUtils.strings.formatStringFromName(
             "newsblog-badCertError",
             [host]
           );
+          logLevel = "warn";
           break;
         }
         case FeedUtils.kNewsBlogNoAuthError:
           message = FeedUtils.strings.formatStringFromName(
             "newsblog-noAuthError",
             [feed.url]
           );
+          logLevel = "warn";
           break;
       }
 
       if (message) {
         const location =
           FeedUtils.getFolderPrettyPath(feed.folder || feed.server.rootFolder) +
           " -> ";
-        FeedUtils.log.info(
+        FeedUtils.log[`${logLevel}`](
           "downloaded: " +
-            (this.mSubscribeMode ? "Subscribe: " : "Update: ") +
+            (this.mSubscribeMode ? "[Subscribe] " : "[Update] ") +
             location +
             message
         );
       }
@@ -2038,9 +2035,9 @@ export var FeedUtils = {
 
       if (this.mNumPendingFeedDownloads == 0) {
         this.mFeeds = {};
         this.mSubscribeMode = false;
-        FeedUtils.log.debug("downloaded: all pending downloads finished");
+        FeedUtils.log.log("downloaded: all pending downloads finished");
 
         // Should we do this on a timer so the text sticks around for a little
         // while?  It doesn't look like we do it on a timer for newsgroups so
         // we'll follow that model.  Don't clear the status text if we just
@@ -2117,11 +2114,14 @@ export var FeedUtils = {
     },
   },
 };
 
+// Change maxLogLevelPref from default Warn to Log or Debug for finer
+// granularity. Within Log, a regular .log is differentiated from .info in the
+// console. A .log was formerly .debug and .debug was formerly .trace.
 ChromeUtils.defineLazyGetter(FeedUtils, "log", function () {
   return console.createInstance({
-    prefix: "feeds",
+    prefix: "Feeds",
     maxLogLevelPref: "feeds.loglevel",
   });
 });
 
diff --git a/mailnews/extensions/newsblog/feed-subscriptions.js b/mailnews/extensions/newsblog/feed-subscriptions.js
--- a/mailnews/extensions/newsblog/feed-subscriptions.js
+++ b/mailnews/extensions/newsblog/feed-subscriptions.js
@@ -441,9 +441,9 @@ var FeedSubscriptions = {
           win.addFeed(results.dropUrl, null, true, null, win.kSubscribeMode);
         }, 0);
 
         const folderItem = this.getItemAtIndex(aRow);
-        FeedUtils.log.debug(
+        FeedUtils.log.log(
           "drop: folder, url - " +
             folderItem.folder.name +
             ", " +
             results.dropUrl
@@ -854,9 +854,9 @@ var FeedSubscriptions = {
       for (let i = 0; i < aItem.children.length; i++) {
         if (aItem.children[i].container && containsFolder(aItem.children[i])) {
           if (removeIt && aItem.children[i].url == folderURI) {
             // Get all occurrences in the tree cache arrays.
-            FeedUtils.log.debug(
+            FeedUtils.log.log(
               "selectFolder: delete in cache, " +
                 "parent:children:item:index - " +
                 aItem.name +
                 ":" +
@@ -866,9 +866,9 @@ var FeedSubscriptions = {
                 ":" +
                 i
             );
             aItem.children.splice(i, 1);
-            FeedUtils.log.debug(
+            FeedUtils.log.log(
               "selectFolder: deleted in cache, " +
                 "parent:children - " +
                 aItem.name +
                 ":" +
@@ -890,9 +890,9 @@ var FeedSubscriptions = {
               aItem.children = FeedSubscriptions.folderItemSorter(
                 aItem.children
               );
             }
-            FeedUtils.log.trace(
+            FeedUtils.log.debug(
               "selectFolder: parentName:newFolderName:newFolderItem - " +
                 aItem.name +
                 ":" +
                 newItem.name +
@@ -968,9 +968,9 @@ var FeedSubscriptions = {
     } else {
       this.mView.tree.ensureRowIsVisible(this.mView.rowCount - 1);
     }
 
-    FeedUtils.log.debug(
+    FeedUtils.log.log(
       "selectFolder: curIndex:firstVisRow:" +
         "curFirstVisRow:curLastVisRow:rowCount - " +
         this.mView.selection.currentIndex +
         ":" +
@@ -2179,9 +2179,9 @@ var FeedSubscriptions = {
         const url = validationQuery + encodeURIComponent(feedLocation);
 
         this.mMainWin.focus();
         this.mMainWin.openContentTab(url);
-        FeedUtils.log.debug("checkValidation: query url - " + url);
+        FeedUtils.log.log("checkValidation: query url - " + url);
       }
     }
     aEvent.stopPropagation();
   },
@@ -2231,9 +2231,9 @@ var FeedSubscriptions = {
         return;
       }
 
       const parentFolder = aFolder.isServer ? aFolder : aFolder.parent;
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "folderAdded: folder:parent - " +
           aFolder.name +
           ":" +
           (parentFolder ? parentFolder.filePath.path : "(null)")
@@ -2305,9 +2305,9 @@ var FeedSubscriptions = {
       if (aFolder.server.type != "rss" || FeedUtils.isInTrash(aFolder)) {
         return;
       }
 
-      FeedUtils.log.debug("folderDeleted: folder - " + aFolder.name);
+      FeedUtils.log.log("folderDeleted: folder - " + aFolder.name);
       if (!this.feedWindow) {
         return;
       }
 
@@ -2339,9 +2339,9 @@ var FeedSubscriptions = {
       if (aNewFolder.server.type != "rss" || FeedUtils.isInTrash(aNewFolder)) {
         return;
       }
 
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "folderRenamed: old:new - " + aOrigFolder.name + ":" + aNewFolder.name
       );
       if (!this.feedWindow) {
         return;
@@ -2400,9 +2400,9 @@ var FeedSubscriptions = {
       if (aDestFolder.server.type != "rss") {
         return;
       }
 
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "folderMoveCopyCompleted: move:src:dest - " +
           aMove +
           ":" +
           aSrcFolder.name +
@@ -2661,9 +2661,9 @@ var FeedSubscriptions = {
     const indentString = " ".repeat(indentLevel - 2);
 
     let feedOutline;
     for (const folder of baseFolder.subFolders) {
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "generateOutlineList: folder - " + folder.filePath.path
       );
       if (
         !(folder instanceof Ci.nsIMsgFolder) ||
@@ -2672,14 +2672,14 @@ var FeedSubscriptions = {
       ) {
         continue;
       }
 
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "generateOutlineList: CONTINUE folderName - " + folder.name
       );
 
       if (folder.hasSubFolders) {
-        FeedUtils.log.debug(
+        FeedUtils.log.log(
           "generateOutlineList: has subfolders - " + folder.name
         );
         // Recurse.
         this.generateOutlineList(folder, parent, indentLevel);
@@ -2687,9 +2687,9 @@ var FeedSubscriptions = {
 
       // Add outline elements with xmlUrls.
       const feeds = this.getFeedsInFolder(folder);
       for (const feed of feeds) {
-        FeedUtils.log.debug(
+        FeedUtils.log.log(
           "generateOutlineList: folder has FEED url - " +
             folder.name +
             " : " +
             feed.url
@@ -2708,9 +2708,9 @@ var FeedSubscriptions = {
     }
 
     let folderOutline, feedOutline;
     for (const folder of baseFolder.subFolders) {
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "generateOutlineStruct: folder - " + folder.filePath.path
       );
       if (
         !(folder instanceof Ci.nsIMsgFolder) ||
@@ -2719,9 +2719,9 @@ var FeedSubscriptions = {
       ) {
         continue;
       }
 
-      FeedUtils.log.debug(
+      FeedUtils.log.log(
         "generateOutlineStruct: CONTINUE folderName - " + folder.name
       );
 
       // Make a folder outline element.
@@ -2729,9 +2729,9 @@ var FeedSubscriptions = {
       folderOutline.setAttribute("title", folder.prettyName);
       this.generatePPSpace(parent, indentString(indentLevel + 2));
 
       if (folder.hasSubFolders) {
-        FeedUtils.log.debug(
+        FeedUtils.log.log(
           "generateOutlineStruct: has subfolders - " + folder.name
         );
         // Recurse.
         this.generateOutlineStruct(folder, folderOutline, indentLevel + 2);
@@ -2739,9 +2739,9 @@ var FeedSubscriptions = {
 
       const feeds = this.getFeedsInFolder(folder);
       for (const feed of feeds) {
         // Add feed outline elements with xmlUrls.
-        FeedUtils.log.debug(
+        FeedUtils.log.log(
           "generateOutlineStruct: folder has FEED url - " +
             folder.name +
             " : " +
             feed.url
@@ -2822,9 +2822,9 @@ var FeedSubscriptions = {
       return false;
     }
 
     let opmlDom, statusReport;
-    FeedUtils.log.debug(
+    FeedUtils.log.log(
       "importOPMLFile: fileName:fileUrl - " + aFile.leafName + ":" + aFileUrl
     );
     const request = new Request(aFileUrl);
     await fetch(request)
@@ -2892,9 +2892,9 @@ var FeedSubscriptions = {
     let feedsAdded = 0;
     let rssOutlines = 0;
 
     function processor(aParentNode, aParentFolder) {
-      FeedUtils.log.trace(
+      FeedUtils.log.debug(
         "importOPMLOutlines: PROCESSOR tag:name:children - " +
           aParentNode.tagName +
           ":" +
           aParentNode.getAttribute("text") +
@@ -2912,9 +2912,9 @@ var FeedSubscriptions = {
         }
 
         outline = aParentNode.firstElementChild;
         if (outline.tagName != "outline") {
-          FeedUtils.log.info(
+          FeedUtils.log.warn(
             "importOPMLOutlines: skipping, node is not an " +
               "<outline> - <" +
               outline.tagName +
               ">"
@@ -2933,9 +2933,9 @@ var FeedSubscriptions = {
           // A feed outline.
           feedUrl =
             outline.getAttribute("xmlUrl") || outline.getAttribute("url");
           if (!feedUrl) {
-            FeedUtils.log.info(
+            FeedUtils.log.warn(
               "importOPMLOutlines: skipping, type=rss <outline> " +
                 "has no url - " +
                 outlineName
             );
@@ -2945,9 +2945,9 @@ var FeedSubscriptions = {
           rssOutlines++;
           feedFolder = aParentFolder;
 
           if (FeedUtils.feedAlreadyExists(feedUrl, rssServer)) {
-            FeedUtils.log.info(
+            FeedUtils.log.warn(
               "importOPMLOutlines: feed already subscribed in account " +
                 rssServer.prettyName +
                 ", url - " +
                 feedUrl
@@ -3014,9 +3014,9 @@ var FeedSubscriptions = {
             if (feed && feed.url && feed.server) {
               FeedUtils.deleteFeed(feed);
             }
 
-            FeedUtils.log.info(
+            FeedUtils.log.warn(
               "importOPMLOutlines: skipping, error creating folder - '" +
                 feed.folderName +
                 "' from outlineName - '" +
                 outlineName +
@@ -3055,9 +3055,9 @@ var FeedSubscriptions = {
                 .QueryInterface(Ci.nsIMsgLocalMailFolder)
                 .createLocalSubfolder(folderName);
             } catch (ex) {
               // An error creating. Skip it.
-              FeedUtils.log.info(
+              FeedUtils.log.warn(
                 "importOPMLOutlines: skipping, error creating folder - '" +
                   folderName +
                   "' from outlineName - '" +
                   outlineName +
diff --git a/mailnews/extensions/newsblog/newsblogOverlay.js b/mailnews/extensions/newsblog/newsblogOverlay.js
--- a/mailnews/extensions/newsblog/newsblogOverlay.js
+++ b/mailnews/extensions/newsblog/newsblogOverlay.js
@@ -203,12 +203,10 @@ var FeedMessageHandler = {
           // for idn and non-ascii urls with this api.
           url = decodeURIComponent(escape(url));
           uri = Services.io.newURI(url);
         } catch (ex) {
-          FeedUtils.log.info(
-            "FeedMessageHandler.loadWebPage: " +
-              "invalid Content-Base header url - " +
-              url
+          FeedUtils.log.warn(
+            "loadWebPage: invalid Content-Base header url - " + url
           );
           return;
         }
         if (aWhere.browser) {
@@ -227,11 +225,10 @@ var FeedMessageHandler = {
         } else if (aWhere.window) {
           openContentTab(url, "window", null);
         }
       } else {
-        FeedUtils.log.info(
-          "FeedMessageHandler.loadWebPage: could not get " +
-            "Content-Base header url for this message"
+        FeedUtils.log.warn(
+          "loadWebPage: could not get Content-Base header url for this message"
         );
       }
     });
   },
