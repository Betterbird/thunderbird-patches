# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1731271255 -3600
# Parent  9f47979b383d8a1bc19833485bc181763023f189
Feature: Account colours, part 4: No colours for virtual folders based on one account.

diff --git a/mail/base/content/widgets/treeview/thread-card.mjs b/mail/base/content/widgets/treeview/thread-card.mjs
--- a/mail/base/content/widgets/treeview/thread-card.mjs
+++ b/mail/base/content/widgets/treeview/thread-card.mjs
@@ -57,9 +57,9 @@ class ThreadCard extends TreeViewTableRo
     super.index = index;
 
     // XPCOM calls here must be keep to a minimum. Collect all of the
     // required data in one go.
-    const getServerInfo = !window.gViewWrapper.isSingleFolder;
+    const getServerInfo = window.gViewWrapper.isMultiServer;
     const properties = {};
     const threadLevel = {};
     const numChildren = {};
     const hasNextSibling = {};
diff --git a/mail/base/content/widgets/treeview/thread-row.mjs b/mail/base/content/widgets/treeview/thread-row.mjs
--- a/mail/base/content/widgets/treeview/thread-row.mjs
+++ b/mail/base/content/widgets/treeview/thread-row.mjs
@@ -68,9 +68,9 @@ class ThreadRow extends TreeViewTableRow
     // XPCOM calls here must be keep to a minimum. Collect all of the
     // required data in one go.
     const threadedDisplay =
       window.gViewWrapper._viewFlags & Ci.nsMsgViewFlagsType.kThreadedDisplay;
-    const getServerInfo = !window.gViewWrapper.isSingleFolder;
+    const getServerInfo = window.gViewWrapper.isMultiServer;
     const properties = {};
     const threadLevel = {};
     const numChildren = {};
     const hasNoSibling = {};
diff --git a/mail/modules/DBViewWrapper.sys.mjs b/mail/modules/DBViewWrapper.sys.mjs
--- a/mail/modules/DBViewWrapper.sys.mjs
+++ b/mail/modules/DBViewWrapper.sys.mjs
@@ -513,8 +513,9 @@ export function DBViewWrapper(aListener)
   this.displayedFolder = null;
   this.listener = aListener;
 
   this._underlyingData = this.kUnderlyingNone;
+  this._underlyingServers = this.kUnderlyingNone;
   this._underlyingFolders = null;
   this._syntheticView = null;
 
   this._viewUpdateDepth = 0;
@@ -582,8 +583,10 @@ DBViewWrapper.prototype = {
    *  displayedFolder.  We differ from kUnderlyingSynthetic in that we are
    *  not just a bunch of message headers randomly crammed in.
    */
   kUnderlyingSearchView: 4,
+  kUnderlyingSingleServer: 5,
+  kUnderlyingMultipleServer: 6,
 
   /**
    * Returns the sortType of the column assoziated with the given columnId.
    *
@@ -620,8 +623,12 @@ DBViewWrapper.prototype = {
       this._underlyingData == this.kUnderlyingSearchView
     );
   },
 
+  get isMultiServer() {
+    return this._underlyingServers == this.kUnderlyingMultipleServer;
+  },
+
   /**
    * @returns true if the folder being displayed is not a real folder at all,
    *     but rather the result of an un-scoped search, such as a gloda search.
    */
@@ -1096,16 +1103,21 @@ DBViewWrapper.prototype = {
       this._underlyingData =
         this._underlyingFolders.length > 1
           ? this.kUnderlyingMultipleFolder
           : this.kUnderlyingRealFolder;
+      this._underlyingServers =
+        new Set(this._underlyingFolders.map(f => f.server.serverURI)).size > 1
+          ? this.kUnderlyingMultipleServer
+          : this.kUnderlyingSingleServer;
 
       // figure out if we are using online IMAP searching
       this.search.onlineSearch = virtFolder.onlineSearch;
 
       // retrieve and chew the search query
       this.search.virtualFolderTerms = virtFolder.searchTerms;
     } else {
       this._underlyingData = this.kUnderlyingRealFolder;
+      this._underlyingServers = this.kUnderlyingSingleServer;
       this._underlyingFolders = [this.displayedFolder];
     }
 
     FolderNotificationHelper.stalkFolders(
