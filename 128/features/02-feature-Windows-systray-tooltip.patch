# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1736277895 -3600
# Parent  aa50a4b25afb65c3f37f32e5157ce4d3a5aa0c3b
Feature: Rework MailNotificationService.jsm to improve Windows systray tooltip.
* * *
Fix logic in MailNotificationManager.jsm: Not showing badge led to not showing tooltip :-(
* * *
Fix issue when making messages unread manually.
* * *
Feature: Rework MailNotificationService.jsm to improve Windows systray tooltip: Additional debugging.
* * *
Rework MailNotificationService.jsm to improve Windows systray tooltip: Fix logic error.
* * *
Rework MailNotificationService.jsm to improve Windows systray tooltip: Remove #newCount.

diff --git a/mailnews/base/public/mozINewMailListener.idl b/mailnews/base/public/mozINewMailListener.idl
--- a/mailnews/base/public/mozINewMailListener.idl
+++ b/mailnews/base/public/mozINewMailListener.idl
@@ -15,8 +15,9 @@
 interface mozINewMailListener : nsISupports {
   /** The new mail notification service will call this when the number of interesting
    * messages has changed
    *
-   * @param unreadCount   The number of unread messages the user cares to be notified about
+   * @param count   The number of unread messages the user cares to be notified about
+   * @param extra   Any additional information that could be relevant (like where the new message are)
    */
-  void onCountChanged(in unsigned long count);
+  void onCountChanged(in unsigned long count, in AString extra);
 };
diff --git a/mailnews/base/src/MailNotificationManager.sys.mjs b/mailnews/base/src/MailNotificationManager.sys.mjs
--- a/mailnews/base/src/MailNotificationManager.sys.mjs
+++ b/mailnews/base/src/MailNotificationManager.sys.mjs
@@ -30,8 +30,9 @@ export class MailNotificationManager {
   constructor() {
     this._systemAlertAvailable = true;
     this._unreadChatCount = 0;
     this._unreadMailCount = 0;
+    this._unreadMailExtra = "";
     // @type {Map<string, number>} - A map of folder URIs and the date of the
     //   newest message a notification has been shown for.
     this._folderNewestNotifiedTime = new Map();
     // @type {Set<nsIMsgFolder>} - A set of folders to show alert for.
@@ -167,11 +168,12 @@ export class MailNotificationManager {
 
   /**
    * @see mozINewMailNotificationService
    */
-  onCountChanged(count) {
+  onCountChanged(count, extra) {
     this._logger.log(`Unread mail count changed to ${count}`);
     this._unreadMailCount = count;
+    this._unreadMailExtra = extra;
     this._updateUnreadCount();
   }
 
   /**
@@ -460,20 +462,24 @@ export class MailNotificationManager {
 
     this._logger.debug(
       `Update unreadMailCount=${this._unreadMailCount}, unreadChatCount=${this._unreadChatCount}`
     );
-    let count = this._unreadMailCount + this._unreadChatCount;
+    const count = this._unreadMailCount + this._unreadChatCount;
     let tooltip = "";
     if (AppConstants.platform == "win") {
-      if (!Services.prefs.getBoolPref("mail.biff.show_badge", true)) {
-        count = 0;
-      }
       if (count > 0) {
         tooltip = await lazy.l10n.formatValue("unread-messages-os-tooltip", {
           count,
         });
+        if (this._unreadMailExtra) {
+          tooltip += this._unreadMailExtra;
+        }
       }
-      await lazy.WinUnreadBadge.updateUnreadCount(count, tooltip);
+      if (Services.prefs.getBoolPref("mail.biff.show_badge", true)) {
+        await lazy.WinUnreadBadge.updateUnreadCount(count, tooltip);
+      } else {
+        await lazy.WinUnreadBadge.updateUnreadCount(0, "");
+      }
     }
     this._osIntegration?.updateUnreadCount(count, tooltip);
 
     this._updatingUnreadCount = false;
diff --git a/mailnews/base/src/MailNotificationService.sys.mjs b/mailnews/base/src/MailNotificationService.sys.mjs
--- a/mailnews/base/src/MailNotificationService.sys.mjs
+++ b/mailnews/base/src/MailNotificationService.sys.mjs
@@ -24,11 +24,12 @@ export class NewMailNotificationService 
     "mozINewMailNotificationService",
   ]);
 
   #unreadCount = 0;
-  #newCount = 0;
   #listeners = [];
   #log = null;
+  folderCountMap = new Map();
+  folderNewMap = new Map();
 
   constructor() {
     this.#log = console.createInstance({
       prefix: "mail.notification",
@@ -39,8 +40,9 @@ export class NewMailNotificationService 
     Services.obs.addObserver(this, "profile-before-change");
     MailServices.mailSession.AddFolderListener(
       this,
       Ci.nsIFolderListener.intPropertyChanged |
+        Ci.nsIFolderListener.boolPropertyChanged |
         Ci.nsIFolderListener.added |
         Ci.nsIFolderListener.removed |
         Ci.nsIFolderListener.propertyFlagChanged
     );
@@ -128,8 +130,13 @@ export class NewMailNotificationService 
       // It's a special folder *other than the inbox*, don't count it by default.
       shouldCount.data = false;
     } else if (aFolder.flags & Ci.nsMsgFolderFlags.Virtual) {
       shouldCount.data = false;
+    } else if (
+      Services.prefs.getBoolPref("mail.biff.use_new_count_in_badge", true)
+    ) {
+      // If we're counting new messages, we count them in all folders.
+      shouldCount.data = true;
     } else {
       // If we're only counting inboxes and it's not an inbox...
       const onlyCountInboxes = Services.prefs.getBoolPref(
         "mail.notification.count.inbox_only",
@@ -140,104 +147,238 @@ export class NewMailNotificationService 
       }
     }
 
     this.#log.debug(`${aFolder.URI}: shouldCount=${shouldCount.data}`);
+    /* No one cares about this.
     Services.obs.notifyObservers(
       shouldCount,
       "before-count-unread-for-folder",
       aFolder.URI
     );
+    */
     return shouldCount.data;
   }
 
+  onFolderBoolPropertyChanged(folder, property, oldValue, newValue) {
+    this.#log.debug(
+      `Changed bool ${property} of ${folder.folderURL}: ${oldValue} -> ${newValue}`
+    );
+    if (property == "NewMessages") {
+      this._newMessagesChanged(folder, oldValue, newValue);
+    }
+  }
+
   onFolderIntPropertyChanged(folder, property, oldValue, newValue) {
     try {
       if (property == "FolderSize") {
         return;
       }
-      this.#log.trace(
+      this.#log.debug(
         `Changed int ${property} of ${folder.folderURL}: ${oldValue} -> ${newValue}`
       );
-      if (property == "BiffState") {
-        this.#biffStateChanged(folder, oldValue, newValue);
-      } else if (property == "TotalUnreadMessages") {
+      if (property == "TotalUnreadMessages") {
         this.#totalUnreadMessagesChanged(folder, oldValue, newValue);
-      } else if (property == "NewMailReceived") {
-        this.#newMailReceived(folder, oldValue, newValue);
+        // For new folders, there is a call with old == -1 and new == 0.
+        this._updateNewCount(folder, newValue - Math.max(oldValue, 0));
       }
     } catch (error) {
       this.#log.error("onFolderIntPropertyChanged: " + error);
     }
   }
 
-  #biffStateChanged(folder, oldValue, newValue) {
-    if (newValue == Ci.nsIMsgFolder.nsMsgBiffState_NewMail) {
-      if (folder.server && !folder.server.performingBiff) {
-        this.#log.debug(
-          `${folder.URI} notified, but server not performing biff`
+  _updateNewCount(folder, newCount, isCompensation = false) {
+    if (!this.confirmShouldCount(folder)) {
+      return;
+    }
+
+    this.#log.info(`_updateNewCount: ${folder.URI} new messages: ${newCount}`);
+    const folderCountMapValue = this.folderCountMap.get(folder.URI);
+    const folderCount = folderCountMapValue || 0;
+    if (isCompensation) {
+      this.#log.info(
+        `_updateNewCount: Compensation for ${folder.URI}, setting ${folderCount} + ${newCount}`
+      );
+      this.folderCountMap.set(folder.URI, folderCount + newCount);
+      return;
+    }
+
+    if (newCount < 0 && folderCountMapValue === undefined) {
+      // If we don't have a count for the folder, we cleared it from our map
+      // in `_newMessagesChanged()`. So return instead of reducing the count.
+      this.#log.info(
+        `_updateNewCount: ${folder.URI} not in map, ignoring ${newCount}`
+      );
+      return;
+    }
+
+    const newFolderCount = Math.max(folderCount + newCount, 0);
+    this.#log.info(
+      `_updateNewCount: ${folder.URI}, setting ${folderCount} + ${newCount} = ${newFolderCount}`
+    );
+    if (newFolderCount > 0) {
+      this.folderCountMap.set(folder.URI, newFolderCount);
+      if (!this.folderNewMap.get(folder.URI)) {
+        this.#log.info(
+          `_updateNewCount: ${folder.URI} not in the map, no update`
         );
         return;
       }
+    } else {
+      // Likely this is the second call on a compensation, so make sure the
+      // maps don't hang around. If the maps hang around, the condition above:
+      // if (newCount < 0 && folderCountMapValue === undefined) { ...
+      // won't be fulfilled again.
+      this.#log.info(`_updateNewCount: ${folder.URI}: Deleting maps`);
+      this.folderCountMap.delete(folder.URI);
+      this.folderNewMap.delete(folder.URI);
+    }
 
-      // Biff notifications come in for the top level of the server, we need to
-      // look for the folder that actually contains the new mail.
-
-      const allFolders = [folder, ...folder.descendants];
+    if (this.useNewCountInBadge) {
+      const { total, output } = this._folderInfo();
+      this._notifyListeners(
+        Ci.mozINewMailNotificationService.count,
+        "onCountChanged",
+        total,
+        output
+      );
+    }
+  }
 
-      this.#log.debug(`${folder.URI} notified; will check subfolders`);
-      let newCount = 0;
-
-      for (const folder of allFolders) {
-        if (this.confirmShouldCount(folder)) {
-          const folderNew = folder.getNumNewMessages(false);
-          this.#log.debug(`${folder.URI}: ${folderNew} new`);
-          if (folderNew > 0) {
-            newCount += folderNew;
+  _newMessagesChanged(folder, oldValue, newValue) {
+    if (!this.confirmShouldCount(folder)) {
+      return;
+    }
+    if (newValue) {
+      // We have new messages.
+      // `getNumNewMessages()` doesn't work until after the biff
+      // notification (BiffState or NumNewBiffMessages changed)
+      // and it doesn't work on local folders at all.
+      // We use a change of TotalUnreadMessages.
+      const folderNew = this.folderNewMap.get(folder.URI);
+      if (!folderNew) {
+        this.#log.info(
+          `_newMessagesChanged: Created map entry for ${folder.URI}`
+        );
+        this.folderNewMap.set(folder.URI, {
+          name: folder.name,
+          isInbox: folder.flags & Ci.nsMsgFolderFlags.Inbox,
+        });
+        const folderCount = this.folderCountMap.get(folder.URI);
+        if (folderCount) {
+          // The count arrived before the "NewMessages" notification.
+          // This was already added in `_updateNewCount()`.
+          this.#log.info(
+            `_newMessagesChanged: ${folder.URI} count: ${folderCount}`
+          );
+          if (this.useNewCountInBadge) {
+            const { total, output } = this._folderInfo();
+            this._notifyListeners(
+              Ci.mozINewMailNotificationService.count,
+              "onCountChanged",
+              total,
+              output
+            );
           }
         }
       }
-      if (newCount > 0) {
-        this.#newCount += newCount;
-        this.#log.debug(`${folder.URI}: new mail count ${this.#newCount}`);
+    } else {
+      // New messages went away.
+      const folderCount = this.folderCountMap.get(folder.URI);
+      this.folderCountMap.delete(folder.URI);
+      this.folderNewMap.delete(folder.URI);
+      if (folderCount) {
+        this.#log.info(
+          `_newMessagesChanged: ${folder.URI}: count going away: ${folderCount}`
+        );
         if (this.useNewCountInBadge) {
+          const { total, output } = this._folderInfo();
           this._notifyListeners(
             Ci.mozINewMailNotificationService.count,
             "onCountChanged",
-            this.#newCount
+            total,
+            output
           );
         }
       }
-    } else if (newValue == Ci.nsIMsgFolder.nsMsgBiffState_NoMail) {
-      // Dodgy - when any folder tells us it has no mail, clear all unread mail
-      this.#newCount = 0;
-      this.#log.debug(`${folder.URI}: no new mail`);
-      if (this.useNewCountInBadge) {
-        this._notifyListeners(
-          Ci.mozINewMailNotificationService.count,
-          "onCountChanged",
-          this.#newCount
-        );
-      }
     }
   }
 
-  #newMailReceived(folder, oldValue, newValue) {
-    if (!this.confirmShouldCount(folder)) {
-      return;
+  _folderInfo() {
+    let total = 0;
+    let totalInbox = 0;
+    let countInbox = 0;
+    let inboxName = "";
+    const folders = [];
+    for (const [key, value] of this.folderNewMap) {
+      const count = this.folderCountMap.get(key);
+      if (!count) {
+        continue;
+      }
+      total += count;
+      if (value.isInbox) {
+        totalInbox += count;
+        countInbox++;
+        inboxName = value.name; // Could be localised.
+        continue;
+      }
+      folders.push({ count, name: value.name });
     }
 
-    if (!oldValue || oldValue < 0) {
-      oldValue = 0;
+    if (totalInbox == 0 && folders.length == 0) {
+      this.#log.info(`_folderInfo: ${total} <empty>`);
+      return { total, output: "" };
+    }
+    let output = "\n";
+    let folderAddsComma = false;
+    if (totalInbox > 0) {
+      output += inboxName;
+      if (countInbox > 1) {
+        output += "(Σ)";
+      }
+      output += ": " + totalInbox.toString(10);
+      folderAddsComma = true;
+    }
+    if (folders.length == 0) {
+      this.#log.info(`_folderInfo: ${total} ${output}`);
+      return { total, output };
     }
-    this.#newCount += newValue - oldValue;
-    this.#log.debug(`#newMailReceived ${folder.URI} - ${this.#newCount} new`);
-    if (this.useNewCountInBadge) {
-      this._notifyListeners(
-        Ci.mozINewMailNotificationService.count,
-        "onCountChanged",
-        this.#newCount
-      );
+    let lineLength = output.length - 1; // Don't count the initial newline.
+    folders.sort((el1, el2) => el2.count - el1.count);
+    for (let i = 0; i < folders.length; i++) {
+      const folder = folders[i].name + ": " + folders[i].count.toString(10);
+      // The total length of the tooltip must no exceed 127 characters, or it's truncated.
+      // There are already around 27 characters in "9999 unread messages" or
+      // "9999 ungelesene Nachrichten", other languages may have more
+      // (although I didn't see one, checked es, pt, zh, ja).
+      // So let's keep the count unter 100. We need two characters for
+      // the connector, either ", " or "\n ".
+      if (output.length + folder.length + 2 > 100) {
+        // Sorry, can't list more folders.
+        output += ", \u2026";
+        break;
+      }
+      if (lineLength + folder.length > 50) {
+        if (folderAddsComma) {
+          output += ",\n" + folder;
+        } else {
+          // No comma, so this is the first thing we add.
+          output += folder;
+          folderAddsComma = true;
+        }
+        lineLength = folder.length;
+        continue;
+      }
+      if (folderAddsComma) {
+        output += ", " + folder;
+      } else {
+        // No comma, so this is the first thing we add.
+        output += folder;
+        folderAddsComma = true;
+      }
+      lineLength += folder.length;
     }
+    this.#log.info(`_folderInfo: ${total} ${output}`);
+    return { total, output };
   }
 
   #totalUnreadMessagesChanged(folder, oldValue, newValue) {
     if (!this.confirmShouldCount(folder)) {
@@ -263,50 +404,72 @@ export class NewMailNotificationService 
   }
 
   onFolderAdded(parentFolder, child) {
     if (child.rootFolder == child) {
-      this.#log.trace(`Added root folder ${child.folderURL}`);
+      this.#log.debug(`Added root folder ${child.folderURL}`);
     } else {
-      this.#log.trace(
+      this.#log.debug(
         `Added child folder ${child.folderURL} to ${parentFolder.folderURL}`
       );
     }
   }
 
   onMessageAdded(parentFolder, msg) {
-    if (this.confirmShouldCount(msg.folder)) {
-      this.#log.trace(`Added <${msg.messageId}> to ${msg.folder.folderURL}`);
-    }
+    this.#log.debug(`Added <${msg.messageId}> to ${msg.folder.folderURL}`);
   }
 
   onFolderPropertyFlagChanged(msg, property, oldFlag, newFlag) {
+    if (property != "Status") {
+      return;
+    }
+    this.#log.debug(
+      `Changed flag ${property} of ${msg.folder.folderURL}: ${oldFlag} -> ${newFlag}`
+    );
     if (
       oldFlag & Ci.nsMsgMessageFlags.New &&
       !(newFlag & Ci.nsMsgMessageFlags.New)
     ) {
-      this.#log.trace(
+      this.#log.debug(
         `<${msg.messageId}> marked read in ${msg.folder.folderURL}`
       );
     } else if (newFlag & Ci.nsMsgMessageFlags.New) {
-      this.#log.trace(
+      this.#log.debug(
         `<${msg.messageId}> marked unread in ${msg.folder.folderURL}`
       );
     }
+
+    if (!(oldFlag & Ci.nsMsgMessageFlags.New)) {
+      // Changing read status of non-new message. We need to
+      // compensate since this will change the (new) unread
+      // message count which we might be tracking on the folder.
+      if (
+        oldFlag & Ci.nsMsgMessageFlags.Read &&
+        !(newFlag & Ci.nsMsgMessageFlags.Read)
+      ) {
+        this._updateNewCount(msg.folder, -1, true);
+      }
+      if (
+        !(oldFlag & Ci.nsMsgMessageFlags.Read) &&
+        newFlag & Ci.nsMsgMessageFlags.Read
+      ) {
+        this._updateNewCount(msg.folder, 1, true);
+      }
+    }
   }
 
   onFolderRemoved(parentFolder, child) {
     if (child.rootFolder == child) {
-      this.#log.trace(`Removed root folder ${child.folderURL}`);
+      this.#log.debug(`Removed root folder ${child.folderURL}`);
     } else {
-      this.#log.trace(
+      this.#log.debug(
         `Removed child folder ${child.folderURL} from ${parentFolder?.folderURL}`
       );
     }
   }
 
   onMessageRemoved(parentFolder, msg) {
     if (!msg.isRead) {
-      this.#log.trace(
+      this.#log.debug(
         `Removed unread <${msg.messageId}> from ${msg.folder.folderURL}`
       );
     }
   }
@@ -314,9 +477,10 @@ export class NewMailNotificationService 
   // Implement mozINewMailNotificationService
 
   get messageCount() {
     if (this.useNewCountInBadge) {
-      return this.#newCount;
+      const { total } = this._folderInfo();
+      return total;
     }
     return this.#unreadCount;
   }
 
@@ -330,12 +494,14 @@ export class NewMailNotificationService 
     }
 
     // Ensure that first-time listeners get an accurate mail count.
     if (flags & Ci.mozINewMailNotificationService.count) {
-      const count = this.useNewCountInBadge
-        ? this.#newCount
-        : this.#unreadCount;
-      aListener.onCountChanged(count);
+      if (this.useNewCountInBadge) {
+        const { total, output } = this._folderInfo();
+        aListener.onCountChanged(total, output);
+      } else {
+        aListener.onCountChanged(this.#unreadCount, "");
+      }
     }
 
     // If we get here, the listener wasn't already in the list
     this.#listeners.push({ obj: aListener, flags });
@@ -361,11 +527,11 @@ export class NewMailNotificationService 
     }
     return list;
   }
 
-  _notifyListeners(flag, func, value) {
+  _notifyListeners(flag, func, value1, value2 = "") {
     const list = this.listenersForFlag(flag);
     for (let i = 0; i < list.length; i++) {
-      list[i][func](value);
+      list[i][func](value1, value2);
     }
   }
 }
diff --git a/mailnews/base/src/WinUnreadBadge.sys.mjs b/mailnews/base/src/WinUnreadBadge.sys.mjs
--- a/mailnews/base/src/WinUnreadBadge.sys.mjs
+++ b/mailnews/base/src/WinUnreadBadge.sys.mjs
@@ -75,9 +75,9 @@ function drawUnreadCountText(cxt, text) 
   // Use smaller fonts for longer text to try and squeeze it in.
   const fontSize = imageSize * (0.95 - 0.15 * text.length);
 
   cxt.font = "500 " + fontSize + "px Calibri";
-  cxt.fillStyle = "#ffffff";
+  cxt.fillStyle = "#000000";
   cxt.textAlign = "center";
 
   // TODO: There isn't a textBaseline for accurate vertical centering ('middle' is the
   // middle of the 'em block', and digits extend higher than 'm'), and the Mozilla core
@@ -108,9 +108,9 @@ function createModernBadgeStyle(canvas, 
 
   // Draw the background.
   cxt.save();
   // Solid color first.
-  cxt.fillStyle = "#ff0039";
+  cxt.fillStyle = "#ffffff";
   cxt.shadowOffsetX = 0;
   cxt.shadowOffsetY = 0;
   cxt.shadowColor = "rgba(0,0,0,0.7)";
   cxt.shadowBlur = iconSize / 10;
diff --git a/mailnews/base/src/nsMessengerWinIntegration.cpp b/mailnews/base/src/nsMessengerWinIntegration.cpp
--- a/mailnews/base/src/nsMessengerWinIntegration.cpp
+++ b/mailnews/base/src/nsMessengerWinIntegration.cpp
@@ -268,12 +268,13 @@ nsresult nsMessengerWinIntegration::SetT
     NS_ENSURE_SUCCESS(rv, rv);
     rv = bundle->GetStringFromName("brandShortName", mBrandShortName);
     NS_ENSURE_SUCCESS(rv, rv);
   }
-  nsString tooltip = mBrandShortName;
-  if (!mUnreadTooltip.IsEmpty()) {
-    tooltip.AppendLiteral("\n");
-    tooltip.Append(mUnreadTooltip);
+  nsString tooltip;
+  if (mUnreadTooltip.IsEmpty()) {
+    tooltip = mBrandShortName;
+  } else {
+    tooltip = mUnreadTooltip;
   }
   size_t destLength =
       sizeof sMailIconData.szTip / (sizeof sMailIconData.szTip[0]);
   ::StringCchCopyNW(sMailIconData.szTip, destLength, tooltip.get(),
