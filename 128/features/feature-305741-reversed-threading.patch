# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1721775064 -7200
# Parent  48b2ef19e24ac0699230c26fd1dfb10f2c743248
Feature: Reversed threading (bug 305741).

diff --git a/mail/base/content/widgets/treeview/thread-row.mjs b/mail/base/content/widgets/treeview/thread-row.mjs
--- a/mail/base/content/widgets/treeview/thread-row.mjs
+++ b/mail/base/content/widgets/treeview/thread-row.mjs
@@ -72,18 +72,18 @@ class ThreadRow extends TreeViewTableRow
     const getServerInfo = !window.gViewWrapper.isSingleFolder;
     const properties = {};
     const threadLevel = {};
     const numChildren = {};
-    const hasNextSibling = {};
+    const hasNoSibling = {};
     const serverKey = {};
     const cellTexts = this.view.cellDataForColumns(
       index,
       textColumns,
       properties,
       threadLevel,
       threadedDisplay, // no need to get the following two for a non-threaded display
       numChildren,
-      hasNextSibling,
+      hasNoSibling,
       getServerInfo,
       serverKey
     );
     const propertiesSet = new Set(properties.value.split(" "));
@@ -111,9 +111,10 @@ class ThreadRow extends TreeViewTableRow
         elementToColor.style.backgroundColor = "";
       }
     }
     this.classList.toggle("singleton", numChildren.value <= 1);
-    this.classList.toggle("lastchild", !hasNextSibling.value);
+    this.classList.toggle("lastchild", hasNoSibling.value == 1);
+    this.classList.toggle("firstchild", hasNoSibling.value == -1);
 
     // Collect the various strings and fluent IDs to build the full string for
     // the message row aria-label.
     const ariaLabelPromises = [];
diff --git a/mail/themes/shared/jar.inc.mn b/mail/themes/shared/jar.inc.mn
--- a/mail/themes/shared/jar.inc.mn
+++ b/mail/themes/shared/jar.inc.mn
@@ -220,8 +220,9 @@
   skin/classic/messenger/icons/file-item.svg                  (../shared/mail/icons/file-item.svg)
   skin/classic/messenger/icons/filter.svg                     (../shared/mail/icons/filter.svg)
   skin/classic/messenger/icons/search-row-more.svg            (../shared/mail/icons/search-row-more.svg)
   skin/classic/messenger/icons/search-row-end.svg             (../shared/mail/icons/search-row-end.svg)
+  skin/classic/messenger/icons/search-row-end-reversed.svg    (../shared/mail/icons/search-row-end-reversed.svg)
   skin/classic/messenger/icons/fingerprint.svg                (../shared/mail/icons/fingerprint.svg)
   skin/classic/messenger/icons/flag-col.svg                   (../shared/mail/icons/flag-col.svg)
   skin/classic/messenger/icons/flagged.svg                    (../shared/mail/icons/flagged.svg)
   skin/classic/messenger/icons/folder.svg                     (../shared/mail/icons/folder.svg)
diff --git a/mail/themes/shared/mail/icons/search-row-end-reversed.svg b/mail/themes/shared/mail/icons/search-row-end-reversed.svg
new file mode 100644
--- /dev/null
+++ b/mail/themes/shared/mail/icons/search-row-end-reversed.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="8" height="24" fill="context-fill" fill-opacity="context-fill-opacity" viewBox="0 0 8 24">
+  <path d="M 0,24 h 1 v -12 h 7 v -1 h -8 Z"/>
+</svg>
diff --git a/mail/themes/shared/mail/threadPane.css b/mail/themes/shared/mail/threadPane.css
--- a/mail/themes/shared/mail/threadPane.css
+++ b/mail/themes/shared/mail/threadPane.css
@@ -431,8 +431,12 @@ tr[data-properties~="unread"].selected .
 
   &:not(.children):not(.singleton).lastchild .subject-line {
     background-image: url("chrome://messenger/skin/icons/search-row-end.svg");
   }
+
+  &:not(.children):not(.singleton).firstchild .subject-line {
+    background-image: url("chrome://messenger/skin/icons/search-row-end-reversed.svg");
+  }
 }
 
 :root[uidensity="compact"] .table-layout[multiline="true"] .subject-line {
   line-height: 20px;
diff --git a/mailnews/base/public/nsIMsgDBView.idl b/mailnews/base/public/nsIMsgDBView.idl
--- a/mailnews/base/public/nsIMsgDBView.idl
+++ b/mailnews/base/public/nsIMsgDBView.idl
@@ -498,9 +498,9 @@ interface nsIMsgDBView : nsISupports
    * @param aProperties - The properties of the row.
    * @param aThreadLevel - The thread level of the row.
    * @param aGetChildrenInfo - if false, return dummy values for aNumChildren and aHasNextSibling.
    * @param aNumChildren - The number of children of the row.
-   * @param aHasNextSibling - Whether the row has a next sibling.
+   * @param aHasNoSibling - Whether the row has a next sibling: 0: Has sibling, 1: No next sibling, -1: No previous sibling (reversed threading).
    * @param aGetServerInfo - if false, return dummy value for aServerKey.
    * @param aServerKey - Key of the server belonging to the folder.
    *
    * @returns The cell text for the columns in `aColumnNames`.
@@ -510,9 +510,9 @@ interface nsIMsgDBView : nsISupports
                                     out AString aProperties,
                                     out long aThreadLevel,
                                     in boolean getChildrenInfo,
                                     out unsigned long aNumChildren,
-                                    out boolean aHasNextSibling,
+                                    out long aHasNoSibling,
                                     in boolean aGetServerInfo,
                                     out ACString aServerKey);
 };
 
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -1453,8 +1453,9 @@ nsMsgDBView::IsContainer(int32_t index, 
     *_retval = !!(flags & MSG_VIEW_FLAG_HASCHILDREN);
   } else {
     *_retval = false;
   }
+  printf("=== IsContainer %d reply %d\n", index, *_retval);
 
   return NS_OK;
 }
 
@@ -2028,9 +2029,9 @@ NS_IMETHODIMP
 nsMsgDBView::CellDataForColumns(int32_t aRow,
                                 const nsTArray<nsString>& aColumnNames,
                                 nsAString& aProperties, int32_t* aThreadLevel,
                                 bool aGetChildrenInfo, uint32_t* aNumChildren,
-                                bool* aHasNextSibling, bool aGetServerInfo,
+                                int32_t* aHasNoSibling, bool aGetServerInfo,
                                 nsACString& aServerKey,
                                 nsTArray<nsString>& _retval) {
   nsresult rv;
   _retval.Clear();
@@ -2067,13 +2068,32 @@ nsMsgDBView::CellDataForColumns(int32_t 
     }
     _retval.AppendElement(text);
   }
 
-  *aHasNextSibling = false;
+  *aHasNoSibling = 0;
   *aNumChildren = 0;
   if (aGetChildrenInfo) {
-    // The following call (so far) doesn't fail.
-    HasNextSibling(aRow, aRow, aHasNextSibling);
+    if (ReversedThreading()) {
+      // Check previous sibling.
+      int32_t rowIndexLevel;
+      bool hasPreviousSibling = false;
+      GetLevel(aRow, &rowIndexLevel);
+      for (int32_t i = aRow - 1; i >= 0; i--) {
+        int32_t l;
+        GetLevel(i, &l);
+        if (l < rowIndexLevel) break;
+        if (l == rowIndexLevel) {
+          hasPreviousSibling = true;
+          break;
+        }
+      }
+      if (!hasPreviousSibling) *aHasNoSibling = -1;
+    } else {
+      // The following call (so far) doesn't fail.
+      bool hasNextSibling;
+      HasNextSibling(aRow, aRow, &hasNextSibling);
+      if (!hasNextSibling) *aHasNoSibling = 1;
+    }
 
     nsCOMPtr<nsIMsgThread> thread;
     rv = GetThreadContainingIndex(aRow, getter_AddRefs(thread));
     if (NS_SUCCEEDED(rv) && thread) {
@@ -2213,8 +2233,10 @@ nsMsgDBView::CycleCell(int32_t row, nsTr
 NS_IMETHODIMP
 nsMsgDBView::Open(nsIMsgFolder* folder, nsMsgViewSortTypeValue sortType,
                   nsMsgViewSortOrderValue sortOrder,
                   nsMsgViewFlagsTypeValue viewFlags) {
+  mReversedThreading =
+      mozilla::Preferences::GetBool("mailnews.reversed_threading", false);
   m_viewFlags = viewFlags;
   m_sortOrder = sortOrder;
   m_sortType = sortType;
 
@@ -4292,8 +4314,9 @@ int32_t nsMsgDBView::SecondaryCompare(ns
 }
 
 NS_IMETHODIMP nsMsgDBView::Sort(nsMsgViewSortTypeValue sortType,
                                 nsMsgViewSortOrderValue sortOrder) {
+  printf("=== nsMsgDBView::Sort\n");
   EnsureCustomColumnsValid();
 
   // If we're doing a stable sort, we can't just reverse the messages.
   // Check also that the custom column we're sorting on hasn't changed.
@@ -4314,10 +4337,12 @@ NS_IMETHODIMP nsMsgDBView::Sort(nsMsgVie
 
     SaveSortInfo(sortType, sortOrder);
     if (m_viewFlags & nsMsgViewFlagsType::kThreadedDisplay) {
       ReverseThreads();
+      printf("=== reversing threads\n");
     } else {
       ReverseSort();
+      printf("=== reversing sort\n");
     }
 
     m_sortOrder = sortOrder;
     // We just reversed the sort order, we still need to invalidate the view.
@@ -4347,8 +4372,9 @@ NS_IMETHODIMP nsMsgDBView::Sort(nsMsgVie
   if (NS_FAILED(rv)) return NS_OK;
 
   nsTArray<void*> ptrs;
   uint32_t arraySize = GetSize();
+  printf("=== sort size %u\n", arraySize);
 
   if (!arraySize) return NS_OK;
 
   nsCOMArray<nsIMsgFolder>* folders = GetFolders();
@@ -4389,8 +4415,9 @@ NS_IMETHODIMP nsMsgDBView::Sort(nsMsgVie
         NS_ENSURE_SUCCESS(rv, rv);
       }
 
       // Perform the sort.
+      printf("=== std::sort 1\n");
       std::sort(pPtrBase.begin(), pPtrBase.end(),
                 [&qsPrivateData](const auto& lhs, const auto& rhs) {
                   return FnSortIdKey(lhs, rhs, &qsPrivateData) < 0;
                 });
@@ -4430,8 +4457,9 @@ NS_IMETHODIMP nsMsgDBView::Sort(nsMsgVie
         }
       }
 
       // Perform the sort.
+      printf("=== std::sort 2\n");
       std::sort(pPtrBase.begin(), pPtrBase.end(),
                 [&qsPrivateData](const auto& lhs, const auto& rhs) {
                   return FnSortIdUint32(lhs, rhs, &qsPrivateData) < 0;
                 });
@@ -4680,16 +4708,28 @@ nsresult nsMsgDBView::GetThreadCount(nsM
 // index of the first message in the thread.
 int32_t nsMsgDBView::CountExpandedThread(nsMsgViewIndex index) {
   int32_t numInThread = 0;
   nsMsgViewIndex startOfThread = index;
-  while ((int32_t)startOfThread >= 0 && m_levels[startOfThread] != 0)
-    startOfThread--;
-
-  nsMsgViewIndex threadIndex = startOfThread;
-  do {
-    threadIndex++;
-    numInThread++;
-  } while (threadIndex < m_levels.Length() && m_levels[threadIndex] != 0);
+  if (ReversedThreading()) {
+    while ((uint32_t)startOfThread < m_levels.Length() &&
+           m_levels[startOfThread] != 0)
+      startOfThread++;
+
+    int32_t threadIndex = startOfThread;
+    do {
+      threadIndex--;
+      numInThread++;
+    } while (threadIndex >= 0 && m_levels[threadIndex] != 0);
+  } else {
+    while ((int32_t)startOfThread >= 0 && m_levels[startOfThread] != 0)
+      startOfThread--;
+
+    nsMsgViewIndex threadIndex = startOfThread;
+    do {
+      threadIndex++;
+      numInThread++;
+    } while (threadIndex < m_levels.Length() && m_levels[threadIndex] != 0);
+  }
 
   return numInThread;
 }
 
@@ -4871,26 +4911,52 @@ nsresult nsMsgDBView::ExpandByIndex(nsMs
   } else {
     rv = ListIdsInThread(pThread, index, &numExpanded);
   }
 
-  m_flags[index] = flags;
-  NoteChange(index, 1, nsMsgViewNotificationCode::changed);
-
-  NoteChange(index + 1, numExpanded, nsMsgViewNotificationCode::insertOrDelete);
+  if (ReversedThreading()) {
+    printf("=== setting flags for index %u\n", index + numExpanded);
+    m_flags[index + numExpanded] = flags;
+    ClearHdrCache();
+    NoteChange(index, 1, nsMsgViewNotificationCode::changed);
+    NoteChange(index + numExpanded, 1, nsMsgViewNotificationCode::changed);
+    NoteChange(index, numExpanded, nsMsgViewNotificationCode::insertOrDelete);
+    bool container;
+    IsContainer(index + numExpanded, &container);
+    printf("=== index %u is container %d\n", index + numExpanded, container);
+    IsContainer(index, &container);
+    printf("=== index %u is container %d\n", index, container);
+  } else {
+    m_flags[index] = flags;
+    NoteChange(index, 1, nsMsgViewNotificationCode::changed);
+    NoteChange(index + 1, numExpanded,
+               nsMsgViewNotificationCode::insertOrDelete);
+  }
 
   if (pNumExpanded != nullptr) *pNumExpanded = numExpanded;
 
   return rv;
 }
 
 nsresult nsMsgDBView::CollapseAll() {
   if (mJSTree) mJSTree->BeginUpdateBatch();
-  for (uint32_t i = 0; i < GetSize(); i++) {
-    uint32_t numExpanded;
-    uint32_t flags = m_flags[i];
-    if (!(flags & nsMsgMessageFlags::Elided) &&
-        (flags & MSG_VIEW_FLAG_HASCHILDREN))
-      CollapseByIndex(i, &numExpanded);
+  if (ReversedThreading()) {
+    int32_t i = GetSize() - 1;
+    while (i >= 0) {
+      uint32_t numExpanded = 0;
+      uint32_t flags = m_flags[i];
+      if (!(flags & nsMsgMessageFlags::Elided) &&
+          (flags & MSG_VIEW_FLAG_HASCHILDREN))
+        CollapseByIndex(i, &numExpanded);
+      i -= numExpanded + 1;
+    }
+  } else {
+    for (uint32_t i = 0; i < GetSize(); i++) {
+      uint32_t numExpanded;
+      uint32_t flags = m_flags[i];
+      if (!(flags & nsMsgMessageFlags::Elided) &&
+          (flags & MSG_VIEW_FLAG_HASCHILDREN))
+        CollapseByIndex(i, &numExpanded);
+    }
   }
 
   if (mJSTree) mJSTree->EndUpdateBatch();
   SelectionChangedXPCOM();
@@ -4901,8 +4967,9 @@ nsresult nsMsgDBView::CollapseByIndex(ns
                                       uint32_t* pNumCollapsed) {
   nsresult rv;
   int32_t flags = m_flags[index];
   int32_t rowDelta = 0;
+  printf("=== CollapseByIndex %u\n", index);
 
   if (flags & nsMsgMessageFlags::Elided ||
       !(m_viewFlags & nsMsgViewFlagsType::kThreadedDisplay) ||
       !(flags & MSG_VIEW_FLAG_HASCHILDREN)) {
@@ -4916,24 +4983,38 @@ nsresult nsMsgDBView::CollapseByIndex(ns
 
   flags |= nsMsgMessageFlags::Elided;
 
   m_flags[index] = flags;
-  NoteChange(index, 1, nsMsgViewNotificationCode::changed);
-
-  // Don't count first header in thread.
   int32_t numRemoved = -rowDelta;
-  if (index + 1 + numRemoved > m_keys.Length()) {
-    NS_ERROR("trying to remove too many rows");
-    numRemoved -= (index + 1 + numRemoved) - m_keys.Length();
-    if (numRemoved <= 0) return NS_MSG_MESSAGE_NOT_FOUND;
-  }
-
-  // Start at first id after thread.
-  RemoveRows(index + 1, numRemoved);
+
+  printf("=== collapse %d %d\n", numRemoved, rowDelta);
+
+  if (ReversedThreading()) {
+    // Remove rows above `index`.
+    if (index < (nsMsgViewIndex)numRemoved) {
+      NS_ERROR("trying to remove too many rows");
+      numRemoved = index;
+      if (numRemoved <= 0) return NS_MSG_MESSAGE_NOT_FOUND;
+    }
+    NoteChange(index, 1, nsMsgViewNotificationCode::changed);
+    RemoveRows(index - numRemoved, numRemoved);
+    NoteChange(index - numRemoved, rowDelta,
+               nsMsgViewNotificationCode::insertOrDelete);
+  } else {
+    // Remove rows below `index`.
+    // Don't count first header in thread.
+    if (index + 1 + numRemoved > m_keys.Length()) {
+      NS_ERROR("trying to remove too many rows");
+      numRemoved -= (index + 1 + numRemoved) - m_keys.Length();
+      if (numRemoved <= 0) return NS_MSG_MESSAGE_NOT_FOUND;
+    }
+    // Start at first id after thread.
+    NoteChange(index, 1, nsMsgViewNotificationCode::changed);
+    RemoveRows(index + 1, numRemoved);
+    NoteChange(index + 1, rowDelta, nsMsgViewNotificationCode::insertOrDelete);
+  }
+
   if (pNumCollapsed != nullptr) *pNumCollapsed = numRemoved;
-
-  NoteChange(index + 1, rowDelta, nsMsgViewNotificationCode::insertOrDelete);
-
   return rv;
 }
 
 nsresult nsMsgDBView::OnNewHeader(nsIMsgDBHdr* newHdr, nsMsgKey aParentKey,
@@ -5272,8 +5353,9 @@ nsMsgViewIndex nsMsgDBView::FindParentIn
 nsresult nsMsgDBView::ListIdsInThreadOrder(nsIMsgThread* threadHdr,
                                            nsMsgKey parentKey, uint32_t level,
                                            nsMsgViewIndex* viewIndex,
                                            uint32_t* pNumListed) {
+  nsMsgViewIndex viewIndexStart = *viewIndex;
   nsCOMPtr<nsIMsgEnumerator> msgEnumerator;
   nsresult rv =
       threadHdr->EnumerateMessages(parentKey, getter_AddRefs(msgEnumerator));
   NS_ENSURE_SUCCESS(rv, rv);
@@ -5325,8 +5407,30 @@ nsresult nsMsgDBView::ListIdsInThreadOrd
     rv = ListIdsInThreadOrder(threadHdr, msgKey, level + 1, viewIndex,
                               pNumListed);
     NS_ENSURE_SUCCESS(rv, rv);
   }
+
+  printf("=== level %u\n", level);
+  if (ReversedThreading() && level == 1) {
+    // Reverse everything we added, and the one before.
+    nsMsgViewIndex i = viewIndexStart - 1;
+    nsMsgViewIndex j = *viewIndex - 1;
+
+#define swap(type, var) \
+  {                     \
+    type val = var[i];  \
+    var[i] = var[j];    \
+    var[j] = val;       \
+  }
+    while (i < j) {
+      printf("=== swap %u %u %u %u\n", i, j, viewIndexStart, *viewIndex - 1);
+      swap(nsMsgKey, m_keys);
+      swap(uint32_t, m_flags);
+      swap(uint8_t, m_levels);
+      i++;
+      j--;
+    }
+  }
   return NS_OK;
 }
 
 void nsMsgDBView::InsertEmptyRows(nsMsgViewIndex viewIndex, int32_t numRows) {
diff --git a/mailnews/base/src/nsMsgDBView.h b/mailnews/base/src/nsMsgDBView.h
--- a/mailnews/base/src/nsMsgDBView.h
+++ b/mailnews/base/src/nsMsgDBView.h
@@ -516,8 +516,14 @@ class nsMsgDBView : public nsIMsgDBView,
   nsIMsgCustomColumnHandler* GetCurColumnHandler();
   bool CustomColumnsInSortAndNotRegistered();
   void EnsureCustomColumnsValid();
 
+  bool mReversedThreading;
+  inline bool ReversedThreading() {
+    return mReversedThreading && m_sortType == nsMsgViewSortType::byDate &&
+           m_sortOrder == nsMsgViewSortOrder::descending;
+  }
+
  protected:
   static nsresult InitDisplayFormats();
 
  private:
diff --git a/mailnews/base/src/nsMsgThreadedDBView.cpp b/mailnews/base/src/nsMsgThreadedDBView.cpp
--- a/mailnews/base/src/nsMsgThreadedDBView.cpp
+++ b/mailnews/base/src/nsMsgThreadedDBView.cpp
@@ -233,10 +233,17 @@ nsresult nsMsgThreadedDBView::SortThread
       uint32_t numExpanded;
       m_flags[j] = flags | nsMsgMessageFlags::Elided;
       ExpandByIndex(j, &numExpanded);
       j += numExpanded;
-      if (numExpanded > 0)
-        m_flags[j - numExpanded] = flags | MSG_VIEW_FLAG_HASCHILDREN;
+      if (numExpanded > 0) {
+        if (ReversedThreading()) {
+          m_flags[j] = flags | MSG_VIEW_FLAG_HASCHILDREN;
+          printf("=== SortThreads (1a): setting bit on %u\n", j);
+        } else {
+          m_flags[j - numExpanded] = flags | MSG_VIEW_FLAG_HASCHILDREN;
+          printf("=== SortThreads (1b): setting bit on %u %u %u\n", j, numExpanded, j - numExpanded);
+        }
+      }
     } else if (flags & MSG_VIEW_FLAG_ISTHREAD &&
                !(flags & MSG_VIEW_FLAG_HASCHILDREN)) {
       nsCOMPtr<nsIMsgDBHdr> msgHdr;
       nsCOMPtr<nsIMsgThread> pThread;
@@ -245,11 +252,13 @@ nsresult nsMsgThreadedDBView::SortThread
         m_db->GetThreadContainingMsgHdr(msgHdr, getter_AddRefs(pThread));
         if (pThread) {
           uint32_t numChildren;
           pThread->GetNumChildren(&numChildren);
-          if (numChildren > 1)
+          if (numChildren > 1) {
+            printf("=== SortThreads (2): setting bit on %u\n", j);
             m_flags[j] =
                 flags | MSG_VIEW_FLAG_HASCHILDREN | nsMsgMessageFlags::Elided;
+          }
         }
       }
     }
   }
@@ -262,8 +271,9 @@ nsresult nsMsgThreadedDBView::SortThread
 NS_IMETHODIMP
 nsMsgThreadedDBView::Sort(nsMsgViewSortTypeValue sortType,
                           nsMsgViewSortOrderValue sortOrder) {
   nsresult rv;
+  printf("=== nsMsgThreadedDBView::Sort\n");
 
   int32_t rowCountBeforeSort = GetSize();
 
   if (!rowCountBeforeSort) {
diff --git a/mailnews/mailnews.js b/mailnews/mailnews.js
--- a/mailnews/mailnews.js
+++ b/mailnews/mailnews.js
@@ -110,8 +110,11 @@ pref("mailnews.default_news_sort_type", 
 // threaded mode should be based on the newest message in the thread, or on
 // the thread root
 pref("mailnews.sort_threads_by_root", false);
 
+// Reversed threading when ordered by date descending.
+pref("mailnews.reversed_threading", false);
+
 // default view flags for new folders
 // both flags are int values reflecting nsMsgViewFlagsType values
 // as defined in nsIMsgDBView.idl (kNone = 0, kThreadedDisplay = 1 etc.)
 
