# HG changeset patch
# User alta88@fixall.com
# Date 1711898614 -7200
# Parent  4e7a83058b8b67ec4bd1fe4ba0427c5dd7936628
Feature: Tab title persist and restore.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

* * * From 23a-feature-restore-tab-title.patch authored by Betterbird:
https://github.com/Betterbird/thunderbird-patches/blob/main/128/unused/23a-feature-restore-tab-title.patch

Feature: Tab title persist and restore, further tweaks.

diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -204,8 +204,10 @@ var mailTabType = {
             "mail.tabs.firstTab.startupURI",
             ""
           );
           if (startup) {
+            // The persisted title can be wrong, so don't use it.
+            persistedState.title = "";
             const f = MailUtils.getExistingFolder(startup);
             if (f) {
               persistedState.folderURI = f.URI;
             }
@@ -236,8 +238,14 @@ var mailTabType = {
             } catch (ex) {
               console.error(ex);
             }
           }
+
+          // Restore the last title immediately for firstTab.
+          if (restoreState.state?.title) {
+            tabmail.tabInfo[0].title = restoreState.state.title;
+            tabmail.setTabTitle(tabmail.tabInfo[0]);
+          }
         }
 
         const { chromeBrowser, closed } = tabmail.tabInfo[0];
         if (
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -911,8 +911,14 @@ ChromeUtils.defineESModuleGetters(this, 
           }
         }
 
         const restoreState = this._restoringTabState;
+
+        // Set the title property immediately only if there is a restore value.
+        if (restoreState?.state?.title) {
+          tab.title = restoreState.state.title;
+        }
+
         for (const tabMonitor of this.tabMonitors) {
           try {
             if (
               "onTabRestored" in tabMonitor &&
@@ -1311,8 +1317,14 @@ ChromeUtils.defineESModuleGetters(this, 
 
       if (!tabState) {
         return null;
       }
+      // Persist the last title for snappy startup restore.
+      // Don't persist for calendar, etc. to avoid persisting
+      // stale localizations.
+      if (!["calendar", "tasks", "chat"].includes(tab.mode.type)) {
+        tabState.title = tab.title;
+      }
 
       const ext = {};
       for (const tabMonitor of this.tabMonitors) {
         try {
@@ -1715,8 +1727,15 @@ ChromeUtils.defineESModuleGetters(this, 
             console.error(ex);
           }
         }
 
+        // Current title is either from session store for restored tabs, or the
+        // tab mode's title (usually "Loading") for new tabs. Don't update
+        // with an empty value.
+        if (!newLabel) {
+          return;
+        }
+
         // If the displayed tab is the one at the moment of creation
         // (aTabNodeOrInfo is null), set the default title as its title.
         tabNode.setAttribute("label", newLabel);
         // Update the window title if we're the displayed tab.
