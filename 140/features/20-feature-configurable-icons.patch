# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1717836113 -7200
# Parent  76b4398ad4e19f84ee6c91f186f30759895a04ce
Feature: Configurable icons.

diff --git a/mail/installer/package-manifest.in b/mail/installer/package-manifest.in
--- a/mail/installer/package-manifest.in
+++ b/mail/installer/package-manifest.in
@@ -198,9 +198,17 @@
 @RESPATH@/chrome/messenger.manifest
 @RESPATH@/chrome/pdfjs.manifest
 @RESPATH@/chrome/pdfjs/*
 #ifndef XP_UNIX
-@RESPATH@/chrome/icons/default/messengerWindow.ico
+; These icons are Windows specific and are used in Mozilla platform code
+; to put a specific icon on an application window. If no icon exists,
+; the default icon from the resource in the executable is used.
+; We're not packaging messengerWindow.ico so the users can install
+; their own icon without it getting overwritten on every install.
+; messengerWindow.ico is not needed since it will default to the standard
+; application icon. We don't package newmail.ico for the same reason.
+; @RESPATH@/chrome/icons/default/messengerWindow.ico
+; We only need icons for compose and calendar alarm/general windows.
 @RESPATH@/chrome/icons/default/msgcomposeWindow.ico
 @RESPATH@/chrome/icons/default/calendar-alarm-dialog.ico
 @RESPATH@/chrome/icons/default/calendar-general-dialog.ico
 #elifdef UNIX_BUT_NOT_MAC
diff --git a/mailnews/base/src/nsMessengerWinIntegration.cpp b/mailnews/base/src/nsMessengerWinIntegration.cpp
--- a/mailnews/base/src/nsMessengerWinIntegration.cpp
+++ b/mailnews/base/src/nsMessengerWinIntegration.cpp
@@ -21,8 +21,10 @@
 #include "nsIWindowMediator.h"
 #include "nsMessengerWinIntegration.h"
 #include "nsServiceManagerUtils.h"
 #include "nsPIDOMWindow.h"
+#include "nsIFile.h"
+#include "nsIProperties.h"
 
 #define IDI_MAILBIFF 32576
 #define SHOW_TRAY_ICON_PREF "mail.biff.show_tray_icon"
 #define SHOW_TRAY_ICON_ALWAYS_PREF "mail.biff.show_tray_icon_always"
@@ -54,8 +56,79 @@ NS_INTERFACE_MAP_BEGIN(nsMessengerWinInt
   NS_INTERFACE_MAP_ENTRY(nsIMessengerWindowsIntegration)
   NS_INTERFACE_MAP_ENTRY(nsIMessengerOSIntegration)
 NS_INTERFACE_MAP_END
 
+// Adapted from widget/nsBaseWidget.cpp, it's private :-(
+static void ResolveIconName(const nsAString& aIconName,
+                            const nsAString& aIconSuffix, nsIFile** aResult) {
+  *aResult = nullptr;
+  nsCOMPtr<nsIProperties> dirSvc =
+      do_GetService(NS_DIRECTORY_SERVICE_CONTRACTID);
+  if (!dirSvc) return;
+
+  // Check the main app chrome directory.
+  nsCOMPtr<nsIFile> file;
+  dirSvc->Get("AChrom", NS_GET_IID(nsIFile), getter_AddRefs(file));
+  if (!file) return;
+
+  file->Append(u"icons"_ns);
+  file->Append(u"default"_ns);
+  file->Append(aIconName + aIconSuffix);
+  bool readable;
+  if (NS_SUCCEEDED(file->IsReadable(&readable)) && readable) {
+    file.forget(aResult);
+  }
+}
+
+static HICON GetIcon(LPCWSTR idi) {
+  static bool iconsCached = false;
+  static HICON iconApp;
+  static HICON iconBiff;
+
+  if (!iconsCached) {
+    nsCOMPtr<nsIFile> iconAppFile;
+    nsCOMPtr<nsIFile> iconBiffFile;
+
+    ResolveIconName(u"messengerWindow"_ns, u".ico"_ns,
+                    getter_AddRefs(iconAppFile));
+    if (!iconAppFile) {
+      iconApp = ::LoadIcon(::GetModuleHandle(NULL), IDI_APPLICATION);
+    } else {
+      nsAutoString iconAppPath;
+      iconAppFile->GetPath(iconAppPath);
+      ::SetLastError(0);
+      iconApp =
+          (HICON)::LoadImageW(nullptr, (LPCWSTR)iconAppPath.get(), IMAGE_ICON,
+                              ::GetSystemMetrics(SM_CXICON),
+                              ::GetSystemMetrics(SM_CYICON), LR_LOADFROMFILE);
+      if (!iconApp) {
+        iconApp = ::LoadIcon(::GetModuleHandle(NULL), IDI_APPLICATION);
+      }
+    }
+
+    ResolveIconName(u"newmail"_ns, u".ico"_ns, getter_AddRefs(iconBiffFile));
+    if (!iconBiffFile) {
+      iconBiff =
+          ::LoadIcon(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_MAILBIFF));
+    } else {
+      nsAutoString iconBiffPath;
+      iconBiffFile->GetPath(iconBiffPath);
+      ::SetLastError(0);
+      iconBiff =
+          (HICON)::LoadImageW(nullptr, (LPCWSTR)iconBiffPath.get(), IMAGE_ICON,
+                              ::GetSystemMetrics(SM_CXICON),
+                              ::GetSystemMetrics(SM_CYICON), LR_LOADFROMFILE);
+      if (!iconBiff) {
+        iconBiff =
+            LoadIcon(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_MAILBIFF));
+      }
+    }
+
+    iconsCached = true;
+  }
+  return idi == IDI_APPLICATION ? iconApp : iconBiff;
+}
+
 static HWND hwndForDOMWindow(mozIDOMWindowProxy* window) {
   if (!window) {
     return 0;
   }
@@ -216,9 +289,9 @@ nsresult nsMessengerWinIntegration::Hide
     auto idi = IDI_APPLICATION;
     if (sUnreadCount > 0) {
       idi = MAKEINTRESOURCE(IDI_MAILBIFF);
     }
-    sMailIconData.hIcon = ::LoadIcon(::GetModuleHandle(NULL), idi);
+    sMailIconData.hIcon = GetIcon(idi);
     nsresult rv = SetTooltip();
     NS_ENSURE_SUCCESS(rv, rv);
 
     ::Shell_NotifyIconW(NIM_ADD, &sMailIconData);
@@ -350,9 +423,9 @@ nsresult nsMessengerWinIntegration::Upda
     if (sUnreadCount > 0) {
       // Only showing the new mail marker when there are actual unread mail
       idi = MAKEINTRESOURCE(IDI_MAILBIFF);
     }
-    sMailIconData.hIcon = ::LoadIcon(::GetModuleHandle(NULL), idi);
+    sMailIconData.hIcon = GetIcon(idi);
     if (mTrayIconShown) {
       // If the tray icon is already shown, just modify it.
       ::Shell_NotifyIconW(NIM_MODIFY, &sMailIconData);
     } else {
@@ -368,10 +441,9 @@ nsresult nsMessengerWinIntegration::Upda
     }
   } else if (mTrayIconShown) {
     if (sHiddenWindows.Length() > 0) {
       // At least one window is minimized, modify the icon only.
-      sMailIconData.hIcon =
-          ::LoadIcon(::GetModuleHandle(NULL), IDI_APPLICATION);
+      sMailIconData.hIcon = GetIcon(IDI_APPLICATION);
       ::Shell_NotifyIconW(NIM_MODIFY, &sMailIconData);
     } else if (!showTrayIconAlways) {
       // No unread, no need to show the tray icon.
       ::Shell_NotifyIconW(NIM_DELETE, &sMailIconData);
