# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1744232892 -7200
# Parent  6e2aa4ce4e56a94ecd724c9c04b425fb78a535f6
Bug 1831500 - Reinstate feedback during search: Re-instate batching, introduce variable batch size of 5, 10 and 20, 100 and 1000.

diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.cpp b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
--- a/mailnews/base/src/nsMsgQuickSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
@@ -281,24 +281,51 @@ nsMsgQuickSearchDBView::OnSearchHit(nsIM
   if (!m_db) return NS_ERROR_NULL_POINTER;
   // remember search hit and when search is done, reconcile cache
   // with new hits;
   m_hdrHits.AppendObject(aMsgHdr);
+  bool switchedOffBatching = false;
+  // When doing Quicksearch, interrupt batching to give some immediate feedback.
+  if (m_doingQuickSearch) {
+    if (mJSTree && m_hdrHits.Length() > 0 &&
+        (m_hdrHits.Length() % m_batchSize == 0)) {
+      switchedOffBatching = true;
+      mJSTree->EndUpdateBatch();
+      // Slowly increase batch size, so first results come quickly.
+      if (m_hdrHits.Length() >= 500) {
+        // Make batch size huge, so batching is mostly switched off.
+        m_batchSize = 1000;
+      } else if (m_hdrHits.Length() >= 100) {
+        m_batchSize = 100;
+      } else if (m_hdrHits.Length() >= 40) {
+        m_batchSize = 20;
+      } else if (m_hdrHits.Length() >= 20) {
+        m_batchSize = 10;
+      }
+      // nsCString msg = nsPrintfCString("QF batch size now %d", m_batchSize);
+      // MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+      //                  NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+      //                  nsIScriptError::infoFlag);
+    }
+  }
+
   nsMsgKey key;
   aMsgHdr->GetMessageKey(&key);
   // Is FindKey going to be expensive here? A lot of hits could make
   // it a little bit slow to search through the view for every hit.
+  nsresult rv;
   if (m_cacheEmpty || FindKey(key, false) == nsMsgViewIndex_None)
-    return AddHdr(aMsgHdr);
+    rv = AddHdr(aMsgHdr);
   else
-    return NS_OK;
+    rv = NS_OK;
+
+  if (switchedOffBatching) mJSTree->BeginUpdateBatch();
+  return rv;
 }
 
 NS_IMETHODIMP
 nsMsgQuickSearchDBView::OnSearchDone(nsresult status) {
-  if (!m_doingQuickSearch) {
-    // This batch began in OnNewSearch.
-    if (mJSTree) mJSTree->EndUpdateBatch();
-  }
+  // This batch began in OnNewSearch.
+  if (mJSTree) mJSTree->EndUpdateBatch();
 
   // We're a single-folder virtual folder if viewFolder != folder, and that is
   // the only case in which we want to be messing about with a results cache
   // or unread counts.
@@ -386,8 +413,9 @@ nsMsgQuickSearchDBView::OnNewSearch() {
   m_hdrHits.Clear();
   m_usingCachedHits = false;
   m_cacheEmpty = true;
   m_doingQuickSearch = true;
+  m_batchSize = 5;  // Give the user the first results quickly.
   nsCOMPtr<nsIMsgSearchSession> searchSession =
       do_QueryReferent(m_searchSession);
   if (searchSession) searchSession->SuppressSearch(false);
 
@@ -504,13 +532,9 @@ nsMsgQuickSearchDBView::OnNewSearch() {
     }
   }
 
   // Prevent updates for every message found. This batch ends in OnSearchDone.
-  // Do this only when updating virtual folders, not for quick search which
-  // needs immediate results.
-  if (!m_doingQuickSearch) {
-    if (mJSTree) mJSTree->BeginUpdateBatch();
-  }
+  if (mJSTree) mJSTree->BeginUpdateBatch();
 
   return NS_OK;
 }
 
diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.h b/mailnews/base/src/nsMsgQuickSearchDBView.h
--- a/mailnews/base/src/nsMsgQuickSearchDBView.h
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.h
@@ -61,8 +61,9 @@ class nsMsgQuickSearchDBView : public ns
   bool m_usingCachedHits;
   bool m_cacheEmpty;
   bool m_doingQuickSearch;
   nsCOMArray<nsIMsgDBHdr> m_hdrHits;
+  int m_batchSize;
   virtual nsresult AddHdr(nsIMsgDBHdr* msgHdr,
                           nsMsgViewIndex* resultIndex = nullptr) override;
   virtual nsresult OnNewHeader(nsIMsgDBHdr* newHdr, nsMsgKey aParentKey,
                                bool ensureListed) override;
