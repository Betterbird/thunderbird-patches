# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1745685708 -7200
# Parent  f97850d123dbbf6f03786fa7ad2852f50032b0c2
Feed Subscribe dialog enhancements
NOTE: This UI should be rewritten/redesigned and remove xul/nsITree.

1. Improve tolerance of opml import from 3rd parties.
2. Opml file creation enhancements; save creator, feedType, folder outline type.
3. Subscribe dialog ui/visual improvements and regression fixes; fix icons, show
   feedType.
4. Enable feeditem move (default drag) and copy (ctrl after dragstart) cursor
   indicators.
5. Improve keyboard support.
6. Fix Bug 1571561 - For feeds with file: URL, disable the "Validate" button.
7. Fix Bug 1586585 - Subscribe to feed dialog: pressing enter in the URL field
   should trigger "Add" button behaviour.
8. Respect the user's dialog size and position preferences.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/themes/linux/mail/newsblog/feed-subscriptions.css b/mail/themes/linux/mail/newsblog/feed-subscriptions.css
--- a/mail/themes/linux/mail/newsblog/feed-subscriptions.css
+++ b/mail/themes/linux/mail/newsblog/feed-subscriptions.css
@@ -4,4 +4,9 @@
 
 /* ::::: Feed Subscription styling :::::: */
 
 @import url("chrome://messenger/skin/shared/feedSubscribe.css");
+
+#selectFolder {
+  margin-block: 2px;
+  padding-block: 4px !important;
+}
diff --git a/mail/themes/osx/mail/newsblog/feed-subscriptions.css b/mail/themes/osx/mail/newsblog/feed-subscriptions.css
--- a/mail/themes/osx/mail/newsblog/feed-subscriptions.css
+++ b/mail/themes/osx/mail/newsblog/feed-subscriptions.css
@@ -8,4 +8,9 @@
 
 #subscriptionsDialog {
   padding: 4px;
 }
+
+#selectFolder {
+  margin-block: 2px;
+  padding-block: 4px !important;
+}
diff --git a/mail/themes/shared/mail/feedSubscribe.css b/mail/themes/shared/mail/feedSubscribe.css
--- a/mail/themes/shared/mail/feedSubscribe.css
+++ b/mail/themes/shared/mail/feedSubscribe.css
@@ -2,24 +2,74 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #feedSubscriptions {
-  min-width: 60em;
+  min-width: 20em;
   min-height: 40em;
 }
 
-#rssSubscriptionsList > treechildren::-moz-tree-image {
+treechildren::-moz-tree-image {
   width: 16px;
   height: 16px;
   -moz-context-properties: fill, fill-opacity, stroke;
-  fill: color-mix(in srgb, var(--default) 20%, transparent);
-  stroke: var(--default);
+}
+
+/* An svg background-image in treechildren does not recognize stroke/fill. */
+treechildren::-moz-tree-cell-text(folderNameCol, newMessages-true) {
+  background: none !important;
+}
+/* ..... Feed server/account ..... */
+treechildren::-moz-tree-image(folderNameCol, isServer-true, serverType-rss) {
+  list-style-image: var(--folder-pane-rss);
+  fill: var(--primary-fill);
+  stroke: var(--primary-stroke);
+}
+/* ..... Feed folder ..... */
+treechildren::-moz-tree-image(folderNameCol, isFeedFolder-true) {
+  list-style-image: var(--folder-pane-folder-rss);
+  fill: color-mix(in srgb, var(--folder-color-folder-rss) 20%, transparent);
+  stroke: var(--folder-color-folder-rss) !important;
+}
+/* ..... Feed subscription item ..... */
+treechildren::-moz-tree-image(feedTypeCol, isFeed-true),
+treechildren::-moz-tree-image(folderNameCol, isFeed-true) {
+  list-style-image: var(--folder-pane-rss);
+  fill: color-mix(in srgb, var(--folder-color-rss) 20%, transparent);
+  stroke: var(--folder-color-rss);
+}
+
+treechildren::-moz-tree-image(feedTypeCol, isFeed-true, isAtomFeed) {
+  stroke: MediumAquamarine; /* Atom feed color from somewhere */
+}
+
+treechildren::-moz-tree-image(isPaused),
+treechildren::-moz-tree-cell-text(isPaused) {
+  opacity: 0.6;
+}
+
+treechildren::-moz-tree-image(folderNameCol, isFeedFolder-true, isBusy),
+treechildren::-moz-tree-image(feedTypeCol, isBusy) {
+  list-style-image: var(--icon-clock);
+  --icon-color: var(--button-primary-background-color);
+  fill: color-mix(in srgb, var(--icon-color) 20%, transparent);
+  stroke: var(--icon-color);
+}
+
+treechildren::-moz-tree-image(folderNameCol, isFeedFolder-true, hasError),
+treechildren::-moz-tree-image(feedTypeCol, hasError) {
+  list-style-image: var(--icon-warning);
+  fill: var(--color-red-60);
+  stroke: var(--color-amber-30);
 }
 
 #folderNameCol {
   flex: 2 2;
 }
 
+#feedTypeCol {
+  width: 138px;
+}
+
 #rssFeedInfoBox {
   border: 1px solid ThreeDShadow;
   margin: 4px;
   padding-top: 4px;
@@ -33,8 +83,13 @@
     background-color: rgba(255, 255, 255, 0.05);
   }
 }
 
+#locationValidate[disabled] {
+  color: GrayText !important;
+  cursor: default;
+}
+
 #autotagPrefix {
   max-width: 15em;
 }
 
diff --git a/mail/themes/shared/mail/folderPane.css b/mail/themes/shared/mail/folderPane.css
--- a/mail/themes/shared/mail/folderPane.css
+++ b/mail/themes/shared/mail/folderPane.css
@@ -124,43 +124,8 @@ treechildren::-moz-tree-image(folderName
   fill: var(--primary-fill);
   stroke: var(--primary-stroke);
 }
 
-/* ..... Feed server/account ..... */
-treechildren::-moz-tree-image(folderNameCol, isServer-true, serverType-rss) {
-  list-style-image: var(--folder-pane-rss);
-  fill: var(--primary-fill);
-  stroke: var(--primary-stroke);
-}
-/* ..... Feed folder ..... */
-treechildren::-moz-tree-image(folderNameCol, isFeedFolder-true) {
-  list-style-image: var(--folder-pane-folder-rss);
-  fill: color-mix(in srgb, var(--folder-color-folder-rss) 20%, transparent);
-  stroke: var(--folder-color-folder-rss);
-}
-/* ..... Feed message or subscription item ..... */
-treechildren::-moz-tree-image(folderNameCol, isFeed-true) {
-  list-style-image: var(--folder-pane-rss);
-  fill: color-mix(in srgb, var(--folder-color-rss) 20%, transparent);
-  stroke: var(--folder-color-rss);
-}
-
-treechildren::-moz-tree-image(folderNameCol, serverIsPaused),
-treechildren::-moz-tree-cell-text(folderNameCol, serverIsPaused),
-treechildren::-moz-tree-image(folderNameCol, isPaused),
-treechildren::-moz-tree-cell-text(folderNameCol, isPaused) {
-  opacity: 0.6;
-}
-
-treechildren::-moz-tree-image(folderNameCol, isBusy) {
-  list-style-image: url("chrome://messenger/skin/icons/waiting.svg");
-}
-
-treechildren::-moz-tree-image(folderNameCol, hasError) {
-  list-style-image: url("chrome://global/skin/icons/warning.svg");
-  fill: #e62117;
-}
-
 /* ..... Local folders ..... */
 treechildren::-moz-tree-image(folderNameCol, isServer-true, serverType-none) {
   list-style-image: var(--folder-pane-folder);
   fill: var(--primary-fill);
diff --git a/mail/themes/windows/mail/newsblog/feed-subscriptions.css b/mail/themes/windows/mail/newsblog/feed-subscriptions.css
--- a/mail/themes/windows/mail/newsblog/feed-subscriptions.css
+++ b/mail/themes/windows/mail/newsblog/feed-subscriptions.css
@@ -4,4 +4,9 @@
 
 /* ::::: Feed Subscription styling :::::: */
 
 @import url("chrome://messenger/skin/shared/feedSubscribe.css");
+
+#selectFolder {
+  margin-block: 0;
+  padding-block: 2px !important;
+}
diff --git a/mailnews/extensions/newsblog/Feed.sys.mjs b/mailnews/extensions/newsblog/Feed.sys.mjs
--- a/mailnews/extensions/newsblog/Feed.sys.mjs
+++ b/mailnews/extensions/newsblog/Feed.sys.mjs
@@ -372,8 +372,26 @@ Feed.prototype = {
       aNewTitle
     );
   },
 
+  get feedType() {
+    return lazy.FeedUtils.getSubscriptionAttr(
+      this.url,
+      this.server,
+      "feedType",
+      ""
+    );
+  },
+
+  set feedType(feedType) {
+    lazy.FeedUtils.setSubscriptionAttr(
+      this.url,
+      this.server,
+      "feedType",
+      feedType
+    );
+  },
+
   get lastModified() {
     return lazy.FeedUtils.getSubscriptionAttr(
       this.url,
       this.server,
@@ -667,10 +685,13 @@ Feed.prototype = {
     if (aFeed.parseItems) {
       // Do this only if we're in parse/store mode.
       aFeed.removeInvalidItems(false);
 
-      if (aCode == lazy.FeedUtils.kNewsBlogSuccess && aFeed.mLastModified) {
-        aFeed.lastModified = aFeed.mLastModified;
+      if (aCode == lazy.FeedUtils.kNewsBlogSuccess) {
+        if (aFeed.mLastModified) {
+          aFeed.lastModified = aFeed.mLastModified;
+        }
+        aFeed.feedType = aFeed.mFeedType;
       }
 
       // Flush any feed item changes to disk.
       const ds = lazy.FeedUtils.getItemsDS(aFeed.server);
diff --git a/mailnews/extensions/newsblog/FeedUtils.sys.mjs b/mailnews/extensions/newsblog/FeedUtils.sys.mjs
--- a/mailnews/extensions/newsblog/FeedUtils.sys.mjs
+++ b/mailnews/extensions/newsblog/FeedUtils.sys.mjs
@@ -543,10 +543,14 @@ export var FeedUtils = {
     const ds = this.getSubscriptionsDS(aFeed.server);
     ds.data = ds.data.filter(x => x.url != aFeed.url);
     ds.saveSoon();
 
+    this.clearStatus(aFeed.folder, aFeed.url);
+
     // Update folderpane.
-    Services.obs.notifyObservers(aFeed.folder, "folder-properties-changed");
+    if (aFeed.folder) {
+      Services.obs.notifyObservers(aFeed.folder, "folder-properties-changed");
+    }
   },
 
   /**
    * Change an existing feed's url.
@@ -837,8 +841,25 @@ export var FeedUtils = {
     return this[serverKey][aUrl].status;
   },
 
   /**
+   * Clear the status runtime cache.
+   *
+   * @param {nsIMsgFolder} folder - Folder.
+   * @param {string} url - Url key (feed url or folder URI).
+   * @returns {void}
+   */
+  clearStatus(folder, url) {
+    if (!folder || !url) {
+      return;
+    }
+
+    if (this[folder.server.serverURI]) {
+      delete this[folder.server.serverURI][url];
+    }
+  },
+
+  /**
    * Update a feed or folder status and refresh folderpane.
    *
    * @param {nsIMsgFolder} aFolder - Folder.
    * @param {string} aUrl - Url key (feed url or folder URI).
@@ -865,9 +886,9 @@ export var FeedUtils = {
     Services.obs.notifyObservers(aFolder, "folder-properties-changed");
 
     const win = Services.wm.getMostRecentWindow("Mail:News-BlogSubscriptions");
     if (win) {
-      win.FeedSubscriptions.mView.tree.invalidate();
+      win.FeedSubscriptions?.mView?.tree?.invalidate();
     }
   },
 
   /**
@@ -1144,8 +1165,9 @@ export var FeedUtils = {
         const feed = new lazy.Feed(sub.url, aFolder);
         FeedUtils.deleteFeed(feed);
       });
       // note: deleteFeed() calls saveSoon(), so we don't need to.
+      this.clearStatus(aFolder, aFolder.URI);
     } else if (aFolder.server == aOrigFolder.server) {
       // Staying in same account - just update destFolder as required
       for (const sub of affectedSubs) {
         sub.destFolder = folderURI;
@@ -1889,9 +1911,9 @@ export var FeedUtils = {
           // Nice touch: notify so the window ca select the folder that now
           // contains the newly subscribed feed.
           // This is particularly nice if we just finished subscribing
           // to a feed URL that the operating system gave us.
-          Services.obs.notifyObservers(feed.folder, "folder-subscribed");
+          Services.obs.notifyObservers(feed.folder, "folder-attention");
 
           // Check for an existing feed subscriptions window and update it.
           const subscriptionsWindow = Services.wm.getMostRecentWindow(
             "Mail:News-BlogSubscriptions"
@@ -1928,9 +1950,9 @@ export var FeedUtils = {
           }
 
           feed.options = options;
           FeedUtils.setStatus(feed.folder, feed.url, "lastUpdateTime", now);
-        } else if (aDisable) {
+        } else if (!this.mSubscribeMode && aDisable) {
           if (
             Services.prefs.getBoolPref("rss.disable_feeds_on_update_failure")
           ) {
             // Do not keep retrying feeds with error states. Set persisted state
diff --git a/mailnews/extensions/newsblog/feed-subscriptions.js b/mailnews/extensions/newsblog/feed-subscriptions.js
--- a/mailnews/extensions/newsblog/feed-subscriptions.js
+++ b/mailnews/extensions/newsblog/feed-subscriptions.js
@@ -14,8 +14,11 @@ var { FeedUtils } = ChromeUtils.importES
 );
 var { MailServices } = ChromeUtils.importESModule(
   "resource:///modules/MailServices.sys.mjs"
 );
+var { AppConstants } = ChromeUtils.importESModule(
+  "resource://gre/modules/AppConstants.sys.mjs"
+);
 var { FileUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/FileUtils.sys.mjs"
 );
 var { PluralForm } = ChromeUtils.importESModule(
@@ -26,8 +29,11 @@ var { UIFontSize } = ChromeUtils.importE
 );
 var { FolderUtils } = ChromeUtils.importESModule(
   "resource:///modules/FolderUtils.sys.mjs"
 );
+var { XULStoreUtils } = ChromeUtils.importESModule(
+  "resource:///modules/XULStoreUtils.sys.mjs"
+);
 
 var FeedSubscriptions = {
   get mMainWin() {
     return Services.wm.getMostRecentWindow("mail:3pane");
@@ -62,11 +68,18 @@ var FeedSubscriptions = {
     if (window.arguments && window.arguments[0].folder) {
       folder = window.arguments[0].folder;
     }
 
+    // Ensure user height is set otherwise sizeToContent() will shrink the
+    // user's desired size upon open.
+    window.document.documentElement.style.minHeight =
+      window.document.documentElement.getAttribute("height") + "px";
+
     // Ensure dialog is fully loaded before selecting, to get visible row.
     setTimeout(() => {
       FeedSubscriptions.refreshSubscriptionView(folder);
+      // sizeToContent() has finished, allow resizing.
+      window.document.documentElement.style.minHeight = "";
     }, 100);
     const message = FeedUtils.strings.GetStringFromName("subscribe-loading");
     this.updateStatusItem("statusText", message);
 
@@ -79,8 +92,22 @@ var FeedSubscriptions = {
     UIFontSize.registerWindow(window);
   },
 
   onDialogAccept() {
+    FeedUtils.log.log(
+      `onDialogAccept: width ${window.innerWidth}, height ${window.innerHeight}`
+    );
+    FeedUtils.log.log(
+      `onDialogAccept: screenX ${window.screenX}, screenY ${window.screenY}`
+    );
+    // Explicitly persist the correct values and open the dialog with them.
+    const URL = window.document.URL;
+    const docId = "feedSubscriptions";
+    XULStoreUtils.setValue(URL, docId, "width", window.innerWidth);
+    XULStoreUtils.setValue(URL, docId, "height", window.innerHeight);
+    XULStoreUtils.setValue(URL, docId, "screenX", window.screenX);
+    XULStoreUtils.setValue(URL, docId, "screenY", window.screenY);
+
     let dismissDialog = true;
 
     // If we are in the middle of subscribing to a feed, inform the user that
     // dismissing the dialog right now will abort the feed subscription.
@@ -117,12 +144,12 @@ var FeedSubscriptions = {
     return dismissDialog;
   },
 
   refreshSubscriptionView(aSelectFolder, aSelectFeedUrl) {
-    const item = this.mView.currentItem;
+    this.mTree.view = this.mView;
     this.loadSubscriptions();
-    this.mTree.view = this.mView;
-
+
+    const item = this.mView.currentItem;
     if (aSelectFolder && !aSelectFeedUrl) {
       this.selectFolder(aSelectFolder);
     } else if (item) {
       // If no folder to select, try to select the pre rebuild selection, in
@@ -142,9 +169,9 @@ var FeedSubscriptions = {
         this.selectFeed({ folder: rootFolder, url }, null);
       }
     }
 
-    this.mView.tree.ensureRowIsVisible(this.mView.selection.currentIndex);
+    this.mView.tree.ensureRowIsVisible(this.mView.selection.currentIndex + 3);
     this.clearStatusInfo();
   },
 
   mView: {
@@ -204,28 +231,35 @@ var FeedSubscriptions = {
     getCellValue() {},
     setCellValue() {},
     setCellText() {},
 
-    getCellProperties(aRow) {
+    getCellProperties(aRow, aColumn) {
       const item = this.getItemAtIndex(aRow);
       if (!item) {
         return "";
       }
 
-      const url = item.folder ? null : item.url;
-      const folder = item.folder || item.parentFolder;
-
-      let properties = "folderNameCol";
-      properties = FolderUtils.getFolderProperties(folder, item.open);
-      properties += FeedUtils.getFolderProperties(folder, url);
-      if (
-        this.selection.currentIndex == aRow &&
-        url &&
-        item.options.updates.enabled &&
-        properties.includes("isPaused")
-      ) {
-        item.options.updates.enabled = false;
-        FeedSubscriptions.updateFeedData(item);
+      const isFeed = !item.container;
+      let properties = aColumn.id;
+      if (isFeed) {
+        properties += FeedUtils.getFolderProperties(
+          item.parentFolder,
+          item.url
+        );
+        properties += item.feedType?.startsWith("ATOM")
+          ? " isAtomFeed"
+          : " isRSSFeed";
+      } else {
+        if (aColumn.id != "folderNameCol") {
+          return "";
+        }
+        properties = FolderUtils.getFolderProperties(item.folder, item.open);
+        properties += FeedUtils.getFolderProperties(item.folder);
+        if (!properties.includes("isPaused")) {
+          properties += this.isFolderAncestorPaused(item.folder)
+            ? " isPaused"
+            : "";
+        }
       }
 
       item.properties = properties;
       return properties;
@@ -249,8 +283,26 @@ var FeedSubscriptions = {
 
       return item.children.length == 0;
     },
 
+    isFolderAncestorPaused(folder) {
+      if (folder.isServer) {
+        // If folder is account rootFolder.
+        return null;
+      }
+      let paused = false;
+      while (!paused) {
+        folder = folder.parent;
+        if (folder.isServer) {
+          paused = FeedUtils.getFolderProperties(folder).includes("isPaused");
+          break;
+        }
+        paused = folder.getStringProperty("enabled") == "false";
+      }
+
+      return paused;
+    },
+
     getItemAtIndex(aRow) {
       if (aRow < 0 || aRow >= FeedSubscriptions.mFeedContainers.length) {
         return null;
       }
@@ -322,19 +374,33 @@ var FeedSubscriptions = {
     },
 
     getCellText(aRow, aColumn) {
       const item = this.getItemAtIndex(aRow);
-      return item && aColumn.id == "folderNameCol" ? item.name : "";
+      if (!item) {
+        return "";
+      }
+      if (aColumn.id == "folderNameCol") {
+        return item.name;
+      }
+      if (aColumn.id == "feedTypeCol") {
+        return item.feedType;
+      }
+      return "";
     },
 
-    getImageSrc(aRow) {
+    getImageSrc(aRow, aColumn) {
       const item = this.getItemAtIndex(aRow);
-      if ((item.folder && item.folder.isServer) || item.open) {
+      if (
+        !item ||
+        item.folder?.isServer ||
+        item.open ||
+        aColumn.id != "folderNameCol"
+      ) {
         return "";
       }
 
       if (
-        !item.open &&
+        item.container &&
         (item.properties.includes("hasError") ||
           item.properties.includes("isBusy"))
       ) {
         return "";
@@ -464,9 +530,9 @@ var FeedSubscriptions = {
                 newItem.folder == curItem.parentFolder ||
                 newItem.folder.isServer)
             )
           ) {
-            dragDataResults.canDrop = true;
+            dragDataResults.canDrop = newItem.container;
           }
         }
       } else {
         // Try to get a feed url.
@@ -643,8 +709,9 @@ var FeedSubscriptions = {
       quickMode: defaultQuickMode,
       options: optionsAcct,
       open,
       container: true,
+      properties: "",
       favicon: null,
     };
 
     // If a feed has any sub folders, add them to the list of children.
@@ -712,13 +779,15 @@ var FeedSubscriptions = {
       children: [],
       parentFolder: aFolder,
       name: aFeed.title || aFeed.description || aFeed.url,
       url: aFeed.url,
+      feedType: aFeed.feedType,
       quickMode: aFeed.quickMode,
       options: aFeed.options || FeedUtils.optionsTemplate,
       level: aLevel,
       open: false,
       container: false,
+      properties: "",
       favicon: null,
     };
     return feed;
   },
@@ -736,9 +805,11 @@ var FeedSubscriptions = {
       numFolders++;
     }, this);
 
     this.mFeedContainers = feedContainers;
+    this.mView.tree.rowCountChanged(0, -this.mView.rowCount);
     this.mView.mRowCount = numFolders;
+    this.mView.tree.rowCountChanged(0, this.mView.rowCount);
 
     FeedSubscriptions.mTree.focus();
   },
 
@@ -1010,8 +1081,9 @@ var FeedSubscriptions = {
       // A feed item.  Set the feed location and title info.
       nameValue.value = aItem.name;
       locationValue.value = aItem.url;
       locationValidate.removeAttribute("collapsed");
+      locationValidate.disabled = aItem.url.startsWith("file:");
 
       // Root the location picker to the news & blogs server.
       server = aItem.parentFolder.server;
       displayFolder = aItem.parentFolder;
@@ -1063,9 +1135,11 @@ var FeedSubscriptions = {
     }
 
     const hideRec = recommendedUnitsVal.value == "";
     recommendedUnits.hidden = hideRec;
+    recommendedUnits.disabled = updateValue.disabled;
     recommendedUnitsVal.hidden = hideRec;
+    recommendedUnitsVal.disabled = updateValue.disabled;
 
     // Autotag items.
     const autotagEnable = document.getElementById("autotagEnable");
     const autotagUsePrefix = document.getElementById("autotagUsePrefix");
@@ -1092,9 +1166,9 @@ var FeedSubscriptions = {
 
     selectFolder.setAttribute("hidden", !aIsFeed);
     selectFolder._folder = aFolder;
     selectFolderValue.toggleAttribute("hidden", aIsFeed);
-    selectFolderValue.setAttribute("showfilepath", false);
+    selectFolderValue.removeAttribute("showfilepath");
 
     if (aIsFeed) {
       selectFolderPopup._ensureInitialized();
       selectFolderPopup.selectFolder(aFolder);
@@ -1106,22 +1180,31 @@ var FeedSubscriptions = {
       selectFolderValue.setAttribute("filepath", aFolder.filePath.path);
     }
   },
 
+  onBlurSelectFolderValue(aEvent) {
+    const target = aEvent.target;
+    target.removeAttribute("showfilepath");
+    target.value = target.getAttribute("prettypath");
+  },
+
   onClickSelectFolderValue(aEvent) {
     const target = aEvent.target;
     if (
       ("button" in aEvent &&
         (aEvent.button != 0 ||
-          aEvent.target.localName != "div" ||
+          aEvent.target.localName != "input" ||
           target.selectionStart != target.selectionEnd)) ||
       (aEvent.keyCode && aEvent.keyCode != aEvent.DOM_VK_RETURN)
     ) {
       return;
     }
 
     // Toggle between showing prettyPath and absolute filePath.
-    if (target.getAttribute("showfilepath") == "true") {
+    const showFilePath = target.getAttribute("showfilepath");
+    if (!showFilePath && "button" in aEvent) {
+      target.setAttribute("showfilepath", false);
+    } else if (target.getAttribute("showfilepath") == "true") {
       target.setAttribute("showfilepath", false);
       target.value = target.getAttribute("prettypath");
     } else {
       target.setAttribute("showfilepath", true);
@@ -1315,9 +1398,9 @@ var FeedSubscriptions = {
         this.mView.selection.tree.invalidateRow(
           this.mView.selection.currentIndex
         );
       }
-      if (aNode.id == "updateValue") {
+      if (["biffUnits", "updateValue"].includes(aNode.id)) {
         FeedUtils.setStatus(
           item.parentFolder,
           item.url,
           "updateMinutes",
@@ -1368,13 +1451,31 @@ var FeedSubscriptions = {
     return val ? Math.round(val * 1000) / 1000 : "";
   },
 
   onKeyPress(aEvent) {
+    if (aEvent.target.id == "subscriptionsDialog") {
+      // Close button.
+      return;
+    }
+    if (aEvent.keyCode == aEvent.DOM_VK_RETURN) {
+      if (aEvent.target.localName != "button") {
+        aEvent.preventDefault();
+      }
+      if (aEvent.target.id == "locationValue") {
+        if (!document.getElementById("addFeed").hidden) {
+          this.addFeed();
+        } else if (!document.getElementById("updateFeed").hidden) {
+          this.updateFeed();
+        }
+      }
+      return;
+    }
     if (
       aEvent.keyCode == aEvent.DOM_VK_DELETE &&
-      aEvent.target.id == "rssSubscriptionsList"
+      aEvent.target.id == this.mTree.id
     ) {
       this.removeFeed(true);
+      return;
     }
 
     this.clearStatusInfo();
   },
@@ -1383,8 +1484,9 @@ var FeedSubscriptions = {
     const item = this.mView.currentItem;
     this.updateFeedData(item);
     this.setFocus();
     this.updateButtons(item);
+    this.clearStatusInfo();
   },
 
   updateButtons(aSelectedItem) {
     const item = aSelectedItem;
@@ -1427,15 +1529,19 @@ var FeedSubscriptions = {
 
     const locationValue = document.getElementById("locationValue");
     const updateEnabled = document.getElementById("updateEnabled");
 
+    const updateValue = document.getElementById("updateValue");
+    const biffUnits = document.getElementById("biffUnits");
+
     const quickMode = document.getElementById("quickMode");
     const autotagEnable = document.getElementById("autotagEnable");
     const autotagUsePrefix = document.getElementById("autotagUsePrefix");
     const autotagPrefix = document.getElementById("autotagPrefix");
 
     const addFeedButton = document.getElementById("addFeed");
     const updateFeedButton = document.getElementById("updateFeed");
+    const addCertExceptionButton = document.getElementById("addCertException");
 
     const isServer = item.folder && item.folder.isServer;
     const isFolder = item.folder && !item.folder.isServer;
 
@@ -1444,13 +1550,10 @@ var FeedSubscriptions = {
       quickMode.disabled =
       autotagEnable.disabled =
         false;
 
-    updateEnabled.parentNode
-      .querySelectorAll("input,radio,label")
-      .forEach(element => {
-        element.disabled = !updateEnabled.checked;
-      });
+    updateValue.disabled = !updateEnabled.checked;
+    biffUnits.disabled = !updateEnabled.checked;
 
     autotagUsePrefix.disabled = !autotagEnable.checked;
     autotagPrefix.disabled =
       autotagUsePrefix.disabled || !autotagUsePrefix.checked;
@@ -1469,14 +1572,10 @@ var FeedSubscriptions = {
       quickMode.disabled =
         disable && !FeedUtils.getFeedUrlsInFolder(item.folder);
       // All other options disabled unless intent is to add a feed.
       updateEnabled.disabled = disable;
-      updateEnabled.parentNode
-        .querySelectorAll("input,radio,label")
-        .forEach(element => {
-          element.disabled = disable;
-        });
-
+      updateValue.disabled = disable;
+      biffUnits.disabled = disable;
       autotagEnable.disabled = disable;
 
       addFeedButton.disabled =
         addFeedButton != focusedElement &&
@@ -1489,9 +1588,9 @@ var FeedSubscriptions = {
       if (
         locationValue.value != item.url &&
         locationValue != document.activeElement &&
         focusedElement != updateFeedButton &&
-        focusedElement.id != "addCertException"
+        focusedElement != addCertExceptionButton
       ) {
         locationValue.value = item.url;
       }
       this.setPrefs(locationValue);
@@ -1580,8 +1679,9 @@ var FeedSubscriptions = {
     let message;
     const parse = aParse == null ? true : aParse;
     const mode = aMode == null ? this.kSubscribeMode : aMode;
     const locationValue = document.getElementById("locationValue");
+    const feedType = aParams?.feedType ?? "";
     const quickMode =
       aParams && "quickMode" in aParams
         ? aParams.quickMode
         : document.getElementById("quickMode").checked;
@@ -1662,8 +1762,9 @@ var FeedSubscriptions = {
     const feedProperties = {
       feedName: name,
       feedLocation,
       feedFolder: addFolder,
+      feedType,
       quickMode,
       options,
     };
 
@@ -1696,8 +1797,9 @@ var FeedSubscriptions = {
       feedProperties.feedLocation,
       feedProperties.feedFolder
     );
     feed.title = feedProperties.feedName;
+    feed.feedType = feedProperties.feedType;
     feed.quickMode = feedProperties.quickMode;
     feed.options = feedProperties.options;
     return feed;
   },
@@ -1740,8 +1842,10 @@ var FeedSubscriptions = {
     );
     this.mActionMode = this.kVerifyUrlMode;
     this.updateStatusItem("statusText", message);
     this.updateStatusItem("progressMeter", "?");
+    // Don't let a 304 prevent verification updates.
+    feed.lastModified = FeedUtils.IF_MODIFIED_SINCE;
     feed.download(false, this.mFeedDownloadCallback);
   },
 
   /**
@@ -1796,8 +1900,9 @@ var FeedSubscriptions = {
       // a new subfolder is created if necessary.
       accountMoveCopy = true;
       const mode = moveFeed ? this.kMoveMode : this.kCopyMode;
       const params = {
+        feedType: currentItem.feedType,
         quickMode: currentItem.quickMode,
         name: currentItem.name,
         options: currentItem.options,
       };
@@ -1897,8 +2002,10 @@ var FeedSubscriptions = {
   },
 
   onDragOver(aEvent) {
     this.mView._currentDataTransfer = aEvent.dataTransfer;
+    // Must prevent default. Otherwise dropEffect gets cleared.
+    aEvent.preventDefault();
   },
 
   mFeedDownloadCallback: {
     mSubscribeMode: true,
@@ -1926,10 +2033,10 @@ var FeedSubscriptions = {
         `downloaded: errorCode ${aErrorCode}, folder ${location}`
       );
       let logLevel = "log";
 
-      // Feed is null if our attempt to parse the feed failed.
       let message = "";
+      let feedUrl = feed.url;
       if (
         aErrorCode == FeedUtils.kNewsBlogSuccess ||
         aErrorCode == FeedUtils.kNewsBlogNoNewItems
       ) {
@@ -1951,10 +2058,12 @@ var FeedSubscriptions = {
           message = FeedUtils.strings.GetStringFromName(
             "subscribe-feedVerified"
           );
           win.updateStatusItem("statusText", message);
+          document.getElementById("locationValue").focus();
 
           const currentItem = win.mView.currentItem;
+          feed.feedType = currentItem.feedType = feed.mFeedType;
           // Clear favicon and get afresh.
           FeedUtils.setStatus(feed.folder, feed.url, "favicon", null);
           currentItem.favicon = null;
           FeedUtils.getFavicon(feed.folder, feed.url);
@@ -2041,8 +2150,11 @@ var FeedSubscriptions = {
             );
           }
 
           win.selectFeed(feed, parentIndex);
+          if (win.mActionMode == win.kSubscribeMode) {
+            win.mTree.focus();
+          }
         }
       } else {
         // Non success.  Remove intermediate traces from the feeds database.
         // But only if we're not in verify mode.
@@ -2052,8 +2164,11 @@ var FeedSubscriptions = {
           feed.url &&
           feed.server
         ) {
           FeedUtils.deleteFeed(feed);
+          // Do not setStatus() on feeds/folders if the feedUrl is invalid; it
+          // will create false entries in the db for an invalid url.
+          feedUrl = null;
         }
 
         if (aErrorCode == FeedUtils.kNewsBlogInvalidFeed) {
           message = FeedUtils.strings.GetStringFromName(
@@ -2088,9 +2203,11 @@ var FeedSubscriptions = {
         if (
           win.mActionMode == win.kUpdateMode ||
           win.mActionMode == win.kVerifyUrlMode
         ) {
-          document.getElementById("locationValue").focus();
+          const locationValue = document.getElementById("locationValue");
+          locationValue.value = feed.url;
+          locationValue.focus();
         }
       }
 
       if (message) {
@@ -2105,10 +2222,14 @@ var FeedSubscriptions = {
       win.mActionMode = null;
       win.clearStatusInfo();
       const code = feed.url.startsWith("http") ? aErrorCode : null;
       win.updateStatusItem("statusText", message, code);
-      FeedUtils.setStatus(feed.folder, feed.url, "code", aErrorCode);
-      FeedUtils.setStatus(feed.folder, feed.folder.URI, "code", "");
+      if (feed.folder) {
+        if (feedUrl) {
+          FeedUtils.setStatus(feed.folder, feedUrl, "code", aErrorCode);
+        }
+        FeedUtils.setStatus(feed.folder, feed.folder.URI, "code", "");
+      }
     },
 
     // This gets called after the RSS parser finishes storing a feed item to
     // disk.  aCurrentFeedItems is an integer corresponding to how many feed
@@ -2174,9 +2295,9 @@ var FeedSubscriptions = {
     document.getElementById("addCertException").collapsed = true;
   },
 
   checkValidation(aEvent) {
-    if (aEvent.button != 0) {
+    if (aEvent.button != 0 || aEvent.target.disabled) {
       return;
     }
 
     const validationQuery = "http://validator.w3.org/feed/check.cgi?url=";
@@ -2585,9 +2706,9 @@ var FeedSubscriptions = {
 
     return new Promise(resolve => {
       fp.open(rv => {
         if (rv != Ci.nsIFilePicker.returnOK || !fp.file) {
-          resolve(null);
+          resolve([null, null]);
           return;
         }
 
         this.opmlLastOpenDir = fp.file.parent;
@@ -2619,9 +2740,9 @@ var FeedSubscriptions = {
       );
 
       const opmlDoc = document.implementation.createDocument("", "opml", null);
       const opmlRoot = opmlDoc.documentElement;
-      opmlRoot.setAttribute("version", "1.0");
+      opmlRoot.setAttribute("version", "2.0");
       opmlRoot.setAttribute("xmlns:fz", "urn:forumzilla:");
 
       this.generatePPSpace(opmlRoot, SPACES2);
 
@@ -2638,8 +2759,14 @@ var FeedSubscriptions = {
       this.generatePPSpace(head, SPACES4);
       const dt = opmlDoc.createElement("dateCreated");
       dt.appendChild(opmlDoc.createTextNode(new Date().toUTCString()));
       head.appendChild(dt);
+      this.generatePPSpace(head, SPACES4);
+      const ownerNameText =
+        FeedSubscriptions.brandShortName + " " + AppConstants.MOZ_APP_VERSION;
+      const ownerName = opmlDoc.createElement("ownerName");
+      ownerName.appendChild(opmlDoc.createTextNode(ownerNameText));
+      head.appendChild(ownerName);
       this.generatePPSpace(head, SPACES2);
       opmlRoot.appendChild(head);
 
       this.generatePPSpace(opmlRoot, SPACES2);
@@ -2760,9 +2887,10 @@ var FeedSubscriptions = {
       );
 
       // Make a folder outline element.
       folderOutline = parent.ownerDocument.createElement("outline");
-      folderOutline.setAttribute("title", folder.prettyName);
+      folderOutline.setAttribute("text", folder.prettyName);
+      folderOutline.setAttribute("fz:folder", true);
       this.generatePPSpace(parent, indentString(indentLevel + 2));
 
       if (folder.hasSubFolders) {
         FeedUtils.log.log(
@@ -2788,12 +2916,14 @@ var FeedSubscriptions = {
   },
 
   exportOPMLOutline(aFeed, aDoc) {
     const outRv = aDoc.createElement("outline");
-    outRv.setAttribute("type", "rss");
-    outRv.setAttribute("title", aFeed.title);
+    outRv.setAttribute(
+      "type",
+      aFeed.feedType?.startsWith("ATOM") ? "atom" : "rss"
+    );
     outRv.setAttribute("text", aFeed.title);
-    outRv.setAttribute("version", "RSS");
+    outRv.setAttribute("version", aFeed.feedType);
     outRv.setAttribute("fz:quickMode", aFeed.quickMode);
     const options = aFeed.options;
     delete options.favicon;
     outRv.setAttribute("fz:options", JSON.stringify(options));
@@ -2961,17 +3091,26 @@ var FeedSubscriptions = {
         const outlineName =
           outline.getAttribute("text") ||
           outline.getAttribute("title") ||
           outline.getAttribute("xmlUrl");
-        let feedUrl, folder;
-
-        if (outline.getAttribute("type") == "rss") {
-          // A feed outline.
-          feedUrl =
-            outline.getAttribute("xmlUrl") || outline.getAttribute("url");
+        let folder;
+
+        const type = outline.getAttribute("type");
+        const isRssType = ["rss", "atom"].includes(type?.toLowerCase());
+        const feedUrl =
+          outline.getAttribute("xmlUrl") || outline.getAttribute("url");
+
+        if (isRssType || feedUrl) {
+          FeedUtils.log.log(
+            `importOPMLOutlines: child is feed <outline>, ` +
+              `outlineName=${outlineName}, feedUrl=${feedUrl}`
+          );
+          // A feed outline if it contains the above feedUrl attributes,
+          // regardless of whether isRssType is true (follows the spec).
           if (!feedUrl) {
             FeedUtils.log.warn(
-              `importOPMLOutlines: skipping, type=rss <outline> has no url, outlineName ${outlineName}`
+              `importOPMLOutlines: skipping, type=${type} <outline> has no url, ` +
+                `outlineName=${outlineName}`
             );
             break;
           }
 
@@ -2983,9 +3122,9 @@ var FeedSubscriptions = {
           }
 
           if (
             aParentNode.tagName == "outline" &&
-            aParentNode.getAttribute("type") != "rss"
+            !aParentNode.hasAttribute("xmlUrl")
           ) {
             // Parent is a folder, already created.
             folder = feedFolder;
           } else {
@@ -2998,8 +3137,9 @@ var FeedSubscriptions = {
             folder = rssServer.rootFolder;
           }
 
           // Create the feed.
+          const feedType = outline.getAttribute("version");
           let quickMode = outline.hasAttribute("fz:quickMode")
             ? outline.getAttribute("fz:quickMode") == "true"
             : rssServer.getBoolValue("quickMode");
           let options = outline.getAttribute("fz:options");
@@ -3019,8 +3159,9 @@ var FeedSubscriptions = {
 
           const feedProperties = {
             feedName: outlineName,
             feedLocation: feedUrl,
+            feedType,
             feedFolder: folder,
             quickMode,
             options,
           };
diff --git a/mailnews/extensions/newsblog/feed-subscriptions.xhtml b/mailnews/extensions/newsblog/feed-subscriptions.xhtml
--- a/mailnews/extensions/newsblog/feed-subscriptions.xhtml
+++ b/mailnews/extensions/newsblog/feed-subscriptions.xhtml
@@ -62,8 +62,13 @@
     <script>
       window.addEventListener("load", event => {
         FeedSubscriptions.onLoad();
       });
+      window.addEventListener("dialogaccept", event => {
+        if (!FeedSubscriptions.onDialogAccept()) {
+          event.preventDefault();
+        }
+      });
       window.addEventListener("keypress", event => {
         FeedSubscriptions.onKeyPress(event);
       });
       window.addEventListener("mousedown", event => {
@@ -117,8 +122,9 @@
           seltype="single"
         >
           <treecols>
             <treecol id="folderNameCol" primary="true" hideheader="true" />
+            <treecol id="feedTypeCol" />
           </treecols>
           <treechildren
             id="subscriptionChildren"
             ondragstart="FeedSubscriptions.onDragStart(event);"
@@ -160,19 +166,18 @@
                   id="nameValue"
                   type="text"
                   class="input-inline"
                   aria-labelledby="nameLabel"
-                  onchange="FeedSubscriptions.setPrefs(this);"
+                  oninput="FeedSubscriptions.setPrefs(this);"
                 />
                 <hbox class="input-container">
                   <html:input
                     id="locationValue"
                     type="url"
                     class="uri-element input-inline"
                     aria-labelledby="locationLabel"
                     placeholder="&feedLocation2.placeholder;"
-                    onchange="FeedSubscriptions.setPrefs(this);"
-                    onfocus="FeedSubscriptions.onFocusChange();"
+                    oninput="FeedSubscriptions.clearStatusInfo(); FeedSubscriptions.setFocus(this);"
                     onblur="FeedSubscriptions.onFocusChange();"
                   />
                   <hbox align="center">
                     <label
@@ -208,8 +213,9 @@
                     readonly="readonly"
                     aria-labelledby="feedFolderLabel"
                     onkeypress="FeedSubscriptions.onClickSelectFolderValue(event);"
                     onclick="FeedSubscriptions.onClickSelectFolderValue(event);"
+                    onblur="FeedSubscriptions.onBlurSelectFolderValue(event);"
                   />
                 </hbox>
               </vbox>
             </hbox>
@@ -287,9 +293,9 @@
                 id="autotagPrefix"
                 type="text"
                 class="input-inline"
                 placeholder="&autoTagPrefix.placeholder;"
-                onchange="FeedSubscriptions.setPrefs(this);"
+                oninput="FeedSubscriptions.setPrefs(this);"
               />
             </hbox>
             <separator class="thin" />
           </vbox>
@@ -298,9 +304,9 @@
         <hbox id="statusContainerBox" align="center">
           <vbox flex="1">
             <description id="statusText" />
           </vbox>
-          <spacer flex="1" />
+          <spacer flex="2" />
           <label
             id="validationText"
             collapsed="true"
             class="text-link"
diff --git a/mailnews/extensions/newsblog/newsblogOverlay.js b/mailnews/extensions/newsblog/newsblogOverlay.js
--- a/mailnews/extensions/newsblog/newsblogOverlay.js
+++ b/mailnews/extensions/newsblog/newsblogOverlay.js
@@ -20,8 +20,11 @@ var { MailE10SUtils } = ChromeUtils.impo
 );
 var { openLinkExternally } = ChromeUtils.importESModule(
   "resource:///modules/LinkHelper.sys.mjs"
 );
+var { XULStoreUtils } = ChromeUtils.importESModule(
+  "resource:///modules/XULStoreUtils.sys.mjs"
+);
 
 ChromeUtils.defineESModuleGetters(this, {
   MsgHdrToMimeMessage: "resource:///modules/gloda/MimeMessage.sys.mjs",
 });
@@ -479,12 +482,26 @@ function openSubscriptionsDialog(aFolder
     }
 
     subscriptionsWindow.focus();
   } else {
+    // Restore size/position.
+    const URL = "chrome://messenger-newsblog/content/feed-subscriptions.xhtml";
+    const docId = "feedSubscriptions";
+    let parms = "";
+    const width = XULStoreUtils.getValue(URL, docId, "width");
+    parms += width ? `,width=${width}` : "";
+    const height = XULStoreUtils.getValue(URL, docId, "height");
+    parms += height ? `,height=${height}` : "";
+    const screenX = XULStoreUtils.getValue(URL, docId, "screenX");
+    parms += screenX ? `,screenX=${screenX}` : "";
+    const screenY = XULStoreUtils.getValue(URL, docId, "screenY");
+    parms += screenY ? `,screenY=${screenY}` : "";
+
+    FeedUtils.log.log(`openSubscriptionsDialog: parms ${parms}`);
     window.browsingContext.topChromeWindow.openDialog(
-      "chrome://messenger-newsblog/content/feed-subscriptions.xhtml",
+      URL,
       "",
-      "centerscreen,chrome,dialog=no,resizable",
+      `chrome,dialog=no,resizable${parms}`,
       { folder: aFolder }
     );
   }
 }
diff --git a/mailnews/extensions/newsblog/test/unit/test_feedparser.js b/mailnews/extensions/newsblog/test/unit/test_feedparser.js
--- a/mailnews/extensions/newsblog/test/unit/test_feedparser.js
+++ b/mailnews/extensions/newsblog/test/unit/test_feedparser.js
@@ -125,9 +125,9 @@ add_task(async function test_download() 
             );
             return;
           }
           // Feed has downloaded - make sure the right type was detected.
-          Assert.equal(feed.mFeedType, test.feedType, "feed type matching");
+          Assert.equal(feed.feedType, test.feedType, "feed type matching");
           Assert.equal(feed.title, test.title, "title matching");
           // Make sure we're got the expected number of messages in the folder.
           const cnt = [...folder.messages].length;
           Assert.equal(cnt, test.expectedItems, "itemcount matching");
