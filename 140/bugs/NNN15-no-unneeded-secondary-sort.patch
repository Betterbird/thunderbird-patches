# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1722980325 -7200
# Parent  6662bda0a916742c4041733b13a843b39f44a31b
Bug NNN15 - Scrap secondary sort if primary sort is unique.

Bonus point: Fix console error when view has no sort, doesn't seem to happen in 128.

diff --git a/mail/modules/DBViewWrapper.sys.mjs b/mail/modules/DBViewWrapper.sys.mjs
--- a/mail/modules/DBViewWrapper.sys.mjs
+++ b/mail/modules/DBViewWrapper.sys.mjs
@@ -1150,8 +1150,13 @@ DBViewWrapper.prototype = {
       // kUnderlyingSynthetic or kUnderlyingSearchView
       dbviewContractId += "search";
     }
 
+    if (this._sort.length == 0) {
+      console.warn(`No sort array for view of type "${dbviewContractId}"`);
+      return null;
+    }
+
     // and now zero the saved-off flags.
     this.__viewFlags = null;
 
     const dbView = Cc[dbviewContractId].createInstance(Ci.nsIMsgDBView);
@@ -1485,8 +1490,13 @@ DBViewWrapper.prototype = {
       this.dbView = null;
     }
 
     this.dbView = this._createView();
+    if (!this.dbView) {
+      console.warn("No view created");
+      return;
+    }
+
     // if the synthetic view defines columns, add those for it
     if (this.isSynthetic) {
       for (const customCol of this._syntheticView.customColumns) {
         customCol.bindToView(this.dbView);
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -3992,9 +3992,18 @@ void nsMsgDBView::UpdateSortInfo(nsMsgVi
       m_sortColumns[0].mSortOrder = sortOrder;
     }
   }
 
-  if (m_sortColumns.Length() > 1) {
+  // Reset secondary sort:
+  m_secondarySort = nsMsgViewSortType::byId;
+  m_secondarySortOrder = nsMsgViewSortOrder::ascending;
+  m_secondaryCustomColumn.Truncate();
+
+  // No need for a potentially slow secondary sort if the primary sort is
+  // "almost" unique.
+  if (m_sortColumns.Length() > 1 && sortType != nsMsgViewSortType::byDate &&
+      sortType != nsMsgViewSortType::byReceived &&
+      sortType != nsMsgViewSortType::byId) {
     m_secondarySort = m_sortColumns[1].mSortType;
     m_secondarySortOrder = m_sortColumns[1].mSortOrder;
     m_secondaryCustomColumn = m_sortColumns[1].mCustomColumnName;
   }
@@ -4169,9 +4178,19 @@ nsresult nsMsgDBView::RestoreSortInfo() 
     // Restore m_sortColumns from db.
     nsString sortColumnsString;
     folderInfo->GetProperty("sortColumns", sortColumnsString);
     DecodeColumnSort(sortColumnsString);
-    if (m_sortColumns.Length() > 1) {
+
+    // Reset secondary sort:
+    m_secondarySort = nsMsgViewSortType::byId;
+    m_secondarySortOrder = nsMsgViewSortOrder::ascending;
+    m_secondaryCustomColumn.Truncate();
+
+    // No need for a potentially slow secondary sort if the primary sort is
+    // "almost" unique.
+    if (m_sortColumns.Length() > 1 && m_sortType != nsMsgViewSortType::byDate &&
+        m_sortType != nsMsgViewSortType::byReceived &&
+        m_sortType != nsMsgViewSortType::byId) {
       m_secondarySort = m_sortColumns[1].mSortType;
       m_secondarySortOrder = m_sortColumns[1].mSortOrder;
       m_secondaryCustomColumn = m_sortColumns[1].mCustomColumnName;
     }
