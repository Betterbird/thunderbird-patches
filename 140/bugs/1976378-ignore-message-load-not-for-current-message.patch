
# HG changeset patch
# User Geoff Lankow <geoff@darktrojan.net>
# Date 1756330244 -7200
# Node ID e8008b9941d87ecde7c64951789271f6f24947b1
# Parent  74a6c4a24b4e6ed10d9857827b478d58dc69d4e8
Bug 1976378 - Ignore message loading notifications if they're not for the current message. r=mkmelin

Differential Revision: https://phabricator.services.mozilla.com/D256558

diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -520,8 +520,30 @@ var messageProgressListener = {
     "nsISupportsWeakReference",
   ]),
 
   /**
+   * Checks if a channel is for the currently loading message. This could
+   * return false if `displayMessage` is called again before an existing load
+   * completes (possibly before it even begins).
+   *
+   * @param {nsIChannel} channel
+   * @returns {boolean}
+   */
+  _channelIsCurrent(channel) {
+    if (!gMessageURI) {
+      return false;
+    }
+    if (gMessageURI.startsWith("file:")) {
+      // File messages always open in a new about:message, so we don't have to
+      // handle the fact that the channel has a mailbox: URI, not a file: one.
+      return true;
+    }
+    channel.QueryInterface(Ci.nsIChannel);
+    const messageService = MailServices.messageServiceFromURI(gMessageURI);
+    return channel.URI.equals(messageService.getUrlForUri(gMessageURI));
+  },
+
+  /**
    * Step 1: A message has started loading (if the flags include STATE_START).
    *
    * @param {nsIWebProgress} webProgress
    * @param {nsIRequest} request
@@ -531,9 +553,10 @@ var messageProgressListener = {
    */
   onStateChange(webProgress, request, stateFlags, _status) {
     if (
       !(request instanceof Ci.nsIMailChannel) ||
-      !(stateFlags & Ci.nsIWebProgressListener.STATE_START)
+      !(stateFlags & Ci.nsIWebProgressListener.STATE_START) ||
+      !this._channelIsCurrent(request)
     ) {
       return;
     }
     // Clear the previously displayed message.
@@ -557,8 +580,11 @@ var messageProgressListener = {
    * @param {nsIMailChannel} mailChannel
    * @see {nsIMailProgressListener}
    */
   onHeadersComplete(mailChannel) {
+    if (!this._channelIsCurrent(mailChannel)) {
+      return;
+    }
     window.dispatchEvent(
       new CustomEvent("MsgLoading", { detail: gMessage, bubbles: true })
     );
 
@@ -573,12 +599,15 @@ var messageProgressListener = {
 
   /**
    * Step 3: The parser has finished reading the body of the message.
    *
-   * @param {nsIMailChannel} _mailChannel
+   * @param {nsIMailChannel} mailChannel
    * @see {nsIMailProgressListener}
    */
-  onBodyComplete(_mailChannel) {
+  onBodyComplete(mailChannel) {
+    if (!this._channelIsCurrent(mailChannel)) {
+      return;
+    }
     autoMarkAsRead();
   },
 
   /**
@@ -587,8 +616,11 @@ var messageProgressListener = {
    * @param {nsIMailChannel} mailChannel
    * @see {nsIMailProgressListener}
    */
   onAttachmentsComplete(mailChannel) {
+    if (!this._channelIsCurrent(mailChannel)) {
+      return;
+    }
     for (const attachment of mailChannel.attachments) {
       this.handleAttachment(
         attachment.getProperty("contentType"),
         attachment.getProperty("url"),
@@ -622,8 +654,11 @@ var messageProgressListener = {
       return;
     }
 
     const channel = docShell.currentDocumentChannel;
+    if (!this._channelIsCurrent(channel)) {
+      return;
+    }
     channel.QueryInterface(Ci.nsIMailChannel);
     currentCharacterSet = channel.mailCharacterSet;
     channel.openpgpSink = null;
     channel.smimeSink = null;
