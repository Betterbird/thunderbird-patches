# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1753991223 -7200
# Parent  bc7a1e2e3619b38f19afa230b2cdc12867feddfa
Bug 1980005 - Log differences in round-tripped vCard data.

diff --git a/mailnews/addrbook/modules/CardDAVDirectory.sys.mjs b/mailnews/addrbook/modules/CardDAVDirectory.sys.mjs
--- a/mailnews/addrbook/modules/CardDAVDirectory.sys.mjs
+++ b/mailnews/addrbook/modules/CardDAVDirectory.sys.mjs
@@ -381,8 +381,86 @@ export class CardDAVDirectory extends SQ
       yield response;
     }
   };
 
+  // Code written by ChatGPT.
+  compareVCards(original, received) {
+    const normalize = vcard =>
+      vcard
+        .trim()
+        .split(/\r?\n/)
+        .map(line => line.trim())
+        .filter(line => line.length)
+        .sort();
+
+    const origLines = normalize(original);
+    const recvLines = normalize(received);
+
+    const onlyInOriginal = [];
+    const onlyInReceived = [];
+    const differences = [];
+
+    let i = 0;
+    let j = 0;
+
+    while (i < origLines.length && j < recvLines.length) {
+      const oLine = origLines[i];
+      const rLine = recvLines[j];
+
+      if (oLine === rLine) {
+        i++;
+        j++;
+      } else if (oLine < rLine) {
+        onlyInOriginal.push(oLine);
+        i++;
+      } else {
+        onlyInReceived.push(rLine);
+        j++;
+      }
+    }
+
+    // Collect leftovers.
+    while (i < origLines.length) {
+      onlyInOriginal.push(origLines[i++]);
+    }
+    while (j < recvLines.length) {
+      onlyInReceived.push(recvLines[j++]);
+    }
+
+    // Look for similar lines (same field prefix) among remaining lines.
+    for (i = onlyInOriginal.length - 1; i >= 0; i--) {
+      const oLine = onlyInOriginal[i];
+      const oKey = oLine.split(":")[0].split(";")[0];
+
+      for (j = onlyInReceived.length - 1; j >= 0; j--) {
+        const rLine = onlyInReceived[j];
+        const rKey = rLine.split(":")[0].split(";")[0];
+
+        if (oKey === rKey) {
+          differences.push({ key: oKey, original: oLine, received: rLine });
+          onlyInOriginal.splice(i, 1);
+          onlyInReceived.splice(j, 1);
+          break;
+        }
+      }
+    }
+
+    // Output results
+    differences.forEach(diff =>
+      console.warn(
+        `CardDAV: Different information for ${diff.key}:\n  original: ${diff.original}\n  received: ${diff.received}`
+      )
+    );
+
+    onlyInOriginal.forEach(line =>
+      console.warn("CardDAV: Missing in received vCard:", line)
+    );
+
+    onlyInReceived.forEach(line =>
+      console.warn("CardDAV: Unexpected in received vCard:", line)
+    );
+  }
+
   /**
    * Converts the card to a vCard and performs a PUT request to store it on the
    * server. Then immediately performs a GET request ensuring the local copy
    * matches the server copy. Stores the card in the database on success.
@@ -445,8 +523,9 @@ export class CardDAVDirectory extends SQ
       const responseCard = normalizeLineEndings(
         properties.querySelector("address-data")?.textContent
       );
 
+      this.compareVCards(requestDetails.body, responseCard);
       const abCard = lazy.VCardUtils.vCardToAbCard(responseCard);
       abCard.setProperty("_etag", etag);
       abCard.setProperty("_href", href);
 
