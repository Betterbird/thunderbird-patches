# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1745705584 -7200
# Parent  bfeaca19370646625ee84f25d31a9f5fb27c7722
Bug 532712 - disable some code that replaces NBSP with ASCII space (Blink variant).

These changes are needed when pref editor.white_space_normalization.blink_compatible is true.

diff --git a/editor/libeditor/HTMLEditSubActionHandler.cpp b/editor/libeditor/HTMLEditSubActionHandler.cpp
--- a/editor/libeditor/HTMLEditSubActionHandler.cpp
+++ b/editor/libeditor/HTMLEditSubActionHandler.cpp
@@ -3068,8 +3068,12 @@ void HTMLEditor::GenerateWhiteSpaceSeque
   HTMLEditor::ReplaceStringWithNormalizedWhiteSpaceSequence(
       aResult, 0u, aLength, aPreviousCharPointData, aNextCharPointData);
 }
 
+// These are also accessed in WSRunScanner.cpp.
+bool priorInsertWasNBSP2 = false;
+bool currentInsertIsNBSP2 = false;
+
 // static
 void HTMLEditor::ReplaceStringWithNormalizedWhiteSpaceSequence(
     nsString& aResult, uint32_t aOffset, uint32_t aLength,
     const CharPointData& aPreviousCharPointData,
@@ -3094,8 +3098,9 @@ void HTMLEditor::ReplaceStringWithNormal
     // XXX This means that this does not allow to put an NBSP in HTML editor
     //     without preformatted style.  However, Chrome has same issue too.
     if (aPreviousCharPointData.Type() == CharPointType::VisibleChar &&
         aNextCharPointData.Type() == CharPointType::VisibleChar) {
+      if (priorInsertWasNBSP2) return;
       aResult.SetCharAt(HTMLEditUtils::kSpace, aOffset);
       return;
     }
     // If it's start or end of text, put an NBSP.
@@ -3159,8 +3164,13 @@ HTMLEditor::NormalizeWhiteSpacesToInsert
           *aPointToInsert.ContainerAs<nsIContent>())) {
     return NormalizedStringToInsertText(aStringToInsert, aPointToInsert);
   }
 
+  // Ugly hack to make inserting a NBSP not trigger its removal when
+  // the next character is typed.
+  priorInsertWasNBSP2 = currentInsertIsNBSP2;
+  currentInsertIsNBSP2 = aStringToInsert.EqualsLiteral(u"\x00A0");
+
   Text* const textNode = aPointToInsert.GetContainerAs<Text>();
   const nsTextFragment* const textFragment =
       textNode ? &textNode->TextFragment() : nullptr;
   const bool isNewLineCollapsible = !EditorUtils::IsNewLinePreformatted(
@@ -3230,9 +3240,9 @@ HTMLEditor::NormalizeWhiteSpacesToInsert
     str.SetCapacity(aStringToInsert.Length() + newPrecedingWhiteSpaceLength +
                     newFollowingWhiteSpaceLength);
     for ([[maybe_unused]] auto unused :
          IntegerRange(newPrecedingWhiteSpaceLength)) {
-      str.Append(' ');
+      str.Append(priorInsertWasNBSP2 ? 0xA0 : ' ');  // NBSP in UTF-16.
     }
     str.Append(aStringToInsert);
     for ([[maybe_unused]] auto unused :
          IntegerRange(newFollowingWhiteSpaceLength)) {
diff --git a/editor/libeditor/WSRunScanner.cpp b/editor/libeditor/WSRunScanner.cpp
--- a/editor/libeditor/WSRunScanner.cpp
+++ b/editor/libeditor/WSRunScanner.cpp
@@ -25,8 +25,10 @@ namespace mozilla {
 using namespace dom;
 
 extern bool priorInsertWasNBSP;
 extern bool currentInsertIsNBSP;
+extern bool priorInsertWasNBSP2;
+extern bool currentInsertIsNBSP2;
 
 /******************************************************************************
  * mozilla::WSScanResult
  ******************************************************************************/
@@ -506,8 +508,10 @@ WSRunScanner::GetRangeInTextNodesToBacks
 
   // Backspace deletion calls this, so undo insertion hack.
   priorInsertWasNBSP = false;
   currentInsertIsNBSP = false;
+  priorInsertWasNBSP2 = false;
+  currentInsertIsNBSP2 = false;
 
   // Corresponding to computing delete range part of
   // `WhiteSpaceVisibilityKeeper::DeletePreviousWhiteSpace()`
   MOZ_ASSERT(aPoint.IsSetAndValid());
@@ -616,8 +620,10 @@ WSRunScanner::GetRangeInTextNodesToForwa
   // Forward deletion does NOT appear to call this, but undoing the
   // insertion hack won't hurt, just in case.
   priorInsertWasNBSP = false;
   currentInsertIsNBSP = false;
+  priorInsertWasNBSP2 = false;
+  currentInsertIsNBSP2 = false;
 
   // Corresponding to computing delete range part of
   // `WhiteSpaceVisibilityKeeper::DeleteInclusiveNextWhiteSpace()`
   MOZ_ASSERT(aPoint.IsSetAndValid());
@@ -888,8 +894,10 @@ WSRunScanner::GetRangeContainingInvisibl
 
   // Forward deletion calls this, so undo insertion hack.
   priorInsertWasNBSP = false;
   currentInsertIsNBSP = false;
+  priorInsertWasNBSP2 = false;
+  currentInsertIsNBSP2 = false;
 
   MOZ_ASSERT(aRange.IsPositionedAndValid());
   MOZ_ASSERT(aRange.EndRef().IsSetAndValid());
   MOZ_ASSERT(aRange.StartRef().IsSetAndValid());
