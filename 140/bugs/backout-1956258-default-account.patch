# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1758972182 -7200
# Parent  c05ff3fa3a0173073f23eb83dde6aa631128812b
Backout bug 1956258 for breaking Owl as default account.

This loses Owl as default account, see: https://github.com/Betterbird/thunderbird-patches/issues/488

diff --git a/mailnews/base/src/nsMsgAccountManager.cpp b/mailnews/base/src/nsMsgAccountManager.cpp
--- a/mailnews/base/src/nsMsgAccountManager.cpp
+++ b/mailnews/base/src/nsMsgAccountManager.cpp
@@ -765,13 +765,10 @@ nsMsgAccountManager::RemoveAccount(nsIMs
     m_accounts.AppendElement(aAccount);
     return rv;
   }
 
-  // If it's the default account, clear the corresponding preference.
-  if (m_defaultAccount == aAccount) {
-    m_defaultAccount = nullptr;
-    setDefaultAccountPref(nullptr);
-  }
+  // If it's the default, choose a new default account.
+  if (m_defaultAccount == aAccount) AutosetDefaultAccount();
 
   // XXX - need to figure out if this is the last time this server is
   // being used, and only send notification then.
   // (and only remove from hashtable then too!)
@@ -842,9 +839,8 @@ nsMsgAccountManager::GetDefaultAccount(n
   nsresult rv = LoadAccounts();
   NS_ENSURE_SUCCESS(rv, rv);
 
   if (!m_defaultAccount) {
-    // Try to determine the currently set default account.
     nsCString defaultKey;
     rv = m_prefs->GetCharPref(PREF_MAIL_ACCOUNTMANAGER_DEFAULTACCOUNT,
                               defaultKey);
     if (NS_SUCCEEDED(rv)) {
@@ -856,19 +852,8 @@ nsMsgAccountManager::GetDefaultAccount(n
       }
     }
   }
 
-  if (!m_defaultAccount) {
-    // No valid default account has been set. Try to find the first viable
-    // account and set it as default.
-    for (nsIMsgAccount* account : m_accounts) {
-      rv = SetDefaultAccount(account);
-      if (NS_SUCCEEDED(rv)) {
-        break;
-      }
-    }
-  }
-
   NS_IF_ADDREF(*aDefaultAccount = m_defaultAccount);
   return NS_OK;
 }
 
@@ -888,8 +873,30 @@ nsresult nsMsgAccountManager::CheckDefau
   }
   return rv;
 }
 
+/**
+ * Pick the first account that can be default and make it the default.
+ */
+nsresult nsMsgAccountManager::AutosetDefaultAccount() {
+  for (nsIMsgAccount* account : m_accounts) {
+    bool canBeDefault = false;
+    nsresult rv = CheckDefaultAccount(account, canBeDefault);
+    if (NS_SUCCEEDED(rv) && canBeDefault) {
+      return SetDefaultAccount(account);
+    }
+  }
+
+  // No accounts can be the default. Clear it.
+  if (m_defaultAccount) {
+    nsCOMPtr<nsIMsgAccount> oldAccount = m_defaultAccount;
+    m_defaultAccount = nullptr;
+    (void)setDefaultAccountPref(nullptr);
+    (void)notifyDefaultServerChange(oldAccount, nullptr);
+  }
+  return NS_OK;
+}
+
 NS_IMETHODIMP
 nsMsgAccountManager::SetDefaultAccount(nsIMsgAccount* aDefaultAccount) {
   if (!aDefaultAccount) return NS_ERROR_INVALID_ARG;
 
diff --git a/mailnews/base/src/nsMsgAccountManager.h b/mailnews/base/src/nsMsgAccountManager.h
--- a/mailnews/base/src/nsMsgAccountManager.h
+++ b/mailnews/base/src/nsMsgAccountManager.h
@@ -154,8 +154,13 @@ class nsMsgAccountManager : public nsIMs
    * Check if the given account can be the set as the default account.
    */
   nsresult CheckDefaultAccount(nsIMsgAccount* aAccount, bool& aCanBeDefault);
 
+  /**
+   * Find a new account that can serve as default.
+   */
+  nsresult AutosetDefaultAccount();
+
   // sets the pref for the default server
   nsresult setDefaultAccountPref(nsIMsgAccount* aDefaultAccount);
 
   // Write out the accounts pref from the m_accounts list of accounts.
