# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1688495500 -7200
# Parent  a0cf72e561ab2b057e9f2dc8f49a8eeac1346dd1
Misc: Add update check and fix release notes link.
* * *
Misc: Startup update check.
* * *
Misc: Add more logging to update check.
* * *
Misc: CSS tweak so download link aligns correctly.
* * *
Misc: Improve behaviour when update check fails.
* * *
Misc: Make update check take policy DisableAppUpdate into account.

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -65,17 +65,17 @@ pref("app.update.service.enabled", true)
 #endif
 
 #ifdef XP_WIN
 // This pref prevents BITS from being used by Thunderbird to download updates.
 pref("app.update.BITS.enabled", false);
 #endif
 
 // Release notes URL
-pref("app.releaseNotesURL", "https://live.thunderbird.net/%APP%/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
+pref("app.releaseNotesURL", "https://www.betterbird.eu/releasenotes?locale=%LOCALE%&version=%VERSION%&channel=%CHANNEL%&os=%OS%&buildid=%APPBUILDID%");
 
 #ifdef XP_MACOSX
   // If set to true, Thunderbird will automatically restart if it is left
   // running with no windows open.
   pref("app.update.noWindowAutoRestart.enabled", true);
   // How long to wait after all windows are closed before restarting,
   // in milliseconds. 5 min = 300000 ms.
   pref("app.update.noWindowAutoRestart.delayMs", 300000);
diff --git a/mail/base/content/aboutDialog.css b/mail/base/content/aboutDialog.css
--- a/mail/base/content/aboutDialog.css
+++ b/mail/base/content/aboutDialog.css
@@ -137,8 +137,16 @@
   margin-inline-start: 5px;
 }
 
 #currentChannel {
   margin: 0;
   padding: 0;
   font-weight: bold;
 }
+
+#noUpdatesFound label {
+  margin-inline-start: 0;
+}
+#manualUpdate label {
+  margin-inline: 0 0.3em;
+  margin-block: 1px 2px;  /* align with link */
+}
diff --git a/mail/base/content/aboutDialog.js b/mail/base/content/aboutDialog.js
--- a/mail/base/content/aboutDialog.js
+++ b/mail/base/content/aboutDialog.js
@@ -7,17 +7,17 @@
 "use strict";
 
 // Services = object with smart getters for common XPCOM services
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 var { AppConstants } = ChromeUtils.import(
   "resource://gre/modules/AppConstants.jsm"
 );
 
-function init(aEvent) {
+async function init(aEvent) {
   if (aEvent.target != document) {
     return;
   }
 
   let defaults = Services.prefs.getDefaultBranch(null);
   let distroId = defaults.getCharPref("distribution.id", "");
   if (distroId) {
     let distroAbout = defaults.getStringPref("distribution.about", "");
@@ -87,26 +87,102 @@ function init(aEvent) {
     let channelLabel = document.getElementById("currentChannel");
     let currentChannelText = document.getElementById("currentChannelText");
     channelLabel.value = UpdateUtils.UpdateChannel;
     if (gAppUpdater.updateDisabledByPackage) {
       currentChannelText.hidden = true;
     }
   }
 
+  await BetterbirdUpdateCheck(window);
+
   window.sizeToContent();
 
   if (AppConstants.platform == "macosx") {
     window.moveTo(
       screen.availWidth / 2 - window.outerWidth / 2,
       screen.availHeight / 5
     );
   }
 }
 
+async function BetterbirdUpdateCheck(win) {
+  let needsUpdate = "arguments" in win && win.arguments[0].needsUpdate;
+  let checkForUpdate = !needsUpdate;
+  let cantCheck = false;
+  if (Services.policies && !Services.policies.isAllowed("appUpdate")) {
+    console.info(
+      "Betterbird skipping update check due to policy DisableAppUpdate"
+    );
+    checkForUpdate = false;
+    cantCheck = true;
+  }
+
+  if (checkForUpdate) {
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        console.error("Betterbird update check FAILED");
+        cantCheck = true;
+      } else {
+        let content = await response.text();
+        let lines = content.split("\n");
+        let version = Services.appinfo.version;
+        let buildID = Services.appinfo.appBuildID;
+        let os = Services.appinfo.OS;
+        for (let l of lines) {
+          let parts = l.split(",");
+          // Format is os,version,buildid.
+          if (version.startsWith(parts[1]) && os == parts[0]) {
+            if (parts[2] > buildID) {
+              needsUpdate = true;
+              console.info(
+                `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+              );
+            } else {
+              console.info(
+                `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+              );
+            }
+            break;
+          }
+        }
+      }
+    } catch (ex) {
+      console.error("Betterbird update check FAILED");
+      cantCheck = true;
+    }
+  }
+
+  if (needsUpdate) {
+    let el = document.getElementById("manualUpdate");
+    el.hidden = false;
+    el = document.getElementById("manualLink");
+    el.setAttribute(
+      "onclick",
+      'openLink("https://www.betterbird.eu/downloads/");'
+    );
+  } else if (cantCheck) {
+    let el = document.getElementById("cantCheckForUpdate");
+    el.hidden = false;
+    el = document.getElementById("manualLink2");
+    el.setAttribute(
+      "onclick",
+      'openLink("https://www.betterbird.eu/downloads/");'
+    );
+  } else {
+    // Up to date.
+    let el = document.getElementById("noUpdatesFound");
+    el.hidden = false;
+  }
+}
+
 // This function is used to open about: tabs. The caller should ensure the url
 // is only an about: url.
 function openAboutTab(url) {
   // Check existing windows
   let mailWindow = Services.wm.getMostRecentWindow("mail:3pane");
   if (mailWindow) {
     mailWindow.focus();
     mailWindow.document
diff --git a/mail/base/content/aboutDialog.xhtml b/mail/base/content/aboutDialog.xhtml
--- a/mail/base/content/aboutDialog.xhtml
+++ b/mail/base/content/aboutDialog.xhtml
@@ -52,16 +52,25 @@
           </html:a>
         </hbox>
 
         <label id="distribution" class="text-blurb"/>
         <label id="distributionId" class="text-blurb"/>
 
         <vbox id="detailsBox">
           <vbox id="updateBox">
+          <hbox id="noUpdatesFound" align="center" hidden="true">
+            <label>&update.noUpdatesFound;</label>
+          </hbox>
+          <hbox id="cantCheckForUpdate" align="center" hidden="true">
+            <label is="text-link" id="manualLink2">&update.checkForUpdatesButton.label;</label>
+          </hbox>
+          <hbox id="manualUpdate" align="center" hidden="true">
+            <label>&update.manual.start;</label><label is="text-link" id="manualLink">&update.manual.linkText;</label><label>&update.manual.end;</label>
+          </hbox>
 #ifdef MOZ_UPDATER
             <stack id="updateDeck" orient="vertical">
               <html:div id="checkForUpdates" class="update-deck-container">
                 <html:button id="checkForUpdatesButton"
                              accesskey="&update.checkForUpdatesButton.accesskey;"
                              onclick="gAppUpdater.checkForUpdates();">
                   &update.checkForUpdatesButton.label;
                 </html:button>
diff --git a/mail/components/MailGlue.jsm b/mail/components/MailGlue.jsm
--- a/mail/components/MailGlue.jsm
+++ b/mail/components/MailGlue.jsm
@@ -589,32 +589,38 @@ MailGlue.prototype = {
    * _scheduleBestEffortUserIdleTasks.
    * Don't be fooled by thinking that the use of the timeout parameter
    * will delay your function: it will just ensure that it potentially
    * happens _earlier_ than expected (when the timeout limit has been reached),
    * but it will not make it happen later (and out of order) compared
    * to the other ones scheduled together.
    */
   _scheduleStartupIdleTasks() {
+    let self = this;
     const idleTasks = [
       {
         task() {
           // This module needs to be loaded so it registers to receive
           // FormAutoComplete:GetSelectedIndex messages and respond
           // appropriately, otherwise we get error messages like the one
           // reported in bug 1635422.
           ChromeUtils.import("resource://gre/actors/AutoCompleteParent.jsm");
         },
       },
       {
         condition: Services.prefs.getBoolPref("mail.chat.enabled"),
         task() {
           ChatCore.idleStart();
         },
       },
+      {
+        task() {
+          self.BetterbirdUpdateCheck();
+        },
+      },
 
       {
         task: () => {
           // Use idleDispatch a second time to run this after the per-window
           // idle tasks.
           ChromeUtils.idleDispatch(() => {
             Services.obs.notifyObservers(
               null,
@@ -713,11 +719,95 @@ MailGlue.prototype = {
           type: "contentTab",
           tabParams,
         }
       );
       linkHandled.data = true;
     }
   },
 
+  async BetterbirdUpdateCheck() {
+    if (Services.policies && !Services.policies.isAllowed("appUpdate")) {
+      console.info(
+        "Betterbird skipping update check due to policy DisableAppUpdate"
+      );
+      return;
+    }
+
+    let lastCheckTime = Services.prefs.getIntPref(
+      "betterbird.update.lastCheckTime",
+      0
+    );
+    let now = Math.round(Date.now() / 1000);
+    // We check once a week. 604800 = 7 * 24 * 60 * 60.
+    if (now - lastCheckTime < 604800) {
+      console.info(
+        `Betterbird skipping update check, last done ${new Date(lastCheckTime * 1000).toLocaleString()}`
+      );
+      return;
+    }
+    Services.prefs.setIntPref("betterbird.update.lastCheckTime", now);
+    let needsUpdate = false;
+    try {
+      let response = await fetch(
+        "https://www.betterbird.eu/start/versions.txt",
+        { cache: "no-store" }
+      );
+      if (!response.ok) {
+        console.error(
+          `Betterbird update check FAILED, last done ${new Date(lastCheckTime * 1000).toLocaleString()}`
+        );
+        return;
+      }
+      let content = await response.text();
+      let lines = content.split("\n");
+      let version = Services.appinfo.version;
+      let buildID = Services.appinfo.appBuildID;
+      let os = Services.appinfo.OS;
+      for (let l of lines) {
+        let parts = l.split(",");
+        // Format is os,version,buildid.
+        if (version.startsWith(parts[1]) && os == parts[0]) {
+          if (parts[2] > buildID) {
+            needsUpdate = true;
+            console.info(
+              `Betterbird update available for ${os}, new build ${parts[2]}, current build ${buildID}`
+            );
+          } else {
+            console.info(
+              `Betterbird update-to-date for ${os}, published build ${parts[2]}, current build ${buildID}`
+            );
+          }
+          break;
+        }
+      }
+    } catch (ex) {
+      console.error(
+        `Betterbird update check FAILED, last done ${new Date(lastCheckTime * 1000).toLocaleString()}`
+      );
+      return;
+    }
+    if (!needsUpdate) {
+      return;
+    }
+    let win = Services.wm.getMostRecentWindow("mail:3pane");
+    if (!win) {
+      return;
+    }
+    let features = "chrome,";
+    if (AppConstants.platform == "win") {
+      features += "centerscreen,dependent";
+    } else if (AppConstants.platform == "macosx") {
+      features += "resizable=no,minimizable=no";
+    } else {
+      features += "centerscreen,dependent,dialog=no";
+    }
+    win.openDialog(
+      "chrome://messenger/content/aboutDialog.xhtml",
+      "",
+      features,
+      { needsUpdate }
+    );
+  },
+
   // for XPCOM
   QueryInterface: ChromeUtils.generateQI(["nsIObserver"]),
 };
