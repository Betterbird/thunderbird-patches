# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1662890519 -7200
# Parent  1bb7ddbe9ab8cec4a7192c0455e69a1423e6195d
Misc: Disable Thunderbird language packs.

diff --git a/toolkit/components/extensions/Extension.jsm b/toolkit/components/extensions/Extension.jsm
--- a/toolkit/components/extensions/Extension.jsm
+++ b/toolkit/components/extensions/Extension.jsm
@@ -3255,16 +3255,20 @@ class Langpack extends ExtensionData {
   parseManifest() {
     return StartupCache.manifests.get(this.manifestCacheKey, () =>
       super.parseManifest()
     );
   }
 
   async startup(reason) {
     this.chromeRegistryHandle = null;
+    if (/langpack.*thunderbird/.test(this.resourceURL)) {
+      Cu.reportError(`Langpack: Ignoring Thunderbird language pack ${this.resourceURL}`);
+      return;
+    }
     if (this.startupData.chromeEntries.length) {
       const manifestURI = Services.io.newURI(
         "manifest.json",
         null,
         this.rootURI
       );
       this.chromeRegistryHandle = aomStartup.registerChrome(
         manifestURI,
diff --git a/toolkit/mozapps/extensions/internal/XPIDatabase.jsm b/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
--- a/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
@@ -614,16 +614,22 @@ class AddonInternal {
 
     let version;
     if (app.id == Services.appinfo.ID) {
       version = aAppVersion;
     } else if (app.id == TOOLKIT_ID) {
       version = aPlatformVersion;
     }
 
+    if (this.type == "locale" && /langpack.*thunderbird/.test(this.id)) {
+      // Declare Thunderbird language packs incompatible.
+      Cu.reportError(`Compat: Ignoring Thunderbird language pack ${this.id}`);
+      return false;
+    }
+
     // Only extensions and dictionaries can be compatible by default; themes
     // and language packs always use strict compatibility checking.
     // Dictionaries are compatible by default unless requested by the dictinary.
     if (
       !this.strictCompatibility &&
       (!AddonManager.strictCompatibility || this.type == "dictionary")
     ) {
       return Services.vc.compare(version, minVersion) >= 0;
