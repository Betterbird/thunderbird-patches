# HG changeset patch
# User Ping Chen <remotenonsense@gmail.com>
# Date 1666693258 -39600
# Node ID 5937332784b764bbaeeba3b067bc6bc453a5d06e
# Parent  7d40610a777836f7541942eceb49bd977a116122
Bug 1794997 - Get account from identity to prevent sending with the wrong account. r=mkmelin

Authenticate if needed before sending POST command.

Differential Revision: https://phabricator.services.mozilla.com/D159459

diff --git a/mail/components/activity/modules/sendLater.jsm b/mail/components/activity/modules/sendLater.jsm
--- a/mail/components/activity/modules/sendLater.jsm
+++ b/mail/components/activity/modules/sendLater.jsm
@@ -226,24 +226,23 @@ var sendLaterModule = {
         }
 
         // We don't know the progress of the copy, so just set to 0, and we'll
         // display an undetermined progress meter.
         this._copyProcess.setProgress(this._copyProcess.lastStatusText, 0, 0);
       } else if (aMessageCopyPercent >= 100) {
         // We need to set this to completed otherwise activity manager
         // complains.
-        if (this._copyProcess.state != Ci.nsIActivityProcess.STATE_COMPLETED) {
+        if (this._copyProcess) {
           this._copyProcess.state = Ci.nsIActivityProcess.STATE_COMPLETED;
+          this.activityMgr.removeActivity(this._copyProcess.id);
+          this._copyProcess = null;
         }
 
-        // Just drop the copy process, we don't need it now.
-        this.activityMgr.removeActivity(this._copyProcess.id);
         this._sendProcess = null;
-        this._copyProcess = null;
       }
     }
   },
 
   onMessageSendError(aCurrentMessage, aMessageHeader, aStatus, aMsg) {
     if (
       this._sendProcess &&
       this._sendProcess.state != Ci.nsIActivityProcess.STATE_COMPLETED
diff --git a/mailnews/compose/src/MessageSend.jsm b/mailnews/compose/src/MessageSend.jsm
--- a/mailnews/compose/src/MessageSend.jsm
+++ b/mailnews/compose/src/MessageSend.jsm
@@ -52,17 +52,17 @@ MessageSend.prototype = {
     parentWindow,
     progress,
     listener,
     smtpPassword,
     originalMsgURI,
     compType
   ) {
     this._userIdentity = userIdentity;
-    this._accountKey = accountKey;
+    this._accountKey = accountKey || this._accountKeyForIdentity(userIdentity);
     this._compFields = compFields;
     this._dontDeliver = dontDeliver;
     this._deliverMode = deliverMode;
     this._msgToReplace = msgToReplace;
     this._sendProgress = progress;
     this._smtpPassword = smtpPassword;
     this._sendListener = listener;
     this._parentWindow = parentWindow;
@@ -161,17 +161,17 @@ MessageSend.prototype = {
     digest,
     deliverMode,
     msgToReplace,
     listener,
     statusFeedback,
     smtpPassword
   ) {
     this._userIdentity = userIdentity;
-    this._accountKey = accountKey;
+    this._accountKey = accountKey || this._accountKeyForIdentity(userIdentity);
     this._compFields = compFields;
     this._deliverMode = deliverMode;
     this._msgToReplace = msgToReplace;
     this._smtpPassword = smtpPassword;
     this._sendListener = listener;
     this._statusFeedback = statusFeedback;
     this._shouldRemoveMessageFile = deleteSendFileOnCompletion;
 
@@ -1094,19 +1094,22 @@ MessageSend.prototype = {
 
   /**
    * Send this._deliveryFile to nntp service.
    */
   _deliverAsNews() {
     this.sendReport.currentProcess = Ci.nsIMsgSendReport.process_NNTP;
     MsgUtils.sendLogger.debug("Delivering news message");
     let deliveryListener = new MsgDeliveryListener(this, true);
-    let msgWindow =
-      this._sendProgress?.msgWindow ||
-      MailServices.mailSession.topmostMsgWindow;
+    let msgWindow;
+    try {
+      msgWindow =
+        this._sendProgress?.msgWindow ||
+        MailServices.mailSession.topmostMsgWindow;
+    } catch (e) {}
     MailServices.nntp.postMessage(
       this._deliveryFile,
       this._compFields.newsgroups,
       this._accountKey,
       deliveryListener,
       msgWindow,
       null
     );
@@ -1297,16 +1300,28 @@ MessageSend.prototype = {
       if (Services.prefs.getBoolPref("mail.send_struct", false)) {
         csFlags |= Ci.mozITXTToHTMLConv.kStructPhrase;
       }
       bodyText = cs.scanHTML(bodyText, csFlags);
     }
 
     return bodyText;
   },
+
+  /**
+   * Get the first account key of an identity.
+   * @param {nsIMsgIdentity} identity - The identity.
+   * @returns {string}
+   */
+  _accountKeyForIdentity(identity) {
+    let servers = MailServices.accounts.getServersForIdentity(identity);
+    return servers.length
+      ? MailServices.accounts.FindAccountForServer(servers[0])?.key
+      : null;
+  },
 };
 
 /**
  * A listener to be passed to the SMTP service.
  *
  * @implements {nsIUrlListener}
  */
 function MsgDeliveryListener(msgSend, isNewsDelivery) {
diff --git a/mailnews/news/src/NntpClient.jsm b/mailnews/news/src/NntpClient.jsm
--- a/mailnews/news/src/NntpClient.jsm
+++ b/mailnews/news/src/NntpClient.jsm
@@ -88,16 +88,17 @@ class NntpClient {
    */
   connect() {
     this._done = false;
     if (this._socket?.readyState == "open") {
       // Reuse the connection.
       this.onOpen();
     } else {
       // Start a new connection.
+      this._authenticated = false;
       let hostname = this._server.hostName.toLowerCase();
       let useSecureTransport = this._server.isSecure;
       this._logger.debug(
         `Connecting to ${useSecureTransport ? "snews" : "news"}://${hostname}:${
           this._server.port
         }`
       );
       this._socket = new TCPSocket(hostname, this._server.port, {
@@ -405,18 +406,26 @@ class NntpClient {
       this._sendCommand(`LISTGROUP ${groupName}`);
     });
   }
 
   /**
    * Send `POST` request to the server.
    */
   post() {
-    this._sendCommand("POST");
-    this._nextAction = this._actionHandlePost;
+    let action = () => {
+      this._nextAction = this._actionHandlePost;
+      this._sendCommand("POST");
+    };
+    if (this._server.pushAuth && !this._authenticated) {
+      this._currentAction = action;
+      this._actionAuthUser();
+    } else {
+      action();
+    }
   }
 
   /**
    * Send `QUIT` request to the server.
    */
   quit(status = Cr.NS_OK) {
     this._sendCommand("QUIT");
     this._nextAction = this.close;
@@ -456,17 +465,17 @@ class NntpClient {
    */
   _actionModeReader(nextAction) {
     if (this._inReadingMode) {
       nextAction();
     } else {
       this._sendCommand("MODE READER");
       this._inReadingMode = true;
       this._nextAction = () => {
-        if (this._server.pushAuth) {
+        if (this._server.pushAuth && !this._authenticated) {
           this._currentAction = nextAction;
           this._actionAuthUser();
         } else {
           nextAction();
         }
       };
     }
   }
@@ -748,16 +757,17 @@ class NntpClient {
 
   /**
    * Decide the next step according to the auth response.
    * @param {NntpResponse} res - Auth response received from the server.
    */
   _actionAuthResult({ status }) {
     switch (status) {
       case AUTH_ACCEPTED:
+        this._authenticated = true;
         this._currentAction?.();
         return;
       case AUTH_PASSWORD_REQUIRED:
         this._actionAuthPassword();
         return;
       case AUTH_FAILED:
         let action = this._authenticator.promptAuthFailed();
         if (action == 1) {

