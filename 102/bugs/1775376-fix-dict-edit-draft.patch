# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1662405786 -7200
# Parent  9c443446ecb5b27060e603a8894a37f1bff5b97c
Bug 1775376 - Delay setting of dictionaries in InitEditor() until initial spell check is done.

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -5395,16 +5395,17 @@ function ComposeUnload() {
     gMsgEditorCreationObserver,
     "obs_documentCreated"
   );
   UnloadCommandUpdateHandlers();
 
   // In some tests, the window is closed so quickly that the observer
   // hasn't fired and removed itself yet, so let's remove it here.
   spellCheckReadyObserver.removeObserver();
+  checkerReadyObserver.removeObserver();
   // Stop spell checker so personal dictionary is saved.
   enableInlineSpellCheck(false);
 
   EditorCleanup();
 
   if (gMsgCompose) {
     gMsgCompose.removeMsgSendListener(gSendListener);
   }
@@ -10858,17 +10859,30 @@ function InitEditor() {
     gMsgCompose.compFields.contentLanguage
   ) {
     draftLanguages = gMsgCompose.compFields.contentLanguage
       .split(",")
       .map(lang => lang.trim());
   }
 
   let dictionaries = getValidSpellcheckerDictionaries(draftLanguages);
-  ComposeChangeLanguage(dictionaries).catch(console.error);
+  // We can only set new dictionaries after the initial spell check
+  // triggered by switching on the inline spell checker is finished.
+  if (!gSpellCheckingEnabled) {
+    ComposeChangeLanguage(dictionaries).catch(console.error);
+  } else {
+    (function setDicts() {
+      if (checkerReadyObserver.isReady()) {
+        checkerReadyObserver.removeObserver();
+        ComposeChangeLanguage(dictionaries).catch(console.error);
+      } else {
+        setTimeout(setDicts, 100);
+      }
+    })();
+  }
 }
 
 function setFontSize(event) {
   // Increase Font Menuitem and Decrease Font Menuitem from the main menu
   // will call this function because of oncommand attribute on the menupopup
   // and fontSize will be null for such function calls.
   let fontSize = event.target.value;
   if (fontSize) {
@@ -10881,32 +10895,74 @@ function setParagraphState(event) {
 }
 
 // This is used as event listener to spellcheck-changed event to update
 // document language.
 function updateDocumentLanguage(e) {
   ComposeChangeLanguage(e.detail.dictionaries).catch(console.error);
 }
 
+var checkerReadyObserver = {
+  _topic: "inlineSpellChecker-spellCheck-ended",
+  _isReady: false,
+
+  observe(aSubject, aTopic, aData) {
+    if (aTopic != this._topic) {
+      return;
+    }
+    this._isReady = true;
+  },
+
+  _isAdded: false,
+
+  addObserver() {
+    if (this._isAdded) {
+      return;
+    }
+
+    Services.obs.addObserver(this, this._topic);
+    this._isAdded = true;
+  },
+
+  removeObserver() {
+    if (!this._isAdded) {
+      return;
+    }
+
+    Services.obs.removeObserver(this, this._topic);
+    this._isAdded = false;
+    this._isReady = false;
+  },
+
+  isReady() {
+    return this._isReady;
+  },
+};
+
 function toggleSpellCheckingEnabled() {
   enableInlineSpellCheck(!gSpellCheckingEnabled);
+  checkerReadyObserver.removeObserver();
 }
 
 // This function is called either at startup (see InitEditor above), or when
 // the user clicks on one of the two menu items that allow them to toggle the
 // spellcheck feature (either context menu or Options menu).
 function enableInlineSpellCheck(aEnableInlineSpellCheck) {
   let checker = GetCurrentEditorSpellChecker();
   if (!checker) {
     return;
   }
   if (gSpellCheckingEnabled != aEnableInlineSpellCheck) {
     // If state of spellchecker is about to change, clear any pending observer.
     spellCheckReadyObserver.removeObserver();
   }
+  checkerReadyObserver.removeObserver();
+  if (aEnableInlineSpellCheck) {
+    checkerReadyObserver.addObserver();
+  }
 
   gSpellCheckingEnabled = checker.enableRealTimeSpell = aEnableInlineSpellCheck;
   document
     .getElementById("msgSubject")
     .setAttribute("spellcheck", aEnableInlineSpellCheck);
 }
 
 function getMailToolbox() {
