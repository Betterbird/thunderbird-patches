# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1652906547 -7200
# Parent  777abf6f136554dfdab2adab8272c02def2f5a8f
Bug 1729221 - Introduce pref mail.openpgp.ignore_missing_mdc to ignore missing MDC.

diff --git a/mail/extensions/am-e2e/prefs/e2e-prefs.js b/mail/extensions/am-e2e/prefs/e2e-prefs.js
--- a/mail/extensions/am-e2e/prefs/e2e-prefs.js
+++ b/mail/extensions/am-e2e/prefs/e2e-prefs.js
@@ -44,16 +44,19 @@ pref("mail.identity.default.last_entered
 // If you need to specify a path, use a file:// URL
 pref("mail.openpgp.alias_rules_file", "");
 
 pref("mail.openpgp.key_assistant.enable", true);
 
 // When sending, encrypt to this additional key. Not available in release channel builds.
 pref("mail.openpgp.debug.extra_encryption_key", "");
 
+// Ignore missing MDC.
+pref("mail.openpgp.ignore_missing_mdc", false);
+
 // Hide prefs and menu entries from non-advanced users
 pref("temp.openpgp.advancedUser", false);
 
 // ** enigmail keySel preferences:
 // use rules to assign keys
 pref("temp.openpgp.assignKeysByRules", true);
 // use email addresses to assign keys
 pref("temp.openpgp.assignKeysByEmailAddr", true);
diff --git a/mail/extensions/openpgp/content/modules/RNP.jsm b/mail/extensions/openpgp/content/modules/RNP.jsm
--- a/mail/extensions/openpgp/content/modules/RNP.jsm
+++ b/mail/extensions/openpgp/content/modules/RNP.jsm
@@ -1203,17 +1203,19 @@ var RNP = {
           prot_cipher_str.address(),
           prot_is_valid.address()
         )
       ) {
         throw new Error("rnp_op_verify_get_protection_info failed");
       }
       let mode = prot_mode_str.readString();
       let cipher = prot_cipher_str.readString();
-      let validIntegrityProtection = prot_is_valid.value;
+      let validIntegrityProtection = options.ignoreVerify
+        ? true
+        : prot_is_valid.value;
 
       if (mode != "none") {
         if (!validIntegrityProtection) {
           useDecodedData = false;
           result.statusFlags |=
             EnigmailConstants.MISSING_MDC | EnigmailConstants.DECRYPTION_FAILED;
         } else if (mode == "null" || this.policyForbidsAlg(cipher)) {
           // don't indicate decryption, because a non-protecting or insecure cipher was used
diff --git a/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm b/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
--- a/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
+++ b/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
@@ -218,17 +218,21 @@ class RNPCryptoAPI extends CryptoAPI {
    * @return {Promise<Object>} - Return object with decryptedData and
    * status information
    *
    * Use Promise.catch to handle failed decryption.
    * retObj.errorMsg will be an error message in this case.
    */
 
   async decryptAttachment(encrypted) {
-    let options = {};
+    let ignoreVerify = Services.prefs.getBoolPref(
+      "mail.openpgp.ignore_missing_mdc",
+      false
+    );
+    let options = { ignoreVerify };
     options.fromAddr = "";
     return RNP.decrypt(encrypted, options);
   }
 
   /**
    *
    * @param {String} encrypted     The encrypted data
    * @param {Object} options       Decryption options
