# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1670516027 -3600
# Parent  9684e825273ca1ef24dbe228a62126663471252a
Bug 1554188 - Only aggressively close folders if many involved in search.

diff --git a/mailnews/base/src/nsMsgDBFolder.cpp b/mailnews/base/src/nsMsgDBFolder.cpp
--- a/mailnews/base/src/nsMsgDBFolder.cpp
+++ b/mailnews/base/src/nsMsgDBFolder.cpp
@@ -169,16 +169,19 @@ nsString nsMsgDBFolder::kLocalizedDrafts
 nsString nsMsgDBFolder::kLocalizedTemplatesName;
 nsString nsMsgDBFolder::kLocalizedUnsentName;
 nsString nsMsgDBFolder::kLocalizedJunkName;
 nsString nsMsgDBFolder::kLocalizedArchivesName;
 
 nsString nsMsgDBFolder::kLocalizedBrandShortName;
 
 nsrefcnt nsMsgDBFolder::mInstanceCount = 0;
+nsWeakPtr nsMsgDBFolder::m_lastFolder1 = nullptr;
+nsWeakPtr nsMsgDBFolder::m_lastFolder2 = nullptr;
+nsWeakPtr nsMsgDBFolder::m_lastFolder3 = nullptr;
 bool nsMsgDBFolder::gInitializeStringsDone = false;
 // This is used in `nonEnglishApp()` to determine localised
 // folders strings.
 // -1: not retrieved yet, 1: English, 0: non-English.
 int nsMsgDBFolder::gIsEnglishApp;
 
 // We define strings for folder properties and events.
 // Properties:
@@ -4693,17 +4696,65 @@ NS_IMETHODIMP nsMsgDBFolder::GetMessageH
                                               nsIMsgDBHdr** aMsgHdr) {
   NS_ENSURE_ARG_POINTER(aMsgHdr);
   bool weOpenedDB = !mDatabase;
   nsCOMPtr<nsIMsgDatabase> database;
   nsresult rv = GetMsgDatabase(getter_AddRefs(database));
   NS_ENSURE_SUCCESS(rv, rv);
   if (!database) return NS_ERROR_FAILURE;
   rv = database->GetMsgHdrForKey(msgKey, aMsgHdr);
-  if (weOpenedDB) CloseDBIfFolderNotOpen(false);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  if (weOpenedDB) {
+    // Let's keep track of the last folders and close a folder database
+    // if necessary.
+    nsCOMPtr<nsIMsgFolder> f1 = do_QueryReferent(nsMsgDBFolder::m_lastFolder1);
+    nsCOMPtr<nsIMsgFolder> f2 = do_QueryReferent(nsMsgDBFolder::m_lastFolder2);
+    nsCOMPtr<nsIMsgFolder> f3 = do_QueryReferent(nsMsgDBFolder::m_lastFolder3);
+    if (f1 == this) {
+      nsMsgDBFolder::m_lastFolder1 = nsMsgDBFolder::m_lastFolder2;
+      nsMsgDBFolder::m_lastFolder2 = nsMsgDBFolder::m_lastFolder3;
+      nsMsgDBFolder::m_lastFolder3 = do_GetWeakReference(this);
+    } else if (f2 == this) {
+      nsMsgDBFolder::m_lastFolder2 = nsMsgDBFolder::m_lastFolder3;
+      nsMsgDBFolder::m_lastFolder3 = do_GetWeakReference(this);
+    } else if (f3 == this) {
+      ; // Skip, last folder is this one.
+    } else {
+      // The new folder isn't in our cache of three. Close the first
+      // one instead.
+// #define FOLDER_DEBUG 1
+#ifdef FOLDER_DEBUG
+      nsAutoCString n;
+      nsAutoCString n1;
+      nsAutoCString n2;
+      nsAutoCString n3;
+      GetURI(n);
+      if (f1) f1->GetURI(n1);
+      if (f2) f2->GetURI(n2);
+      if (f3) f3->GetURI(n3);
+      fprintf(stderr, "nsMsgDBFolder::GetMessageHeader: Folders:\n");
+      fprintf(stderr, "  Current: %s\n", n.get());
+      fprintf(stderr, "  Before: %s\n", n3.get());
+      fprintf(stderr, "  Before: %s\n", n2.get());
+      fprintf(stderr, "  Before: %s\n", n1.get());
+#endif
+      if (f1) {
+        bool dbOpen = false;
+        f1->GetDatabaseOpen(&dbOpen);
+        if (dbOpen) f1->CloseDBIfFolderNotOpen(false);
+#ifdef FOLDER_DEBUG
+        fprintf(stderr, "  Closed: %s\n", n1.get());
+#endif
+      }
+      nsMsgDBFolder::m_lastFolder1 = nsMsgDBFolder::m_lastFolder2;
+      nsMsgDBFolder::m_lastFolder2 = nsMsgDBFolder::m_lastFolder3;
+      nsMsgDBFolder::m_lastFolder3 = do_GetWeakReference(this);
+    }
+  }
   return rv;
 }
 
 NS_IMETHODIMP nsMsgDBFolder::GetDescendants(
     nsTArray<RefPtr<nsIMsgFolder>>& aDescendants) {
   aDescendants.Clear();
   for (nsIMsgFolder* child : mSubFolders) {
     aDescendants.AppendElement(child);
diff --git a/mailnews/base/src/nsMsgDBFolder.h b/mailnews/base/src/nsMsgDBFolder.h
--- a/mailnews/base/src/nsMsgDBFolder.h
+++ b/mailnews/base/src/nsMsgDBFolder.h
@@ -242,16 +242,22 @@ class nsMsgDBFolder : public nsSupportsW
 
   /*
    * End of offline message tracking vars
    */
 
   nsCOMPtr<nsIMsgRetentionSettings> m_retentionSettings;
   nsCOMPtr<nsIMsgDownloadSettings> m_downloadSettings;
   static nsrefcnt mInstanceCount;
+  // Keep track of the last three folders. This should work well for:
+  // a) One folder open in view, another open for searching/virtual folders.
+  // b) One folder open in view, two more as source/target of a move/copy operation.
+  static nsWeakPtr m_lastFolder1;
+  static nsWeakPtr m_lastFolder2;
+  static nsWeakPtr m_lastFolder3;
 
   uint32_t mFlags;
   nsWeakPtr mParent;          // This won't be refcounted for ownership reasons.
   int32_t mNumUnreadMessages; /* count of unread messages (-1 means unknown; -2
                                  means unknown but we already tried to find
                                  out.) */
   int32_t mNumTotalMessages;  /* count of existing messages. */
   bool mNotifyCountChanges;
diff --git a/mailnews/base/src/nsMsgSearchDBView.cpp b/mailnews/base/src/nsMsgSearchDBView.cpp
--- a/mailnews/base/src/nsMsgSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgSearchDBView.cpp
@@ -330,31 +330,19 @@ void nsMsgSearchDBView::RemoveRows(nsMsg
 nsresult nsMsgSearchDBView::GetMsgHdrForViewIndex(nsMsgViewIndex index,
                                                   nsIMsgDBHdr** msgHdr) {
   if (index == nsMsgViewIndex_None || index >= (uint32_t)m_folders.Count()) {
     return NS_MSG_INVALID_DBVIEW_INDEX;
   }
 
   nsIMsgFolder* folder = m_folders[index];
   if (folder) {
-    nsCOMPtr<nsIMsgDatabase> db;
-    nsresult rv = folder->GetMsgDatabase(getter_AddRefs(db));
+    nsresult rv = folder->GetMessageHeader(m_keys[index], msgHdr);
     NS_ENSURE_SUCCESS(rv, rv);
-    if (db) {
-      rv = db->GetMsgHdrForKey(m_keys[index], msgHdr);
-      // This is still a disaster zone. If a search result spans more than
-      // 500 folders, selecting the entire result will trigger calls of
-      // nsMsgDBView::GetSelectedMsgHdrs() in folderDisplay.js which via
-      // nsMsgDBView::GetHeadersFromSelection() calls this function for all
-      // the result messages attempting to open more that 500 databases.
-      // Even the call below doesn't mitigate that ...
-      // and using `true` as call parameter breaks other things.
-      folder->CloseDBIfFolderNotOpen(false);
-      return rv;
-    }
+    return rv;
   }
 
   return NS_ERROR_FAILURE;
 }
 
 NS_IMETHODIMP
 nsMsgSearchDBView::GetFolderForViewIndex(nsMsgViewIndex index,
                                          nsIMsgFolder** aFolder) {
diff --git a/mailnews/base/src/nsMsgXFViewThread.cpp b/mailnews/base/src/nsMsgXFViewThread.cpp
--- a/mailnews/base/src/nsMsgXFViewThread.cpp
+++ b/mailnews/base/src/nsMsgXFViewThread.cpp
@@ -248,20 +248,19 @@ nsresult nsMsgXFViewThread::AddHdr(nsIMs
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgXFViewThread::GetChildHdrAt(uint32_t aIndex, nsIMsgDBHdr** aResult) {
   if (aIndex >= m_keys.Length()) return NS_MSG_MESSAGE_NOT_FOUND;
 
-  nsCOMPtr<nsIMsgDatabase> db;
-  nsresult rv = m_folders[aIndex]->GetMsgDatabase(getter_AddRefs(db));
+  nsresult rv = m_folders[aIndex]->GetMessageHeader(m_keys[aIndex], aResult);
   NS_ENSURE_SUCCESS(rv, rv);
-  return db->GetMsgHdrForKey(m_keys[aIndex], aResult);
+  return rv;
 }
 
 NS_IMETHODIMP
 nsMsgXFViewThread::RemoveChildAt(uint32_t aIndex) {
   m_keys.RemoveElementAt(aIndex);
   m_levels.RemoveElementAt(aIndex);
   m_folders.RemoveObjectAt(aIndex);
   return NS_OK;
diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
@@ -18,28 +18,46 @@
 #include "nsMsgMessageFlags.h"
 #include "nsServiceManagerUtils.h"
 
 nsMsgXFVirtualFolderDBView::nsMsgXFVirtualFolderDBView() {
   mSuppressMsgDisplay = false;
   m_doingSearch = false;
   m_doingQuickSearch = false;
   m_totalMessagesInView = 0;
+  m_numFoldersSearched = 0;
   m_curFolderHasCachedHits = false;
 }
 
 nsMsgXFVirtualFolderDBView::~nsMsgXFVirtualFolderDBView() {}
 
 NS_IMETHODIMP
 nsMsgXFVirtualFolderDBView::Open(nsIMsgFolder* folder,
                                  nsMsgViewSortTypeValue sortType,
                                  nsMsgViewSortOrderValue sortOrder,
                                  nsMsgViewFlagsTypeValue viewFlags,
                                  int32_t* pCount) {
   m_viewFolder = folder;
+  m_numFoldersSearched = 0;
+  if (folder) {
+    nsCOMPtr<nsIMsgDatabase> db;
+    nsCOMPtr<nsIDBFolderInfo> folderInfo;
+    folder->GetDBFolderInfoAndDB(getter_AddRefs(folderInfo),
+                                 getter_AddRefs(db));
+    if (folderInfo) {
+      nsCString searchUri;
+      folderInfo->GetCharProperty("searchFolderUri", searchUri);
+      if (!searchUri.IsEmpty()) {
+        m_numFoldersSearched = 1;
+        for (const char* c = searchUri.BeginReading(); *c; c++) {
+          if (*c == '|') m_numFoldersSearched++;
+        }
+      }
+    }
+  }
   return nsMsgSearchDBView::Open(folder, sortType, sortOrder, viewFlags,
                                  pCount);
 }
 
 void nsMsgXFVirtualFolderDBView::RemovePendingDBListeners() {
   nsresult rv;
   nsCOMPtr<nsIMsgDBService> msgDBService =
       do_GetService(NS_MSGDB_SERVICE_CONTRACTID, &rv);
@@ -196,17 +214,17 @@ void nsMsgXFVirtualFolderDBView::UpdateC
         // ### of course, this isn't quite right, since we should be
         // using FindHdr, and we shouldn't be expanding the threads.
         db->GetMsgHdrForKey(badKey, getter_AddRefs(badHdr));
         // Let nsMsgSearchDBView decide what to do about this header
         // getting removed.
         if (badHdr) OnHdrDeleted(badHdr, nsMsgKey_None, 0, this);
       }
     }
-    folder->CloseDBIfFolderNotOpen(false);
+    if (m_numFoldersSearched > 200) folder->CloseDBIfFolderNotOpen(false);
   }
 }
 
 void nsMsgXFVirtualFolderDBView::UpdateCacheAndViewForPrevSearchedFolders(
     nsIMsgFolder* curSearchFolder) {
   // Handle the most recent folder with hits, if any.
   if (m_curFolderGettingHits) {
     uint32_t count = m_hdrHits.Count();
@@ -270,17 +288,17 @@ nsMsgXFVirtualFolderDBView::OnSearchHit(
     else if (m_sortValid)
       InsertHdrFromFolder(aMsgHdr, aFolder);
     else
       AddHdrFromFolder(aMsgHdr, aFolder);
   }
 
   m_hdrHits.AppendObject(aMsgHdr);
   m_totalMessagesInView++;
-  aFolder->CloseDBIfFolderNotOpen(false);
+  if (m_numFoldersSearched > 200) aFolder->CloseDBIfFolderNotOpen(false);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgXFVirtualFolderDBView::OnSearchDone(nsresult status) {
   NS_ENSURE_TRUE(m_viewFolder, NS_ERROR_NOT_INITIALIZED);
 
@@ -440,17 +458,17 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
               } else {
                 break;
               }
 
               cachedHits->HasMoreElements(&hasMore);
             }
           }
         }
-        searchFolder->CloseDBIfFolderNotOpen(false);
+        if (m_numFoldersSearched > 200) searchFolder->CloseDBIfFolderNotOpen(false);
       }
     }
   }
 
   if (mTree && !m_doingQuickSearch) mTree->EndUpdateBatch();
 
   m_curFolderStartKeyIndex = 0;
   m_curFolderGettingHits = nullptr;
diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.h b/mailnews/base/src/nsMsgXFVirtualFolderDBView.h
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.h
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.h
@@ -56,15 +56,16 @@ class nsMsgXFVirtualFolderDBView : publi
  protected:
   virtual nsresult GetMessageEnumerator(nsIMsgEnumerator** enumerator) override;
 
   nsCOMArray<nsIMsgFolder> m_foldersSearchingOver;
   nsCOMArray<nsIMsgDBHdr> m_hdrHits;
   nsCOMPtr<nsIMsgFolder> m_curFolderGettingHits;
   // keeps track of the index of the first hit from the cur folder
   uint32_t m_curFolderStartKeyIndex;
+  uint32_t m_numFoldersSearched;
   bool m_curFolderHasCachedHits;
   bool m_doingSearch;
   // Are we doing a quick search on top of the virtual folder search?
   bool m_doingQuickSearch;
 };
 
 #endif
diff --git a/mailnews/search/src/nsMsgSearchSession.cpp b/mailnews/search/src/nsMsgSearchSession.cpp
--- a/mailnews/search/src/nsMsgSearchSession.cpp
+++ b/mailnews/search/src/nsMsgSearchSession.cpp
@@ -495,17 +495,17 @@ nsresult nsMsgSearchSession::TimeSlice(b
 void nsMsgSearchSession::ReleaseFolderDBRef() {
   nsMsgSearchScopeTerm* scope = GetRunningScope();
   if (!scope) return;
 
   nsCOMPtr<nsIMsgFolder> folder;
   scope->GetFolder(getter_AddRefs(folder));
   // The call parameter needs to be `true` when dealing with more than one
   // folder. Tested via trial and error.
-  folder->CloseDBIfFolderNotOpen(m_scopeList.Length() > 1);
+  folder->CloseDBIfFolderNotOpen(m_scopeList.Length() > 200);
 }
 nsresult nsMsgSearchSession::TimeSliceSerial(bool* aDone) {
   // This version of TimeSlice runs each scope term one at a time, and waits
   // until one scope term is finished before starting another one. When we're
   // searching the local disk, this is the fastest way to do it.
 
   NS_ENSURE_ARG_POINTER(aDone);
 
