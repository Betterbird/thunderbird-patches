
# HG changeset patch
# User Ping Chen <remotenonsense@gmail.com>
# Date 1668104567 -3600
# Node ID b2697513aaef997a47e11b6ca5990c4ba407a396
# Parent  6fd51720fc06e83a6e91451af63ec785f2a3e0f6
Bug 1735803 - Convert server hostname to lowercase before connecting. r=mkmelin

Differential Revision: https://phabricator.services.mozilla.com/D158179

diff --git a/mailnews/addrbook/modules/LDAPClient.jsm b/mailnews/addrbook/modules/LDAPClient.jsm
--- a/mailnews/addrbook/modules/LDAPClient.jsm
+++ b/mailnews/addrbook/modules/LDAPClient.jsm
@@ -36,22 +36,23 @@ class LDAPClient {
       maxLogLevel: "Warn",
       maxLogLevelPref: "mailnews.ldap.loglevel",
     });
 
     this._dataEventsQueue = [];
   }
 
   connect() {
+    let hostname = this._host.toLowerCase();
     this._logger.debug(
-      `Connecting to ${this._useSecureTransport ? "ldaps" : "ldap"}://${
-        this._host
-      }:${this._port}`
+      `Connecting to ${
+        this._useSecureTransport ? "ldaps" : "ldap"
+      }://${hostname}:${this._port}`
     );
-    this._socket = new TCPSocket(this._host, this._port, {
+    this._socket = new TCPSocket(hostname, this._port, {
       binaryType: "arraybuffer",
       useSecureTransport: this._useSecureTransport,
     });
     this._socket.onopen = this._onOpen;
     this._socket.onerror = this._onError;
   }
 
   /**
diff --git a/mailnews/compose/src/SmtpClient.jsm b/mailnews/compose/src/SmtpClient.jsm
--- a/mailnews/compose/src/SmtpClient.jsm
+++ b/mailnews/compose/src/SmtpClient.jsm
@@ -109,20 +109,21 @@ class SmtpClient {
     this.onready = failedRecipients => {}; // Waiting for mail body, lists addresses that were not accepted as recipients
     this.ondone = success => {}; // The mail has been sent. Wait for `onidle` next. Indicates if the message was queued by the server.
   }
 
   /**
    * Initiate a connection to the server
    */
   connect() {
+    let hostname = this._server.hostname.toLowerCase();
     let port = this._server.port || (this.options.requireTLS ? 465 : 587);
-    this.logger.debug(`Connecting to smtp://${this._server.hostname}:${port}`);
+    this.logger.debug(`Connecting to smtp://${hostname}:${port}`);
     this._secureTransport = this.options.requireTLS;
-    this.socket = new TCPSocket(this._server.hostname, port, {
+    this.socket = new TCPSocket(hostname, port, {
       binaryType: "arraybuffer",
       useSecureTransport: this._secureTransport,
     });
 
     // allows certificate handling for platform w/o native tls support
     // oncert is non standard so setting it might throw if the socket object is immutable
     try {
       this.socket.oncert = this.oncert;
diff --git a/mailnews/imap/src/ImapClient.jsm b/mailnews/imap/src/ImapClient.jsm
--- a/mailnews/imap/src/ImapClient.jsm
+++ b/mailnews/imap/src/ImapClient.jsm
@@ -48,22 +48,21 @@ class ImapClient {
    * Initiate a connection to the server
    */
   connect() {
     this._idling = false;
     if (this._socket?.readyState == "open") {
       // Reuse the connection.
       this.onReady();
     } else {
-      this._logger.debug(
-        `Connecting to ${this._server.hostName}:${this._server.port}`
-      );
+      let hostname = this._server.hostName.toLowerCase();
+      this._logger.debug(`Connecting to ${hostname}:${this._server.port}`);
       this._capabilities = null;
       this._secureTransport = this._server.socketType == Ci.nsMsgSocketType.SSL;
-      this._socket = new TCPSocket(this._server.hostName, this._server.port, {
+      this._socket = new TCPSocket(hostname, this._server.port, {
         binaryType: "arraybuffer",
         useSecureTransport: this._secureTransport,
       });
       this._socket.onopen = this._onOpen;
       this._socket.onerror = this._onError;
     }
   }
 
diff --git a/mailnews/local/src/Pop3Client.jsm b/mailnews/local/src/Pop3Client.jsm
--- a/mailnews/local/src/Pop3Client.jsm
+++ b/mailnews/local/src/Pop3Client.jsm
@@ -126,25 +126,24 @@ class Pop3Client {
 
     this._messagesToHandle = [];
   }
 
   /**
    * Initiate a connection to the server
    */
   connect() {
-    this._logger.debug(
-      `Connecting to pop://${this._server.hostName}:${this._server.port}`
-    );
+    let hostname = this._server.hostName.toLowerCase();
+    this._logger.debug(`Connecting to pop://${hostname}:${this._server.port}`);
     this.runningUri
       .QueryInterface(Ci.nsIMsgMailNewsUrl)
       .SetUrlState(true, Cr.NS_OK);
     this._server.serverBusy = true;
     this._secureTransport = this._server.socketType == Ci.nsMsgSocketType.SSL;
-    this._socket = new TCPSocket(this._server.hostName, this._server.port, {
+    this._socket = new TCPSocket(hostname, this._server.port, {
       binaryType: "arraybuffer",
       useSecureTransport: this._secureTransport,
     });
     this._socket.onopen = this._onOpen;
     this._socket.onerror = this._onError;
 
     this._authenticating = false;
     // Indicates if the connection has been closed and can't be used anymore.
diff --git a/mailnews/news/src/NntpClient.jsm b/mailnews/news/src/NntpClient.jsm
--- a/mailnews/news/src/NntpClient.jsm
+++ b/mailnews/news/src/NntpClient.jsm
@@ -89,24 +89,25 @@ class NntpClient {
    */
   connect() {
     this._done = false;
     if (this._socket?.readyState == "open") {
       // Reuse the connection.
       this.onOpen();
     } else {
       // Start a new connection.
+      let hostname = this._server.hostName.toLowerCase();
       this._authenticated = false;
       let useSecureTransport = this._server.isSecure;
       this._logger.debug(
-        `Connecting to ${useSecureTransport ? "snews" : "news"}://${
-          this._server.hostName
-        }:${this._server.port}`
+        `Connecting to ${useSecureTransport ? "snews" : "news"}://${hostname}:${
+          this._server.port
+        }`
       );
-      this._socket = new TCPSocket(this._server.hostName, this._server.port, {
+      this._socket = new TCPSocket(hostname, this._server.port, {
         binaryType: "arraybuffer",
         useSecureTransport,
       });
       this._socket.onopen = this._onOpen;
       this._socket.onerror = this._onError;
     }
   }
 
