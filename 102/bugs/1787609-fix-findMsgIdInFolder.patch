# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1661767718 -7200
# Parent  dae64d5d61f842878d3bb16c6bd4eb3db1ef744c
Bug 1787609 - Fix findMsgIdInFolder(): Tolerate missing MSF and close database after use. Related backend changes.

diff --git a/mail/modules/MailUtils.jsm b/mail/modules/MailUtils.jsm
--- a/mail/modules/MailUtils.jsm
+++ b/mail/modules/MailUtils.jsm
@@ -614,19 +614,24 @@ var MailUtils = {
    * @param {nsIMsgFolder} folder - The folder to check.
    * @returns {nsIMsgDBHdr}
    */
   findMsgIdInFolder(msgId, folder) {
     let msgHdr;
 
     // Search in folder.
     if (!folder.isServer) {
-      msgHdr = folder.msgDatabase.getMsgHdrForMessageID(msgId);
-      if (msgHdr) {
-        return msgHdr;
+      try {
+        msgHdr = folder.msgDatabase.getMsgHdrForMessageID(msgId);
+        folder.closeDBIfFolderNotOpen(true);
+        if (msgHdr) {
+          return msgHdr;
+        }
+      } catch (ex) {
+        Cu.reportError(`Database for ${folder.name} not accessible`);
       }
     }
 
     // Search subfolders recursively.
     for (let currentFolder of folder.subFolders) {
       msgHdr = this.findMsgIdInFolder(msgId, currentFolder);
       if (msgHdr) {
         return msgHdr;
diff --git a/mailnews/base/public/nsIMsgFolder.idl b/mailnews/base/public/nsIMsgFolder.idl
--- a/mailnews/base/public/nsIMsgFolder.idl
+++ b/mailnews/base/public/nsIMsgFolder.idl
@@ -549,16 +549,19 @@ interface nsIMsgFolder : nsISupports {
    * @exception NS_MSG_ERROR_FOLDER_SUMMARY_MISSING If the database does not
    *                         exist.
    * @exception NS_MSG_ERROR_FOLDER_SUMMARY_OUT_OF_DATE If the database contains
    *                         out of date information.
    * @see nsIMsgFolder::getDBFolderInfoAndDB.
    */
   attribute nsIMsgDatabase msgDatabase;
 
+  /// Close the database if not open in folder.
+  void closeDBIfFolderNotOpen(in boolean forceClosed);
+
   /// Does the folder have a local reference to the msgDatabase?
   readonly attribute boolean databaseOpen;
 
   /**
    * Get the backup message database, used in reparsing. This database must
    * be created first using closeAndBackupFolderDB()
    *
    * @return   backup message database
diff --git a/mailnews/base/src/nsMsgDBFolder.cpp b/mailnews/base/src/nsMsgDBFolder.cpp
--- a/mailnews/base/src/nsMsgDBFolder.cpp
+++ b/mailnews/base/src/nsMsgDBFolder.cpp
@@ -2025,17 +2025,17 @@ nsMsgDBFolder::GetStringProperty(const c
       nsCOMPtr<nsIMsgDatabase> db;
       bool exists;
       rv = dbPath->Exists(&exists);
       if (NS_FAILED(rv) || !exists) return NS_MSG_ERROR_FOLDER_MISSING;
       bool weOpenedDB = !mDatabase;
       rv = GetDBFolderInfoAndDB(getter_AddRefs(folderInfo), getter_AddRefs(db));
       if (NS_SUCCEEDED(rv))
         rv = folderInfo->GetCharProperty(propertyName, propertyValue);
-      if (weOpenedDB) CloseDBIfFolderNotOpen();
+      if (weOpenedDB) CloseDBIfFolderNotOpen(false);
     }
   }
   return rv;
 }
 
 NS_IMETHODIMP
 nsMsgDBFolder::SetStringProperty(const char* propertyName,
                                  const nsACString& propertyValue) {
@@ -4406,17 +4406,17 @@ nsresult nsMsgDBFolder::ApplyRetentionSe
       if (mDatabase)
         rv = mDatabase->ApplyRetentionSettings(retentionSettings,
                                                deleteViaFolder);
     }
   }
   // we don't want applying retention settings to keep the db open, because
   // if we try to purge a bunch of folders, that will leave the dbs all open.
   // So if we opened the db, close it.
-  if (weOpenedDB) CloseDBIfFolderNotOpen();
+  if (weOpenedDB) CloseDBIfFolderNotOpen(false);
   return rv;
 }
 
 NS_IMETHODIMP
 nsMsgDBFolder::DeleteMessages(nsTArray<RefPtr<nsIMsgDBHdr>> const& messages,
                               nsIMsgWindow* msgWindow, bool deleteStorage,
                               bool isMove, nsIMsgCopyServiceListener* listener,
                               bool allowUndo) {
@@ -4871,26 +4871,28 @@ nsresult nsMsgDBFolder::SetWarnFilterCha
   return prefBranch->SetBoolPref(PREF_MAIL_WARN_FILTER_CHANGED, aVal);
 }
 
 NS_IMETHODIMP nsMsgDBFolder::NotifyCompactCompleted() {
   NS_ASSERTION(false, "should be overridden by child class");
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
-nsresult nsMsgDBFolder::CloseDBIfFolderNotOpen() {
+NS_IMETHODIMP nsMsgDBFolder::CloseDBIfFolderNotOpen(bool aForceClosed) {
   nsresult rv;
   nsCOMPtr<nsIMsgMailSession> session =
       do_GetService(NS_MSGMAILSESSION_CONTRACTID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
   bool folderOpen;
   session->IsFolderOpenInWindow(this, &folderOpen);
   if (!folderOpen &&
-      !(mFlags & (nsMsgFolderFlags::Trash | nsMsgFolderFlags::Inbox)))
+      !(mFlags & (nsMsgFolderFlags::Trash | nsMsgFolderFlags::Inbox))) {
+    if (aForceClosed && mDatabase) mDatabase->ForceClosed();
     SetMsgDatabase(nullptr);
+  }
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgDBFolder::SetSortOrder(int32_t order) {
   NS_ASSERTION(false, "not implemented");
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
diff --git a/mailnews/base/src/nsMsgDBFolder.h b/mailnews/base/src/nsMsgDBFolder.h
--- a/mailnews/base/src/nsMsgDBFolder.h
+++ b/mailnews/base/src/nsMsgDBFolder.h
@@ -184,17 +184,16 @@ class nsMsgDBFolder : public nsSupportsW
   nsresult GetPromptPurgeThreshold(bool* aPrompt);
   nsresult GetPurgeThreshold(int32_t* aThreshold);
   nsresult ApplyRetentionSettings(bool deleteViaFolder);
   MOZ_CAN_RUN_SCRIPT_BOUNDARY nsresult AddMarkAllReadUndoAction(
       nsIMsgWindow* msgWindow, nsMsgKey* thoseMarked, uint32_t numMarked);
 
   nsresult PerformBiffNotifications(
       void);  // if there are new, non spam messages, do biff
-  nsresult CloseDBIfFolderNotOpen();
 
   // Helper function for Move code to call to update the MRU and MRM time.
   void UpdateTimestamps(bool allowUndo);
   void SetMRUTime();
   void SetMRMTime();
   /**
    * Clear all processing flags, presumably because message keys are no longer
    * valid.
diff --git a/mailnews/db/msgdb/src/nsMsgDatabase.cpp b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
--- a/mailnews/db/msgdb/src/nsMsgDatabase.cpp
+++ b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
@@ -1200,18 +1200,21 @@ nsresult nsMsgDatabase::CheckForErrors(n
         NS_WARNING("Forcing a reparse presumably because key limit reached");
         err = NS_MSG_ERROR_FOLDER_SUMMARY_OUT_OF_DATE;
       }
     }
     if (NS_FAILED(err) && !m_leaveInvalidDB) deleteInvalidDB = true;
   } else if (err != NS_MSG_ERROR_FOLDER_SUMMARY_MISSING) {
     // No point declaring it out-of-date and trying to delete it
     // if it's missing.
+    // We get here with NS_ERROR_FAILURE when Mork can't open the
+    // file due to too many open files. In this case there is no
+    // point to blow away the MSF file.
     err = NS_MSG_ERROR_FOLDER_SUMMARY_OUT_OF_DATE;
-    deleteInvalidDB = true;
+    if (!m_leaveInvalidDB) deleteInvalidDB = true;
   }
 
   if (deleteInvalidDB) {
     // this will make the db folder info release its ref to the mail db...
     m_dbFolderInfo = nullptr;
     ForceClosed();
     if (err == NS_MSG_ERROR_FOLDER_SUMMARY_OUT_OF_DATE)
       summaryFile->Remove(false);
diff --git a/mailnews/local/src/nsLocalMailFolder.cpp b/mailnews/local/src/nsLocalMailFolder.cpp
--- a/mailnews/local/src/nsLocalMailFolder.cpp
+++ b/mailnews/local/src/nsLocalMailFolder.cpp
@@ -1230,17 +1230,17 @@ nsMsgLocalMailFolder::OnCopyCompleted(ns
 
   if (mCopyState && !mCopyState->m_newMsgKeywords.IsEmpty() &&
       mCopyState->m_newHdr) {
     AddKeywordsToMessages({&*mCopyState->m_newHdr},
                           mCopyState->m_newMsgKeywords);
   }
   if (moveCopySucceeded && mDatabase) {
     mDatabase->SetSummaryValid(true);
-    (void)CloseDBIfFolderNotOpen();
+    (void)CloseDBIfFolderNotOpen(false);
   }
 
   delete mCopyState;
   mCopyState = nullptr;
   nsCOMPtr<nsIMsgCopyService> copyService =
       do_GetService(NS_MSGCOPYSERVICE_CONTRACTID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
   return copyService->NotifyCompletion(
@@ -3065,17 +3065,17 @@ nsMsgLocalMailFolder::SetCheckForNewMess
 
 NS_IMETHODIMP
 nsMsgLocalMailFolder::NotifyCompactCompleted() {
   mExpungedBytes = 0;
   m_newMsgs.Clear();  // if compacted, m_newMsgs probably aren't valid.
   // if compacted, processing flags probably also aren't valid.
   ClearProcessingFlags();
   (void)RefreshSizeOnDisk();
-  (void)CloseDBIfFolderNotOpen();
+  (void)CloseDBIfFolderNotOpen(false);
   NotifyFolderEvent(kCompactCompleted);
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgLocalMailFolder::Shutdown(bool shutdownChildren) {
   mInitialized = false;
   return nsMsgDBFolder::Shutdown(shutdownChildren);
 }
