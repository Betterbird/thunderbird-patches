# HG changeset patch
# User Jonathan Kew <jkew@mozilla.com>
# Date 1678105424 -3600
# Parent  191c99aa5991688746e153613702d62d9516f80f
Bug 1820504 - Optimize GraphemeClusterBreakIteratorUtf16::Next by making the evaluation of baseIsEmoji lazy. r=TYLin

diff --git a/intl/lwbrk/Segmenter.cpp b/intl/lwbrk/Segmenter.cpp
--- a/intl/lwbrk/Segmenter.cpp
+++ b/intl/lwbrk/Segmenter.cpp
@@ -125,39 +125,65 @@ Maybe<uint32_t> GraphemeClusterBreakIter
 
   const uint32_t kVS16 = 0xfe0f;
   const uint32_t kZWJ = 0x200d;
   // UTF-16 surrogate values for Fitzpatrick type modifiers
   const uint32_t kFitzpatrickHigh = 0xD83C;
   const uint32_t kFitzpatrickLowFirst = 0xDFFB;
   const uint32_t kFitzpatrickLowLast = 0xDFFF;
 
-  bool baseIsEmoji = (GetEmojiPresentation(ch) == EmojiDefault) ||
-                     (GetEmojiPresentation(ch) == TextDefault &&
-                      ((mPos < len && mText[mPos] == kVS16) ||
-                       (mPos + 1 < len && mText[mPos] == kFitzpatrickHigh &&
-                        mText[mPos + 1] >= kFitzpatrickLowFirst &&
-                        mText[mPos + 1] <= kFitzpatrickLowLast)));
+  // Checking the emoji-presentation property of the base character is a bit
+  // expensive, so we do it lazily.
+  enum class EmojiStatus : uint8_t {
+    No,
+    Yes,
+    Unknown,
+  } baseIsEmojiStatus = EmojiStatus::Unknown;
+
+  // Remember the base character and the position of the next, in case we need
+  // to evaluate its emoji status.
+  uint32_t baseCh = ch;
+  uint32_t afterBase = mPos;
+
+  auto isFitzpatrickModifierAt = [&](uint32_t pos) -> bool {
+    return pos + 1 < len && mText[pos] == kFitzpatrickHigh &&
+           mText[pos + 1] >= kFitzpatrickLowFirst &&
+           mText[pos + 1] <= kFitzpatrickLowLast;
+  };
+
+  auto baseIsEmoji = [&]() -> bool {
+    if (baseIsEmojiStatus == EmojiStatus::Unknown) {
+      baseIsEmojiStatus =
+          GetEmojiPresentation(baseCh) == EmojiDefault ||
+                  (GetEmojiPresentation(baseCh) == TextDefault &&
+                   ((afterBase < len && mText[afterBase] == kVS16) ||
+                    (isFitzpatrickModifierAt(afterBase))))
+              ? EmojiStatus::Yes
+              : EmojiStatus::No;
+    }
+    return baseIsEmojiStatus == EmojiStatus::Yes;
+  };
+
   bool prevWasZwj = false;
 
   while (mPos < len) {
     ch = mText[mPos];
     size_t chLen = 1;
 
     // Check for surrogate pairs; note that isolated surrogates will just
     // be treated as generic (non-cluster-extending) characters here,
     // which is fine for cluster-iterating purposes
     if (mPos < len - 1 && NS_IS_SURROGATE_PAIR(ch, mText[mPos + 1])) {
       ch = SURROGATE_TO_UCS4(ch, mText[mPos + 1]);
       chLen = 2;
     }
 
     bool extendCluster =
         IsClusterExtender(ch) ||
-        (baseIsEmoji && prevWasZwj &&
+        (prevWasZwj && baseIsEmoji() &&
          ((GetEmojiPresentation(ch) == EmojiDefault) ||
           (GetEmojiPresentation(ch) == TextDefault && mPos + chLen < len &&
            mText[mPos + chLen] == kVS16)));
     if (!extendCluster) {
       break;
     }
 
     prevWasZwj = (ch == kZWJ);
