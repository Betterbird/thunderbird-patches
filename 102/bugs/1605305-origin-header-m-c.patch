# HG changeset patch
# User Tom Schuster <tschuster@mozilla.com>
# Date 1674595678 -3600
# Node ID 28cf8d7e972301be7da0472bc7448deb06555c17
# Parent  c6d213cca55cb6b9639281c3da5bfc018a1ce8cd
Bug 1605305 - Consistently provide an Origin header for normal requests. r=freddyb,necko-reviewers,kershaw,robwu

This patch is more conservative for requests initiated by add-on and prefers
to send no Origin header instead of Origin: null.

Differential Revision: https://phabricator.services.mozilla.com/D147091

diff --git a/browser/components/search/test/browser/mozsearch.sjs b/browser/components/search/test/browser/mozsearch.sjs
--- a/browser/components/search/test/browser/mozsearch.sjs
+++ b/browser/components/search/test/browser/mozsearch.sjs
@@ -1,11 +1,11 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function handleRequest(req, resp) {
   resp.setHeader("Content-Type", "text/html", false);
-  if (req.hasHeader("Origin")) {
+  if (req.hasHeader("Origin") && req.getHeader("Origin") != "null") {
     resp.write("error");
     return;
   }
   resp.write("hello world");
 }
diff --git a/dom/fetch/FetchDriver.cpp b/dom/fetch/FetchDriver.cpp
--- a/dom/fetch/FetchDriver.cpp
+++ b/dom/fetch/FetchDriver.cpp
@@ -1630,28 +1630,16 @@ void FetchDriver::SetRequestHeaders(nsIH
           aChannel->SetEmptyRequestHeader(headers[i].mName);
       MOZ_ASSERT(NS_SUCCEEDED(rv));
     } else {
       DebugOnly<nsresult> rv = aChannel->SetRequestHeader(
           headers[i].mName, headers[i].mValue, alreadySet /* merge */);
       MOZ_ASSERT(NS_SUCCEEDED(rv));
     }
   }
-
-  nsAutoCString method;
-  mRequest->GetMethod(method);
-  if (!method.EqualsLiteral("GET") && !method.EqualsLiteral("HEAD")) {
-    nsAutoString origin;
-    if (NS_SUCCEEDED(nsContentUtils::GetUTFOrigin(mPrincipal, origin))) {
-      DebugOnly<nsresult> rv = aChannel->SetRequestHeader(
-          nsDependentCString(net::nsHttp::Origin),
-          NS_ConvertUTF16toUTF8(origin), false /* merge */);
-      MOZ_ASSERT(NS_SUCCEEDED(rv));
-    }
-  }
 }
 
 void FetchDriver::RunAbortAlgorithm() {
   MOZ_DIAGNOSTIC_ASSERT(NS_IsMainThread());
 
   if (mObserver) {
 #ifdef DEBUG
     mResponseAvailableCalled = true;
diff --git a/dom/security/ReferrerInfo.cpp b/dom/security/ReferrerInfo.cpp
--- a/dom/security/ReferrerInfo.cpp
+++ b/dom/security/ReferrerInfo.cpp
@@ -48,16 +48,52 @@ NS_IMPL_ISUPPORTS_CI(ReferrerInfo, nsIRe
 #define MAX_REFERRER_SENDING_POLICY 2
 #define MAX_CROSS_ORIGIN_SENDING_POLICY 2
 #define MAX_TRIMMING_POLICY 2
 
 #define MIN_REFERRER_SENDING_POLICY 0
 #define MIN_CROSS_ORIGIN_SENDING_POLICY 0
 #define MIN_TRIMMING_POLICY 0
 
+/*
+ * Default referrer policy to use
+ */
+enum DefaultReferrerPolicy : uint32_t {
+  eDefaultPolicyNoReferrer = 0,
+  eDefaultPolicySameOrgin = 1,
+  eDefaultPolicyStrictWhenXorigin = 2,
+  eDefaultPolicyNoReferrerWhenDownGrade = 3,
+};
+
+static uint32_t GetDefaultFirstPartyReferrerPolicyPref(bool privateBrowsing) {
+  return privateBrowsing
+             ? StaticPrefs::network_http_referer_defaultPolicy_pbmode()
+             : StaticPrefs::network_http_referer_defaultPolicy();
+}
+
+static uint32_t GetDefaultThirdPartyReferrerPolicyPref(bool privateBrowsing) {
+  return privateBrowsing
+             ? StaticPrefs::network_http_referer_defaultPolicy_trackers_pbmode()
+             : StaticPrefs::network_http_referer_defaultPolicy_trackers();
+}
+
+static ReferrerPolicy DefaultReferrerPolicyToReferrerPolicy(
+    uint32_t defaultToUse) {
+  switch (defaultToUse) {
+    case DefaultReferrerPolicy::eDefaultPolicyNoReferrer:
+      return ReferrerPolicy::No_referrer;
+    case DefaultReferrerPolicy::eDefaultPolicySameOrgin:
+      return ReferrerPolicy::Same_origin;
+    case DefaultReferrerPolicy::eDefaultPolicyStrictWhenXorigin:
+      return ReferrerPolicy::Strict_origin_when_cross_origin;
+  }
+
+  return ReferrerPolicy::No_referrer_when_downgrade;
+}
+
 struct LegacyReferrerPolicyTokenMap {
   const char* mToken;
   ReferrerPolicy mPolicy;
 };
 
 /*
  * Parse ReferrerPolicy from token.
  * The supported tokens are defined in ReferrerPolicy.webidl.
@@ -216,42 +252,20 @@ ReferrerPolicy ReferrerInfo::GetDefaultR
               static_cast<uint32_t>(
                   nsIWebProgressListener::STATE_COOKIES_PARTITIONED_FOREIGN);
       // Here we intentionally do not notify about the rejection reason, if any
       // in order to avoid this check to have any visible side-effects (e.g. a
       // web console report.)
     }
   }
 
-  uint32_t defaultToUse;
-  if (thirdPartyTrackerIsolated) {
-    if (privateBrowsing) {
-      defaultToUse =
-          StaticPrefs::network_http_referer_defaultPolicy_trackers_pbmode();
-    } else {
-      defaultToUse = StaticPrefs::network_http_referer_defaultPolicy_trackers();
-    }
-  } else {
-    if (privateBrowsing) {
-      defaultToUse = StaticPrefs::network_http_referer_defaultPolicy_pbmode();
-    } else {
-      defaultToUse = StaticPrefs::network_http_referer_defaultPolicy();
-    }
-  }
-
-  switch (defaultToUse) {
-    case DefaultReferrerPolicy::eDefaultPolicyNoReferrer:
-      return ReferrerPolicy::No_referrer;
-    case DefaultReferrerPolicy::eDefaultPolicySameOrgin:
-      return ReferrerPolicy::Same_origin;
-    case DefaultReferrerPolicy::eDefaultPolicyStrictWhenXorigin:
-      return ReferrerPolicy::Strict_origin_when_cross_origin;
-  }
-
-  return ReferrerPolicy::No_referrer_when_downgrade;
+  return DefaultReferrerPolicyToReferrerPolicy(
+      thirdPartyTrackerIsolated
+          ? GetDefaultThirdPartyReferrerPolicyPref(privateBrowsing)
+          : GetDefaultFirstPartyReferrerPolicyPref(privateBrowsing));
 }
 
 /* static */
 bool ReferrerInfo::IsReferrerSchemeAllowed(nsIURI* aReferrer) {
   NS_ENSURE_TRUE(aReferrer, false);
 
   nsAutoCString scheme;
   nsresult rv = aReferrer->GetScheme(scheme);
@@ -405,32 +419,16 @@ nsresult ReferrerInfo::HandleUserXOrigin
 }
 
 /* static */
 bool ReferrerInfo::ShouldSetNullOriginHeader(net::HttpBaseChannel* aChannel,
                                              nsIURI* aOriginURI) {
   MOZ_ASSERT(aChannel);
   MOZ_ASSERT(aOriginURI);
 
-  if (StaticPrefs::network_http_referer_hideOnionSource()) {
-    nsAutoCString host;
-    if (NS_SUCCEEDED(aOriginURI->GetAsciiHost(host)) &&
-        StringEndsWith(host, ".onion"_ns)) {
-      return ReferrerInfo::IsCrossOriginRequest(aChannel);
-    }
-  }
-
-  // When we're dealing with CORS (mode is "cors"), we shouldn't take the
-  // Referrer-Policy into account
-  uint32_t corsMode = CORS_NONE;
-  NS_ENSURE_SUCCESS(aChannel->GetCorsMode(&corsMode), false);
-  if (corsMode == CORS_USE_CREDENTIALS) {
-    return false;
-  }
-
   nsCOMPtr<nsIReferrerInfo> referrerInfo;
   NS_ENSURE_SUCCESS(aChannel->GetReferrerInfo(getter_AddRefs(referrerInfo)),
                     false);
   if (!referrerInfo) {
     return false;
   }
   enum ReferrerPolicy policy = referrerInfo->ReferrerPolicy();
   if (policy == ReferrerPolicy::No_referrer) {
diff --git a/dom/security/ReferrerInfo.h b/dom/security/ReferrerInfo.h
--- a/dom/security/ReferrerInfo.h
+++ b/dom/security/ReferrerInfo.h
@@ -221,17 +221,26 @@ class ReferrerInfo : public nsIReferrerI
    * network.http.referer.defaultPolicy.trackers for third-party trackers
    * in regular mode
    * network.http.referer.defaultPolicy.pbmode for private mode
    * network.http.referer.defaultPolicy.trackers.pbmode for third-party trackers
    * in private mode
    */
   static ReferrerPolicyEnum GetDefaultReferrerPolicy(
       nsIHttpChannel* aChannel = nullptr, nsIURI* aURI = nullptr,
-      bool privateBrowsing = false);
+      bool aPrivateBrowsing = false);
+
+  /**
+   * Return default referrer policy for third party which is controlled by user
+   * prefs:
+   * network.http.referer.defaultPolicy.trackers for regular mode
+   * network.http.referer.defaultPolicy.trackers.pbmode for private mode
+   */
+  static ReferrerPolicyEnum GetDefaultThirdPartyReferrerPolicy(
+      bool aPrivateBrowsing = false);
 
   /*
    * Helper function to parse ReferrerPolicy from meta tag referrer content.
    * For example: <meta name="referrer" content="origin">
    *
    * @param aContent content string to be transformed into ReferrerPolicyEnum,
    *                 e.g. "origin".
    */
@@ -278,26 +287,16 @@ class ReferrerInfo : public nsIReferrerI
   NS_DECL_NSISERIALIZABLE
 
  private:
   virtual ~ReferrerInfo() = default;
 
   ReferrerInfo(const ReferrerInfo& rhs);
 
   /*
-   * Default referrer policy to use
-   */
-  enum DefaultReferrerPolicy : uint32_t {
-    eDefaultPolicyNoReferrer = 0,
-    eDefaultPolicySameOrgin = 1,
-    eDefaultPolicyStrictWhenXorigin = 2,
-    eDefaultPolicyNoReferrerWhenDownGrade = 3,
-  };
-
-  /*
    * Trimming policy when compute referrer, indicate how much information in the
    * referrer will be sent. Order matters here.
    */
   enum TrimmingPolicy : uint32_t {
     ePolicyFullURI = 0,
     ePolicySchemeHostPortPath = 1,
     ePolicySchemeHostPort = 2,
   };
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -10103,16 +10103,23 @@
 
 # Include an origin header on non-GET and non-HEAD requests regardless of CORS.
 # 0=never send, 1=send when same-origin only, 2=always send.
 - name: network.http.sendOriginHeader
   type: uint32_t
   value: 2
   mirror: always
 
+# Whether to respect the redirected-tainted origin flag
+# https://fetch.spec.whatwg.org/#concept-request-tainted-origin
+- name: network.http.origin.redirectTainted
+  type: bool
+  value: true
+  mirror: always
+
 # Prefs allowing granular control of referers.
 # 0=don't send any, 1=send only on clicks, 2=send on image requests as well
 - name: network.http.sendRefererHeader
   type: uint32_t
   value: 2
   mirror: always
   do_not_use_directly: true
 
diff --git a/netwerk/protocol/http/HttpBaseChannel.cpp b/netwerk/protocol/http/HttpBaseChannel.cpp
--- a/netwerk/protocol/http/HttpBaseChannel.cpp
+++ b/netwerk/protocol/http/HttpBaseChannel.cpp
@@ -4714,16 +4714,19 @@ nsresult HttpBaseChannel::SetupReplaceme
     // Such as nsHttpChannel and InterceptedChannel.
     // Even thought InterceptedChannel itself doesn't require these information,
     // it may still be necessary for the following redirections.
     // E.g. nsHttpChannel -> InterceptedChannel -> nsHttpChannel
     RefPtr<HttpBaseChannel> realChannel;
     CallQueryInterface(newChannel, realChannel.StartAssignment());
     if (realChannel) {
       realChannel->SetTopWindowURI(mTopWindowURI);
+
+      realChannel->StoreTaintedOriginFlag(
+          ShouldTaintReplacementChannelOrigin(newURI));
     }
 
     // update the DocumentURI indicator since we are being redirected.
     // if this was a top-level document channel, then the new channel
     // should have its mDocumentURI point to newURI; otherwise, we
     // just need to pass along our mDocumentURI to the new channel.
     if (newURI && (mURI == mDocumentURI)) {
       rv = httpInternal->SetDocumentURI(newURI);
@@ -4792,16 +4795,48 @@ nsresult HttpBaseChannel::SetupReplaceme
     MOZ_ASSERT(NS_SUCCEEDED(rv));
   }
 
   // This channel has been redirected. Don't report timing info.
   StoreTimingEnabled(false);
   return NS_OK;
 }
 
+bool HttpBaseChannel::ShouldTaintReplacementChannelOrigin(nsIURI* aNewURI) {
+  if (LoadTaintedOriginFlag()) {
+    return true;
+  }
+
+  nsIScriptSecurityManager* ssm = nsContentUtils::GetSecurityManager();
+  if (!ssm) {
+    return true;
+  }
+  nsresult rv = ssm->CheckSameOriginURI(aNewURI, mURI, false, false);
+  if (NS_SUCCEEDED(rv)) {
+    return false;
+  }
+  // If aNewURI <-> mURI are not same-origin we need to taint unless
+  // mURI <-> mOriginalURI/LoadingPrincipal are same origin.
+
+  if (mLoadInfo->GetLoadingPrincipal()) {
+    bool sameOrigin = false;
+    rv = mLoadInfo->GetLoadingPrincipal()->IsSameOrigin(mURI, &sameOrigin);
+    if (NS_FAILED(rv)) {
+      return true;
+    }
+    return !sameOrigin;
+  }
+  if (!mOriginalURI) {
+    return true;
+  }
+
+  rv = ssm->CheckSameOriginURI(mOriginalURI, mURI, false, false);
+  return NS_FAILED(rv);
+}
+
 // Redirect Tracking
 bool HttpBaseChannel::SameOriginWithOriginalUri(nsIURI* aURI) {
   nsIScriptSecurityManager* ssm = nsContentUtils::GetSecurityManager();
   bool isPrivateWin = mLoadInfo->GetOriginAttributes().mPrivateBrowsingId > 0;
   nsresult rv =
       ssm->CheckSameOriginURI(aURI, mOriginalURI, false, isPrivateWin);
   return (NS_SUCCEEDED(rv));
 }
diff --git a/netwerk/protocol/http/HttpBaseChannel.h b/netwerk/protocol/http/HttpBaseChannel.h
--- a/netwerk/protocol/http/HttpBaseChannel.h
+++ b/netwerk/protocol/http/HttpBaseChannel.h
@@ -527,16 +527,19 @@ class HttpBaseChannel : public nsHashPro
   // Called before we create the redirect target channel.
   already_AddRefed<nsILoadInfo> CloneLoadInfoForRedirect(
       nsIURI* aNewURI, uint32_t aRedirectFlags);
 
   // True if we've already applied content conversion to the data
   // passed to mListener.
   bool HasAppliedConversion() { return LoadHasAppliedConversion(); }
 
+  // https://fetch.spec.whatwg.org/#concept-request-tainted-origin
+  bool HasRedirectTaintedOrigin() { return LoadTaintedOriginFlag(); }
+
  protected:
   nsresult GetTopWindowURI(nsIURI* aURIBeingLoaded, nsIURI** aTopWindowURI);
 
   // Handle notifying listener, removing from loadgroup if request failed.
   void DoNotifyListener();
   virtual void DoNotifyListenerCleanup() = 0;
 
   // drop reference to listener, its callbacks, and the progress sink
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -8754,69 +8754,161 @@ nsresult nsHttpChannel::CallOrWaitForRes
     MOZ_ASSERT(!mCallOnResume);
     mCallOnResume = aFunc;
     return NS_OK;
   }
 
   return aFunc(this);
 }
 
-// Step 10 of HTTP-network-or-cache fetch
+// This is loosely based on:
+// https://fetch.spec.whatwg.org/#serializing-a-request-origin
+static bool HasNullRequestOrigin(nsHttpChannel* aChannel, nsIURI* aURI,
+                                 bool isAddonRequest) {
+  // Step 1. If request has a redirect-tainted origin, then return "null".
+  if (aChannel->HasRedirectTaintedOrigin()) {
+    if (StaticPrefs::network_http_origin_redirectTainted()) {
+      return true;
+    }
+  }
+
+  // Non-standard: Only allow HTTP and HTTPS origins.
+  if (!ReferrerInfo::IsReferrerSchemeAllowed(aURI)) {
+    // And moz-extension: for add-on initiated requests.
+    if (!aURI->SchemeIs("moz-extension") || !isAddonRequest) {
+      return true;
+    }
+  }
+
+  // Non-standard: Hide onion URLs.
+  if (StaticPrefs::network_http_referer_hideOnionSource()) {
+    nsAutoCString host;
+    if (NS_SUCCEEDED(aURI->GetAsciiHost(host)) &&
+        StringEndsWith(host, ".onion"_ns)) {
+      return ReferrerInfo::IsCrossOriginRequest(aChannel);
+    }
+  }
+
+  // Step 2. Return request’s origin, serialized.
+  return false;
+}
+
+// Step 8.12. of HTTP-network-or-cache fetch
+//
+// https://fetch.spec.whatwg.org/#append-a-request-origin-header
 void nsHttpChannel::SetOriginHeader() {
-  if (mRequestHead.IsGet() || mRequestHead.IsHead()) {
+  auto* triggeringPrincipal =
+      BasePrincipal::Cast(mLoadInfo->TriggeringPrincipal());
+
+  if (triggeringPrincipal->IsSystemPrincipal()) {
+    // We can't infer an Origin header from the system principal,
+    // this means system requests use whatever Origin header was specified.
     return;
   }
-  nsresult rv;
-
+  bool isAddonRequest = triggeringPrincipal->AddonPolicy() ||
+                        triggeringPrincipal->ContentScriptAddonPolicy();
+
+  // Non-standard: Handle already existing Origin header.
   nsAutoCString existingHeader;
   Unused << mRequestHead.GetHeader(nsHttp::Origin, existingHeader);
   if (!existingHeader.IsEmpty()) {
     LOG(("nsHttpChannel::SetOriginHeader Origin header already present"));
-    nsCOMPtr<nsIURI> uri;
-    rv = NS_NewURI(getter_AddRefs(uri), existingHeader);
-    if (NS_SUCCEEDED(rv) &&
-        ReferrerInfo::ShouldSetNullOriginHeader(this, uri)) {
+    auto const shouldNullifyOriginHeader =
+        [&existingHeader, isAddonRequest](nsHttpChannel* aChannel) {
+          nsCOMPtr<nsIURI> uri;
+          nsresult rv = NS_NewURI(getter_AddRefs(uri), existingHeader);
+          if (NS_FAILED(rv)) {
+            return false;
+          }
+
+          if (HasNullRequestOrigin(aChannel, uri, isAddonRequest)) {
+            return true;
+          }
+
+          nsCOMPtr<nsILoadInfo> info = aChannel->LoadInfo();
+          if (info->GetTainting() == mozilla::LoadTainting::CORS) {
+            return false;
+          }
+
+          return ReferrerInfo::ShouldSetNullOriginHeader(aChannel, uri);
+        };
+
+    if (!existingHeader.EqualsLiteral("null") &&
+        shouldNullifyOriginHeader(this)) {
       LOG(("nsHttpChannel::SetOriginHeader null Origin by Referrer-Policy"));
-      rv = mRequestHead.SetHeader(nsHttp::Origin, "null"_ns, false /* merge */);
-      MOZ_ASSERT(NS_SUCCEEDED(rv));
+      MOZ_ALWAYS_SUCCEEDS(
+          mRequestHead.SetHeader(nsHttp::Origin, "null"_ns, false /* merge */));
     }
     return;
   }
 
   if (StaticPrefs::network_http_sendOriginHeader() == 0) {
-    // Origin header suppressed by user setting
-    return;
-  }
-
-  nsCOMPtr<nsIURI> referrer;
-  auto* basePrin = BasePrincipal::Cast(mLoadInfo->TriggeringPrincipal());
-  basePrin->GetURI(getter_AddRefs(referrer));
-  if (!referrer || !dom::ReferrerInfo::IsReferrerSchemeAllowed(referrer)) {
+    // Custom user setting: 0 means never send Origin header.
     return;
   }
 
-  nsAutoCString origin("null");
-  nsContentUtils::GetASCIIOrigin(referrer, origin);
-
-  // Restrict Origin to same-origin loads if requested by user
-  if (StaticPrefs::network_http_sendOriginHeader() == 1) {
-    nsAutoCString currentOrigin;
-    nsContentUtils::GetASCIIOrigin(mURI, currentOrigin);
-    if (!origin.EqualsIgnoreCase(currentOrigin.get())) {
-      // Origin header suppressed by user setting
+  // Step 1. Let serializedOrigin be the result of byte-serializing a request
+  // origin with request.
+  nsAutoCString serializedOrigin;
+  nsCOMPtr<nsIURI> uri;
+  {
+    if (NS_FAILED(triggeringPrincipal->GetURI(getter_AddRefs(uri)))) {
       return;
     }
-  }
-
-  if (ReferrerInfo::ShouldSetNullOriginHeader(this, referrer)) {
-    origin.AssignLiteral("null");
-  }
-
-  rv = mRequestHead.SetHeader(nsHttp::Origin, origin, false /* merge */);
-  MOZ_ASSERT(NS_SUCCEEDED(rv));
+
+    if (!uri) {
+      if (isAddonRequest) {
+        // For add-on compatibility prefer sending no header at all
+        // instead of `Origin: null`.
+        return;
+      }
+
+      // Otherwise use "null" when the triggeringPrincipal's URI is nullptr.
+      serializedOrigin.AssignLiteral("null");
+    } else if (HasNullRequestOrigin(this, uri, isAddonRequest)) {
+      serializedOrigin.AssignLiteral("null");
+    } else {
+      nsContentUtils::GetASCIIOrigin(uri, serializedOrigin);
+    }
+  }
+
+  // Step 2. If request’s response tainting is "cors" or request’s mode is
+  // "websocket", then append (`Origin`, serializedOrigin) to request’s header
+  // list.
+  //
+  // Note: We don't handle WebSocket here.
+  if (mLoadInfo->GetTainting() == mozilla::LoadTainting::CORS) {
+    MOZ_ALWAYS_SUCCEEDS(mRequestHead.SetHeader(nsHttp::Origin, serializedOrigin,
+                                               false /* merge */));
+    return;
+  }
+
+  // Step 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
+  if (mRequestHead.IsGet() || mRequestHead.IsHead()) {
+    return;
+  }
+
+  if (!serializedOrigin.EqualsLiteral("null")) {
+    // Step 3.1. Switch on request’s referrer policy:
+    if (ReferrerInfo::ShouldSetNullOriginHeader(this, uri)) {
+      serializedOrigin.AssignLiteral("null");
+    } else if (StaticPrefs::network_http_sendOriginHeader() == 1) {
+      // Restrict Origin to same-origin loads if requested by user
+      nsAutoCString currentOrigin;
+      nsContentUtils::GetASCIIOrigin(mURI, currentOrigin);
+      if (!serializedOrigin.EqualsIgnoreCase(currentOrigin.get())) {
+        // Origin header suppressed by user setting.
+        serializedOrigin.AssignLiteral("null");
+      }
+    }
+  }
+
+  // Step 3.2. Append (`Origin`, serializedOrigin) to request’s header list.
+  MOZ_ALWAYS_SUCCEEDS(mRequestHead.SetHeader(nsHttp::Origin, serializedOrigin,
+                                             false /* merge */));
 }
 
 void nsHttpChannel::SetDoNotTrack() {
   /**
    * 'DoNotTrack' header should be added if 'privacy.donottrackheader.enabled'
    * is true or tracking protection is enabled. See bug 1258033.
    */
   nsCOMPtr<nsILoadContext> loadContext;
@@ -9500,17 +9592,18 @@ void nsHttpChannel::ReEvaluateReferrerAf
       ReferrerInfo* referrerInfo =
           static_cast<ReferrerInfo*>(mReferrerInfo.get());
 
       if (referrerInfo->IsPolicyOverrided() &&
           referrerInfo->ReferrerPolicy() ==
               ReferrerInfo::GetDefaultReferrerPolicy(nullptr, nullptr,
                                                      isPrivate)) {
         nsCOMPtr<nsIReferrerInfo> newReferrerInfo =
-            referrerInfo->CloneWithNewPolicy(ReferrerPolicy::_empty);
+            referrerInfo->CloneWithNewPolicy(
+                ReferrerInfo::GetDefaultReferrerPolicy(this, mURI, isPrivate));
         // The arguments passed to SetReferrerInfoInternal here should mirror
         // the arguments passed in
         // HttpChannelChild::RecvOverrideReferrerInfoDuringBeginConnect().
         SetReferrerInfoInternal(newReferrerInfo, false, true, true);
 
         nsCOMPtr<nsIParentChannel> parentChannel;
         NS_QueryNotificationCallbacks(this, parentChannel);
         RefPtr<HttpChannelParent> httpParent = do_QueryObject(parentChannel);
diff --git a/netwerk/test/mochitests/mochitest.ini b/netwerk/test/mochitests/mochitest.ini
--- a/netwerk/test/mochitests/mochitest.ini
+++ b/netwerk/test/mochitests/mochitest.ini
@@ -11,16 +11,17 @@ support-files =
   file_1331680.js
   file_1503201.sjs
   file_iframe_allow_scripts.html
   file_iframe_allow_same_origin.html
   redirect_idn.html^headers^
   redirect_idn.html
   empty.html
   redirect.sjs
+  redirect_to.sjs
   origin_header.sjs
   origin_header_form_post.html
   origin_header_form_post_xorigin.html
   subResources.sjs
   beltzner.jpg
   beltzner.jpg^headers^
   file_chromecommon.js
   file_domain_hierarchy_inner.html
diff --git a/netwerk/test/mochitests/redirect_to.sjs b/netwerk/test/mochitests/redirect_to.sjs
new file mode 100644
--- /dev/null
+++ b/netwerk/test/mochitests/redirect_to.sjs
@@ -0,0 +1,4 @@
+function handleRequest(request, response) {
+  response.setStatusLine(request.httpVersion, 308, "Permanent Redirect");
+  response.setHeader("Location", request.queryString);
+}
diff --git a/netwerk/test/mochitests/test_origin_header.html b/netwerk/test/mochitests/test_origin_header.html
--- a/netwerk/test/mochitests/test_origin_header.html
+++ b/netwerk/test/mochitests/test_origin_header.html
@@ -27,85 +27,100 @@ let testsToRun = [
             framePostXOrigin: EMPTY_ORIGIN,
             frameGet: EMPTY_ORIGIN,
             framePostNonSandboxed: EMPTY_ORIGIN,
             framePostNonSandboxedXOrigin: EMPTY_ORIGIN,
             framePostSandboxed: EMPTY_ORIGIN,
             framePostSrcDoc: EMPTY_ORIGIN,
             framePostSrcDocXOrigin: EMPTY_ORIGIN,
             framePostDataURI: EMPTY_ORIGIN,
+            framePostSameOriginToXOrigin: EMPTY_ORIGIN,
+            framePostXOriginToSameOrigin: EMPTY_ORIGIN,
+            framePostXOriginToXOrigin: EMPTY_ORIGIN,
         },
     },
     {
         name: "sendOriginHeader=1 (same-origin)",
         prefs: [
             ["network.http.sendOriginHeader", 1],
         ],
         results: {
             framePost: "Origin: http://mochi.test:8888",
-            framePostXOrigin: EMPTY_ORIGIN,
+            framePostXOrigin: "Origin: null",
             frameGet: EMPTY_ORIGIN,
             framePostNonSandboxed: "Origin: http://mochi.test:8888",
-            framePostNonSandboxedXOrigin: EMPTY_ORIGIN,
-            framePostSandboxed: EMPTY_ORIGIN,
+            framePostNonSandboxedXOrigin: "Origin: null",
+            framePostSandboxed: "Origin: null",
             framePostSrcDoc: "Origin: http://mochi.test:8888",
-            framePostSrcDocXOrigin: EMPTY_ORIGIN,
-            framePostDataURI: EMPTY_ORIGIN,
+            framePostSrcDocXOrigin: "Origin: null",
+            framePostDataURI: "Origin: null",
+            framePostSameOriginToXOrigin: "Origin: null",
+            framePostXOriginToSameOrigin: "Origin: null",
+            framePostXOriginToXOrigin: "Origin: null",
         },
     },
     {
         name: "sendOriginHeader=2 (always)",
         prefs: [
             ["network.http.sendOriginHeader", 2],
         ],
         results: {
             framePost: "Origin: http://mochi.test:8888",
             framePostXOrigin: "Origin: http://mochi.test:8888",
             frameGet: EMPTY_ORIGIN,
             framePostNonSandboxed: "Origin: http://mochi.test:8888",
             framePostNonSandboxedXOrigin: "Origin: http://mochi.test:8888",
-            framePostSandboxed: EMPTY_ORIGIN,
+            framePostSandboxed: "Origin: null",
             framePostSrcDoc: "Origin: http://mochi.test:8888",
             framePostSrcDocXOrigin: "Origin: http://mochi.test:8888",
-            framePostDataURI: EMPTY_ORIGIN,
+            framePostDataURI: "Origin: null",
+            framePostSameOriginToXOrigin: "Origin: http://mochi.test:8888",
+            framePostXOriginToSameOrigin: "Origin: null",
+            framePostXOriginToXOrigin: "Origin: http://mochi.test:8888",
         },
     },
     {
         name: "sendRefererHeader=0 (never)",
         prefs: [
             ["network.http.sendRefererHeader", 0],
         ],
         results: {
             framePost: "Origin: http://mochi.test:8888",
             framePostXOrigin: "Origin: http://mochi.test:8888",
             frameGet: EMPTY_ORIGIN,
             framePostNonSandboxed: "Origin: http://mochi.test:8888",
             framePostNonSandboxedXOrigin: "Origin: http://mochi.test:8888",
-            framePostSandboxed: EMPTY_ORIGIN,
+            framePostSandboxed: "Origin: null",
             framePostSrcDoc: "Origin: http://mochi.test:8888",
             framePostSrcDocXOrigin: "Origin: http://mochi.test:8888",
-            framePostDataURI: EMPTY_ORIGIN,
+            framePostDataURI: "Origin: null",
+            framePostSameOriginToXOrigin: "Origin: http://mochi.test:8888",
+            framePostXOriginToSameOrigin: "Origin: null",
+            framePostXOriginToXOrigin: "Origin: http://mochi.test:8888",
         },
     },
     {
         name: "userControlPolicy=0 (no-referrer)",
         prefs: [
             ["network.http.sendRefererHeader", 2],
             ["network.http.referer.defaultPolicy", 0],
         ],
         results: {
             framePost: "Origin: null",
             framePostXOrigin: "Origin: null",
             frameGet: EMPTY_ORIGIN,
             framePostNonSandboxed: "Origin: null",
             framePostNonSandboxedXOrigin: "Origin: null",
-            framePostSandboxed: EMPTY_ORIGIN,
+            framePostSandboxed: "Origin: null",
             framePostSrcDoc: "Origin: null",
             framePostSrcDocXOrigin: "Origin: null",
-            framePostDataURI: EMPTY_ORIGIN,
+            framePostDataURI: "Origin: null",
+            framePostSameOriginToXOrigin: "Origin: null",
+            framePostXOriginToSameOrigin: "Origin: null",
+            framePostXOriginToXOrigin: "Origin: null",
         },
     },
 ];
 
 let checksToRun = [
     {
         name: "POST",
         frameID: "framePost",
@@ -146,16 +161,31 @@ let checksToRun = [
         frameID: "framePostSrcDocXOrigin",
         srcdoc: "origin_header_form_post_xorigin.html",
     },
     {
         name: "POST inside a data: iframe",
         frameID: "framePostDataURI",
         dataURI: "origin_header_form_post.html",
     },
+    {
+        name: "same-origin POST redirected to cross-origin",
+        frameID: "framePostSameOriginToXOrigin",
+        formID: "formPostSameOriginToXOrigin",
+    },
+    {
+        name: "cross-origin POST redirected to same-origin",
+        frameID: "framePostXOriginToSameOrigin",
+        formID: "formPostXOriginToSameOrigin",
+    },
+    {
+        name: "cross-origin POST redirected to cross-origin",
+        frameID: "framePostXOriginToXOrigin",
+        formID: "formPostXOriginToXOrigin",
+    },
 ];
 
 function frameLoaded(test, check)
 {
     let frame = window.document.getElementById(check.frameID);
     frame.onload = null;
     let result = SpecialPowers.wrap(frame).contentDocument.documentElement.textContent;
     is(result, test.results[check.frameID], check.name + " with " + test.name);
@@ -301,16 +331,43 @@ addLoadEvent(runTests);
         <iframe src="about:blank" name="frameGet" id="frameGet"></iframe>
         <form action="origin_header.sjs"
               method="GET"
               id="formGet"
               target="frameGet">
             <input type="submit" value="Submit GET">
         </form>
     </td>
+    <td>
+        <iframe src="about:blank" name="framePostSameOriginToXOrigin" id="framePostSameOriginToXOrigin"></iframe>
+        <form action="redirect_to.sjs?http://test1.mochi.test:8888/tests/netwerk/test/mochitests/origin_header.sjs"
+              method="POST"
+              id="formPostSameOriginToXOrigin"
+              target="framePostSameOriginToXOrigin">
+            <input type="Submit" value="Submit SameOrigin POST redirected to XOrigin">
+        </form>
+    </td>
+    <td>
+        <iframe src="about:blank" name="framePostXOriginToSameOrigin" id="framePostXOriginToSameOrigin"></iframe>
+        <form action="http://test1.mochi.test:8888/tests/netwerk/test/mochitests/redirect_to.sjs?http://mochi.test:8888/tests/netwerk/test/mochitests/origin_header.sjs"
+              method="POST"
+              id="formPostXOriginToSameOrigin"
+              target="framePostXOriginToSameOrigin">
+            <input type="Submit" value="Submit XOrigin POST redirected to SameOrigin">
+        </form>
+    </td>
+    <td>
+        <iframe src="about:blank" name="framePostXOriginToXOrigin" id="framePostXOriginToXOrigin"></iframe>
+        <form action="http://test1.mochi.test:8888/tests/netwerk/test/mochitests/redirect_to.sjs?/tests/netwerk/test/mochitests/origin_header.sjs"
+              method="POST"
+              id="formPostXOriginToXOrigin"
+              target="framePostXOriginToXOrigin">
+            <input type="Submit" value="Submit XOrigin POST redirected to XOrigin">
+        </form>
+    </td>
 </tr>
 <tr>
     <td>
         <iframe src="about:blank" id="framePostNonSandboxed"></iframe>
         <div>Non-sandboxed iframe</div>
     </td>
     <td>
         <iframe src="about:blank" id="framePostNonSandboxedXOrigin"></iframe>
diff --git a/testing/web-platform/meta/fetch/origin/assorted.window.js.ini b/testing/web-platform/meta/fetch/origin/assorted.window.js.ini
deleted file mode 100644
--- a/testing/web-platform/meta/fetch/origin/assorted.window.js.ini
+++ /dev/null
@@ -1,10 +0,0 @@
-[assorted.window.html]
-  [Origin header and 308 redirect]
-    expected: FAIL
-
-  [Origin header and POST navigation]
-    expected: FAIL
-
-  [Origin header and POST same-origin fetch cors mode with Referrer-Policy no-referrer]
-    expected: FAIL
-
diff --git a/testing/web-platform/meta/service-workers/service-worker/navigation-headers.https.html.ini b/testing/web-platform/meta/service-workers/service-worker/navigation-headers.https.html.ini
--- a/testing/web-platform/meta/service-workers/service-worker/navigation-headers.https.html.ini
+++ b/testing/web-platform/meta/service-workers/service-worker/navigation-headers.https.html.ini
@@ -28,43 +28,25 @@
   [POST Navigation, cross-site with passthrough service worker sets correct sec-fetch headers.]
     expected: FAIL
 
   [GET Navigation, cross-site with navpreload service worker sets correct sec-fetch headers.]
     expected:
       if fission and (os == "linux") and not debug: [FAIL, NOTRUN]
       FAIL
 
-  [POST Navigation, same-origin with same-site redirect and no service worker sets correct origin and referer headers.]
-    expected: FAIL
-
   [POST Navigation, same-origin with same-site redirect and passthrough service worker sets correct origin and referer headers.]
     expected: FAIL
 
-  [POST Navigation, same-origin with same-site redirect and fallback service worker sets correct origin and referer headers.]
-    expected: FAIL
-
-  [POST Navigation, same-origin with cross-site redirect and no service worker sets correct origin and referer headers.]
-    expected: FAIL
-
   [POST Navigation, same-origin with cross-site redirect and passthrough service worker sets correct origin and referer headers.]
     expected: FAIL
 
-  [POST Navigation, same-origin with cross-site redirect and fallback service worker sets correct origin and referer headers.]
-    expected: FAIL
-
-  [POST Navigation, same-origin with cross-site redirect, same-origin redirect, and no service worker sets correct origin and referer headers.]
-    expected: FAIL
-
   [POST Navigation, same-origin with cross-site redirect, same-origin redirect, and passthrough service worker sets correct origin and referer headers.]
     expected: FAIL
 
-  [POST Navigation, same-origin with cross-site redirect, same-origin redirect, and fallback service worker sets correct origin and referer headers.]
-    expected: FAIL
-
   [GET Navigation, same-origin with same-site redirect and passthrough service worker sets correct sec-fetch headers.]
     expected:
       if fission and (os == "linux") and not debug: [FAIL, NOTRUN]
       FAIL
 
   [GET Navigation, same-origin with same-site redirect and navpreload service worker sets correct sec-fetch headers.]
     expected:
       if fission and (os == "linux") and not debug: [FAIL, NOTRUN]
