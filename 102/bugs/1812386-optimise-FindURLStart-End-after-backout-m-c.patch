# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1676972571 -3600
# Parent  3275166e1a8a15edadfb8a51b5dec6d47fbb5f8e
Bug 1812386 - Optimisation as per profiler showing a lot of time spent in FindURLStart/End in nsTSubstring.

Also limit result to 1000 URLs and match look-ahead to 2000 characters.

diff --git a/netwerk/streamconv/converters/mozTXTToHTMLConv.cpp b/netwerk/streamconv/converters/mozTXTToHTMLConv.cpp
--- a/netwerk/streamconv/converters/mozTXTToHTMLConv.cpp
+++ b/netwerk/streamconv/converters/mozTXTToHTMLConv.cpp
@@ -175,20 +175,28 @@ bool mozTXTToHTMLConv::FindURLStart(cons
     case RFC1738: {
       if (!NS_strncmp(&aInString[std::max(int32_t(pos - 4), 0)], u"<URL:", 5)) {
         start = pos + 1;
         return true;
       }
       return false;
     }
     case RFC2396E: {
-      nsString temp(aInString, aInLength);
-      int32_t i = pos <= 0 ? kNotFound : temp.RFindCharInSet(u"<>\"", pos - 1);
+      // This is very expensive, so hand roll it.
+      // nsString temp(aInString, aInLength);
+      // int32_t i = pos <= 0 ? kNotFound : temp.RFindCharInSet(u"<>\"", pos - 1);
+      int32_t i = kNotFound;
+      for (int32_t j = aInLength - 1; j >= int32_t(pos) - 1 && j >= 0; j--) {
+        if (aInString[j] == '<' || aInString[j] == '>' || aInString[j] == '"') {
+          i = j;
+          break;
+        }
+      }
       if (i != kNotFound &&
-          (temp[uint32_t(i)] == '<' || temp[uint32_t(i)] == '"')) {
+          (aInString[uint32_t(i)] == '<' || aInString[uint32_t(i)] == '"')) {
         start = uint32_t(++i);
         return start < pos;
       }
       return false;
     }
     case freetext: {
       int32_t i = pos - 1;
       for (; i >= 0 &&
@@ -239,22 +247,29 @@ bool mozTXTToHTMLConv::FindURLStart(cons
 
 bool mozTXTToHTMLConv::FindURLEnd(const char16_t* aInString,
                                   int32_t aInStringLength, const uint32_t pos,
                                   const modetype check, const uint32_t start,
                                   uint32_t& end) {
   switch (check) {  // no breaks, because end of blocks is never reached
     case RFC1738:
     case RFC2396E: {
-      nsString temp(aInString, aInStringLength);
-
-      int32_t i = temp.FindCharInSet(u"<>\"", pos + 1);
+      // This is very expensive, so hand roll it.
+      // nsString temp(aInString, aInStringLength);
+      // int32_t i = temp.FindCharInSet(u"<>\"", pos + 1);
+      int32_t i = kNotFound;
+      for (int32_t j = pos + 1; j < aInStringLength; j++) {
+        if (aInString[j] == '<' || aInString[j] == '>' || aInString[j] == '"') {
+          i = j;
+          break;
+        }
+      }
       if (i != kNotFound &&
-          temp[uint32_t(i--)] ==
-              (check == RFC1738 || temp[start - 1] == '<' ? '>' : '"')) {
+          aInString[uint32_t(i--)] ==
+              (check == RFC1738 || aInString[start - 1] == '<' ? '>' : '"')) {
         end = uint32_t(i);
         return end > pos;
       }
       return false;
     }
     case freetext:
     case abbreviated: {
       uint32_t i = pos + 1;
@@ -571,17 +586,17 @@ bool mozTXTToHTMLConv::ItMatchesDelimite
 }
 
 uint32_t mozTXTToHTMLConv::NumberOfMatches(const char16_t* aInString,
                                            int32_t aInStringLength,
                                            const char16_t* rep, int32_t aRepLen,
                                            LIMTYPE before, LIMTYPE after) {
   uint32_t result = 0;
 
-  for (int32_t i = 0; i < aInStringLength; i++) {
+  for (int32_t i = 0; i < std::min(aInStringLength, 2000); i++) {
     const char16_t* indexIntoString = &aInString[i];
     if (ItMatchesDelimited(indexIntoString, aInStringLength - i, rep, aRepLen,
                            before, after))
       result++;
   }
   return result;
 }
 
@@ -944,16 +959,17 @@ mozTXTToHTMLConv::ScanTXT(const nsAStrin
   }
 
   if (!aOutString.SetCapacity(uint32_t(aInString.Length() * growthRate),
                               mozilla::fallible)) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
 
   bool doURLs = 0 != (whattodo & kURLs);
+  uint32_t countURLs = 0;  // Doing URLs is expensive.
   bool doGlyphSubstitution = 0 != (whattodo & kGlyphSubstitution);
   bool doStructPhrase = 0 != (whattodo & kStructPhrase);
 
   uint32_t structPhrase_strong = 0;  // Number of currently open tags
   uint32_t structPhrase_underline = 0;
   uint32_t structPhrase_italic = 0;
   uint32_t structPhrase_code = 0;
 
@@ -1041,16 +1057,18 @@ mozTXTToHTMLConv::ScanTXT(const nsAStrin
               if (aOutString.Length() - replaceBefore < endOfLastURLOutput) {
                 break;
               }
               aOutString.Cut(aOutString.Length() - replaceBefore,
                              replaceBefore);
               aOutString += outputHTML;
               endOfLastURLOutput = aOutString.Length();
               i += replaceAfter + 1;
+              countURLs++;
+              if (countURLs > 1000) doURLs = false;
               continue;
             }
           }
           break;
       }  // switch
     }
 
     switch (aInString[i]) {
