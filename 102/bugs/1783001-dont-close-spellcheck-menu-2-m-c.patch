# vim: se ft=diff :
# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1661616729 -7200
# Parent  702c85fb350a4a0975757ef596a42ef0b1c347a3
Bug 1783001 - Fix closure issue and another issue when menu doesn't close.

diff --git a/toolkit/modules/InlineSpellChecker.jsm b/toolkit/modules/InlineSpellChecker.jsm
--- a/toolkit/modules/InlineSpellChecker.jsm
+++ b/toolkit/modules/InlineSpellChecker.jsm
@@ -226,66 +226,95 @@ InlineSpellChecker.prototype = {
     for (var i = 0; i < list.length; i++) {
       sortedList.push({ localeCode: list[i], displayName: names[i] });
     }
     let comparer = new Services.intl.Collator().compare;
     sortedList.sort((a, b) => comparer(a.displayName, b.displayName));
     return sortedList;
   },
 
+  async languageMenuListener(evt) {
+    let curlangs = new Set();
+    if (this.mRemote) {
+      curlangs = new Set(this.mRemote.currentDictionaries);
+      // console.log("=== remote", curlangs);
+    } else if (this.mInlineSpellChecker) {
+      let spellchecker = this.mInlineSpellChecker.spellChecker;
+      try {
+        curlangs = new Set(spellchecker.getCurrentDictionaries());
+        // console.log("=== spell", curlangs);
+      } catch (e) {}
+    }
+
+    let localeCodes = new Set(curlangs);
+    let localeCode = evt.target.dataset.localeCode;
+    // console.log("=== locale codes", localeCodes);
+    // console.log("=== locale", localeCode);
+    if (localeCodes.has(localeCode)) {
+      localeCodes.delete(localeCode);
+      // console.log("=== locale delete", localeCode);
+    } else {
+      localeCodes.add(localeCode);
+      // console.log("=== locale add", localeCode);
+    }
+    let dictionaries = Array.from(localeCodes);
+    // console.log("=== result", dictionaries);
+    await this.selectDictionaries(dictionaries);
+    if (this.mRemote) {
+      // Store the new set in case the menu doesn't close.
+      // console.log("=== remote dicts (old)", this.mRemote.currentDictionaries);
+      this.mRemote.currentDictionaries = dictionaries;
+      // console.log("=== remote dicts (new)", this.mRemote.currentDictionaries);
+    }
+    // Notify change of dictionary, especially for Thunderbird,
+    // which is otherwise not notified any more.
+    let view = this.mDictionaryMenu.ownerGlobal;
+    let spellcheckChangeEvent = new view.CustomEvent("spellcheck-changed", {
+      detail: { dictionaries },
+    });
+    this.mDictionaryMenu.ownerDocument.dispatchEvent(spellcheckChangeEvent);
+  },
+
   // returns the number of dictionary languages. If insertBefore is NULL, this
   // does an append to the given menu
   addDictionaryListToMenu(menu, insertBefore) {
     this.mDictionaryMenu = menu;
     this.mDictionaryItems = [];
 
     if (!this.enabled) {
       return 0;
     }
 
-    var list;
-    var curlangs = new Set();
+    let list;
+    let curlangs = new Set();
     if (this.mRemote) {
       list = this.mRemote.dictionaryList;
       curlangs = new Set(this.mRemote.currentDictionaries);
+      // console.log("=== remote init", curlangs);
     } else if (this.mInlineSpellChecker) {
-      var spellchecker = this.mInlineSpellChecker.spellChecker;
+      let spellchecker = this.mInlineSpellChecker.spellChecker;
       list = spellchecker.GetDictionaryList();
       try {
         curlangs = new Set(spellchecker.getCurrentDictionaries());
       } catch (e) {}
+      // console.log("=== spell init", curlangs);
     }
 
-    var sortedList = this.sortDictionaryList(list);
-
+    let sortedList = this.sortDictionaryList(list);
+    // console.log("=== adding list", sortedList);
+    this.languageMenuListenerBind = this.languageMenuListener.bind(this);
     menu.addEventListener(
       "command",
-      async evt => {
-        let localeCodes = new Set(curlangs);
-        let localeCode = evt.target.dataset.localeCode;
-        if (localeCodes.has(localeCode)) {
-          localeCodes.delete(localeCode);
-        } else {
-          localeCodes.add(localeCode);
-        }
-        let dictionaries = Array.from(localeCodes);
-        await this.selectDictionaries(dictionaries);
-        // Notify change of dictionary, especially for Thunderbird,
-        // which is otherwise not notified any more.
-        var view = menu.ownerGlobal;
-        var spellcheckChangeEvent = new view.CustomEvent("spellcheck-changed", {
-          detail: { dictionaries },
-        });
-        menu.ownerDocument.dispatchEvent(spellcheckChangeEvent);
-      },
+      this.languageMenuListenerBind,
       true
     );
 
-    for (var i = 0; i < sortedList.length; i++) {
-      var item = menu.ownerDocument.createXULElement("menuitem");
+    for (let i = 0; i < sortedList.length; i++) {
+      let item = menu.ownerDocument.createXULElement("menuitem");
+
       item.setAttribute(
         "id",
         "spell-check-dictionary-" + sortedList[i].localeCode
       );
       // XXX: Once Fluent has dynamic references, we could also lazily
       //      inject regionNames/languageNames FTL and localize using
       //      `l10n-id` here.
       item.setAttribute("label", sortedList[i].displayName);
@@ -306,16 +335,21 @@ InlineSpellChecker.prototype = {
       }
     }
     return list.length;
   },
 
   // undoes the work of addDictionaryListToMenu for the menu
   // (call on popup hiding)
   clearDictionaryListFromMenu() {
+    this.mDictionaryMenu.removeEventListener(
+      "command",
+      this.languageMenuListenerBind,
+      true
+    );
     for (var i = 0; i < this.mDictionaryItems.length; i++) {
       this.mDictionaryMenu.removeChild(this.mDictionaryItems[i]);
     }
     this.mDictionaryItems = [];
   },
 
   // callback for selecting a dictionary
   async selectDictionaries(localeCodes) {
@@ -544,16 +578,19 @@ RemoteSpellChecker.prototype = {
   },
   get suggestions() {
     return this._spellInfo.spellSuggestions;
   },
 
   get currentDictionaries() {
     return this._spellInfo.currentDictionaries;
   },
+  set currentDictionaries(dicts) {
+    this._spellInfo.currentDictionaries = dicts;
+  },
   get dictionaryList() {
     return this._spellInfo.dictionaryList.slice();
   },
 
   selectDictionaries(localeCodes) {
     this._actor.selectDictionaries({ localeCodes });
   },
 
