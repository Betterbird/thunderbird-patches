# HG changeset patch
# User Gene Smith <gds@chartertn.net>
# Date 1677944237 -3600
# Node ID 8005c8f26289897dc9142d6368b4ded9c3ba884e
# Parent  589e85fedd4e9709fda74b56d35d467c05a76e6f
Bug 1745130 - Fix hang at 100% during failed imap save to sent. r=mkmelin,micahilbery

Changes to:
 mailnews/compose/src/nsMsgCompose.cpp
 mailnews/compose/src/nsMsgCompose.h
Based on https://github.com/Betterbird/thunderbird-patches/blob/main/102/bugs/1745130-close-compose-later.patch

Differential Revision: https://phabricator.services.mozilla.com/D171035

diff --git a/mail/themes/shared/mail/messenger.css b/mail/themes/shared/mail/messenger.css
--- a/mail/themes/shared/mail/messenger.css
+++ b/mail/themes/shared/mail/messenger.css
@@ -1257,24 +1257,36 @@ label.statusbarpanel {
 }
 
 #dialog\.progress:indeterminate::-moz-progress-bar,
 #shutdown_progressmeter:indeterminate::-moz-progress-bar,
 .progressmeter-statusbar:indeterminate::-moz-progress-bar {
   /* Make a white reflecting animation.
      Create a gradient with 2 identical pattern, and enlarge the size to 200%.
      This allows us to animate background-position with percentage. */
-  background-image: linear-gradient(90deg, transparent 0%,
-                                           rgba(255, 255, 255, 0.5) 25%,
-                                           transparent 50%,
-                                           rgba(255, 255, 255, 0.5) 75%,
-                                           transparent 100%);
+  background-image: linear-gradient(90deg, rgba(255, 255, 255, 0.8) 0%,
+                                           rgba(255, 255, 255, 0.2) 25%,
+                                           rgba(255, 255, 255, 0.8) 50%,
+                                           rgba(255, 255, 255, 0.2) 75%,
+                                           rgba(255, 255, 255, 0.8) 100%);
   background-size: 200% 100%;
 }
 
+@media (prefers-color-scheme: dark) {
+  #dialog\.progress:indeterminate::-moz-progress-bar,
+  #shutdown_progressmeter:indeterminate::-moz-progress-bar,
+  .progressmeter-statusbar:indeterminate::-moz-progress-bar {
+    background-image: linear-gradient(90deg, rgba(0,0,0, 0.5) 0%,
+                                             rgba(0,0,0, 0.1) 25%,
+                                             rgba(0,0,0, 0.5) 50%,
+                                             rgba(0,0,0, 0.1) 75%,
+                                             rgba(0,0,0, 0.5) 100%);
+  }
+}
+
 @media (prefers-reduced-motion: no-preference) {
   #dialog\.progress:indeterminate::-moz-progress-bar,
   #shutdown_progressmeter:indeterminate::-moz-progress-bar,
   .progressmeter-statusbar:indeterminate::-moz-progress-bar {
     animation: progressSlideX 1.5s linear infinite;
   }
 
   @keyframes progressSlideX {
diff --git a/mailnews/compose/content/sendProgress.js b/mailnews/compose/content/sendProgress.js
--- a/mailnews/compose/content/sendProgress.js
+++ b/mailnews/compose/content/sendProgress.js
@@ -1,33 +1,40 @@
 /* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 
-// dialog is just an array we'll use to store various properties from the dialog document...
+// dialog is just an array we'll use to store various properties from the dialog
+// document...
 var dialog;
 
 // the msgProgress is a nsIMsgProgress object
 var msgProgress = null;
 
 // random global variables...
 var itsASaveOperation = false;
 var gBundle;
 
 window.addEventListener("DOMContentLoaded", onLoad);
 window.addEventListener("unload", onUnload);
 document.addEventListener("dialogcancel", onCancel);
 
-// all progress notifications are done through the nsIWebProgressListener implementation...
+// all progress notifications are done through the nsIWebProgressListener
+// implementation...
 var progressListener = {
   onStateChange(aWebProgress, aRequest, aStateFlags, aStatus) {
-    // Only need to handle STATE_STOP.
+    if (aStateFlags & Ci.nsIWebProgressListener.STATE_START) {
+      // Set progress meter to show indeterminate.
+      dialog.progress.removeAttribute("value");
+      dialog.progressText.value = "";
+    }
+
     if (aStateFlags & Ci.nsIWebProgressListener.STATE_STOP) {
       // we are done sending/saving the message...
       // Indicate completion in status area.
       var msg;
       if (itsASaveOperation) {
         msg = gBundle.GetStringFromName("messageSaved");
       } else {
         msg = gBundle.GetStringFromName("messageSent");
@@ -36,17 +43,18 @@ var progressListener = {
 
       // Put progress meter at 100%.
       dialog.progress.setAttribute("value", 100);
       dialog.progressText.setAttribute(
         "value",
         gBundle.formatStringFromName("percentMsg", [100])
       );
 
-      window.close();
+      // Allow the user 1 sec to see the final status before closing the window.
+      setTimeout(() => window.close(), 1000);
     }
   },
 
   onProgressChange(
     aWebProgress,
     aRequest,
     aCurSelfProgress,
     aMaxSelfProgress,
@@ -64,17 +72,17 @@ var progressListener = {
       // Advance progress meter.
       dialog.progress.value = percent;
 
       // Update percentage label on progress meter.
       dialog.progressText.value = gBundle.formatStringFromName("percentMsg", [
         percent,
       ]);
     } else {
-      // Progress meter should show no value in this case.
+      // Have progress meter show indeterminate with denominator <= 0.
       dialog.progress.removeAttribute("value");
       dialog.progressText.value = "";
     }
   },
 
   onLocationChange(aWebProgress, aRequest, aLocation, aFlags) {
     // we can ignore this notification
   },
@@ -156,11 +164,12 @@ function onUnload() {
 function onCancel(event) {
   // Cancel app launcher.
   try {
     msgProgress.processCanceledByUser = true;
   } catch (e) {
     return;
   }
 
-  // Don't close up dialog, the backend will close the dialog when everything will be aborted.
+  // Don't close up dialog, the backend will close the dialog when everything
+  // will be aborted.
   event.preventDefault();
 }
diff --git a/mailnews/compose/src/SmtpService.jsm b/mailnews/compose/src/SmtpService.jsm
--- a/mailnews/compose/src/SmtpService.jsm
+++ b/mailnews/compose/src/SmtpService.jsm
@@ -146,30 +146,33 @@ SmtpService.prototype = {
       while (sstream.available()) {
         let chunk = sstream.read(65536);
         let canSendMore = client.send(chunk);
         if (!canSendMore) {
           // Socket buffer is full, wait for the ondrain event.
           await new Promise(resolve => (socketOnDrain = resolve));
         }
         // In practice, chunks are buffered by TCPSocket, progress reaches 100%
-        // almost immediately.
+        // almost immediately unless message is larger than chunk size.
         sentSize += chunk.length;
         progressListener?.onProgressChange(
           null,
           null,
           sentSize,
           totalSize,
           sentSize,
           totalSize
         );
       }
       sstream.close();
       fstream.close();
       client.end();
+
+      // Set progress to indeterminate.
+      progressListener?.onProgressChange(null, null, 0, -1, 0, -1);
     };
     client.ondrain = () => {
       // Socket buffer is empty, safe to continue sending.
       socketOnDrain();
     };
     client.ondone = exitCode => {
       if (!AppConstants.MOZ_SUITE) {
         Services.telemetry.scalarAdd("tb.mails.sent", 1);
diff --git a/mailnews/compose/src/nsMsgCompose.cpp b/mailnews/compose/src/nsMsgCompose.cpp
--- a/mailnews/compose/src/nsMsgCompose.cpp
+++ b/mailnews/compose/src/nsMsgCompose.cpp
@@ -1313,16 +1313,23 @@ bool nsMsgCompose::IsLastWindow() {
       if (NS_SUCCEEDED(windowEnumerator->GetNext(getter_AddRefs(isupports))))
         if (NS_SUCCEEDED(windowEnumerator->HasMoreElements(&more)))
           return !more;
     }
   }
   return true;
 }
 
+// Timer callback for delaying the destruction of the compose window.
+void nsMsgCompose::CloseTimer(nsITimer* timer, void* aMsgCompose) {
+  nsMsgCompose* compose = (nsMsgCompose*)aMsgCompose;
+  nsCOMPtr<nsIBaseWindow> window = compose->m_baseWindow.forget();
+  window->Destroy();
+}
+
 NS_IMETHODIMP nsMsgCompose::CloseWindow(void) {
   nsresult rv;
 
   nsCOMPtr<nsIMsgComposeService> composeService =
       do_GetService(NS_MSGCOMPOSESERVICE_CONTRACTID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // unregister the compose object with the compose service
@@ -1336,18 +1343,24 @@ NS_IMETHODIMP nsMsgCompose::CloseWindow(
 
   // We are going away for real, we need to do some clean up first
   if (m_baseWindow) {
     if (m_editor) {
       // The editor will be destroyed during the close window.
       // Set it to null to be sure we won't use it anymore.
       m_editor = nullptr;
     }
-    nsCOMPtr<nsIBaseWindow> window = m_baseWindow.forget();
-    rv = window->Destroy();
+    // First hide the compose window and then destroy it after a 2 second delay.
+    // This allows any child progress window to show the final status.
+    rv = m_baseWindow->SetVisibility(false);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = NS_NewTimerWithFuncCallback(
+        getter_AddRefs(m_Timer), nsMsgCompose::CloseTimer, (void*)this, 2000,
+        nsITimer::TYPE_ONE_SHOT, "nsMsgCompose::CloseWindow", nullptr);
+    NS_ENSURE_SUCCESS(rv, rv);
   }
 
   m_window = nullptr;
   return rv;
 }
 
 nsresult nsMsgCompose::Abort() {
   if (mMsgSend) mMsgSend->Abort();
diff --git a/mailnews/compose/src/nsMsgCompose.h b/mailnews/compose/src/nsMsgCompose.h
--- a/mailnews/compose/src/nsMsgCompose.h
+++ b/mailnews/compose/src/nsMsgCompose.h
@@ -16,16 +16,17 @@
 #include "nsIMsgCopyServiceListener.h"
 #include "nsIBaseWindow.h"
 #include "nsIAbDirectory.h"
 #include "nsIWebProgressListener.h"
 #include "nsIMimeConverter.h"
 #include "nsIMsgFolder.h"
 #include "mozIDOMWindow.h"
 #include "mozilla/dom/Element.h"
+#include "nsITimer.h"
 
 // Forward declares
 class QuotingOutputStreamListener;
 class nsMsgComposeSendListener;
 class nsIEditor;
 class nsIArray;
 struct nsMsgMailList;
 
@@ -101,16 +102,17 @@ class nsMsgCompose : public nsIMsgCompos
 
   // Helper function. Parameters are not checked.
   bool mConvertStructs;  // for TagConvertible
 
   nsCOMPtr<nsIEditor> m_editor;
   mozIDOMWindowProxy* m_window;
   nsCOMPtr<nsIDocShell> mDocShell;
   nsCOMPtr<nsIBaseWindow> m_baseWindow;
+  nsCOMPtr<nsITimer> m_Timer;
   RefPtr<nsMsgCompFields> m_compFields;
   nsCOMPtr<nsIMsgIdentity> m_identity;
   bool m_composeHTML;
   RefPtr<QuotingOutputStreamListener> mQuoteStreamListener;
   nsCOMPtr<nsIOutputStream> mBaseStream;
 
   nsCOMPtr<nsIMsgSend> mMsgSend;  // for composition back end
   nsCOMPtr<nsIMsgProgress>
@@ -135,16 +137,17 @@ class nsMsgCompose : public nsIMsgCompos
 
   bool mAllowRemoteContent;
   MSG_DeliverMode mDeliverMode;  // nsIMsgCompDeliverMode long.
 
   friend class QuotingOutputStreamListener;
   friend class nsMsgComposeSendListener;
 
  private:
+  static void CloseTimer(nsITimer* timer, void* aMsgCompose);
   void DeleteTmpAttachments();
   bool mTmpAttachmentsDeleted;
 };
 
 ////////////////////////////////////////////////////////////////////////////////////
 // THIS IS THE CLASS THAT IS THE STREAM Listener OF THE HTML OUTPUT
 // FROM LIBMIME. THIS IS FOR QUOTING
 ////////////////////////////////////////////////////////////////////////////////////
diff --git a/mailnews/imap/src/nsImapProtocol.cpp b/mailnews/imap/src/nsImapProtocol.cpp
--- a/mailnews/imap/src/nsImapProtocol.cpp
+++ b/mailnews/imap/src/nsImapProtocol.cpp
@@ -6218,18 +6218,16 @@ void nsImapProtocol::OnAppendMsgFromFile
   }
 }
 
 void nsImapProtocol::UploadMessageFromFile(nsIFile* file,
                                            const char* mailboxName, PRTime date,
                                            imapMessageFlagsType flags,
                                            nsCString& keywords) {
   if (!file || !mailboxName) return;
-  // Zero the progress bar and text % after possible SMTP send of the file.
-  PercentProgressUpdateEvent(""_ns, u""_ns, 0, 100);
   IncrementCommandTagNumber();
 
   int64_t fileSize = 0;
   int64_t totalSize;
   uint32_t readCount;
   char* dataBuffer = nullptr;
   nsCString command(GetServerCommandTag());
   nsCString escapedName;
@@ -6326,16 +6324,27 @@ void nsImapProtocol::UploadMessageFromFi
       if (NS_SUCCEEDED(rv)) {
         NS_ASSERTION(readCount <= (uint32_t)totalSize,
                      "got more bytes than there should be");
         dataBuffer[readCount] = 0;
         rv = SendData(dataBuffer);
         totalSize -= readCount;
         PercentProgressUpdateEvent(""_ns, u""_ns, fileSize - totalSize,
                                    fileSize);
+        if (!totalSize) {
+          // The full message has been queued for sending, but the actual send
+          // is just now starting and can still potentially fail. From this
+          // point the progress cannot be determined, so just set the progress
+          // to "indeterminate" so that the user does not see an incorrect 100%
+          // complete on the progress bar while waiting for the retry dialog to
+          // appear if the send should fail.
+          m_lastProgressTime = 0;  // Force progress bar update
+          m_lastPercent = -1;      // Force progress bar update
+          PercentProgressUpdateEvent(""_ns, u""_ns, 0, -1);  // Indeterminate
+        }
       }
     }  // end while appending chunks
 
     if (NS_SUCCEEDED(rv)) {  // complete the append
       if (m_allowUTF8Accept)
         rv = SendData(")" CRLF);
       else
         rv = SendData(CRLF);
@@ -7973,17 +7982,23 @@ void nsImapProtocol::EndIdle(bool waitFo
     // mentioned in the IDLE rfc as a possibility. This is similar to the checks
     // done in OnStatusForFolder().
     if (waitForResponse && m_imapMailFolderSinkSelected &&
         GetServerStateParser().UntaggedResponse()) {
       Log("EndIdle", nullptr, "idle response after idle DONE");
       m_imapMailFolderSinkSelected->OnNewIdleMessages();
     }
   }
-  m_imapMailFolderSink = nullptr;
+  // Set m_imapMailFolderSink null only if shutting down or if DONE succeeds.
+  // We need to keep m_imapMailFolderSink if DONE fails or times out when not
+  // shutting down so the URL that is attempting to run on this connection can
+  // retry or signal a failed status when SetUrlState is called in
+  // ProcessCurrentUrl to invoke nsIUrlListener.onStopRunningUrl.
+  if (!waitForResponse || GetServerStateParser().LastCommandSuccessful())
+    m_imapMailFolderSink = nullptr;
 }
 
 void nsImapProtocol::Search(const char* searchCriteria, bool useUID,
                             bool notifyHit /* true */) {
   m_notifySearchHit = notifyHit;
   ProgressEventFunctionUsingName("imapStatusSearchMailbox");
   IncrementCommandTagNumber();
 
