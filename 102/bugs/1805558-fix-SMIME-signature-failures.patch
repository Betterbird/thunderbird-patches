# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1671060692 -3600
# Parent  7e5e57c30da2297611f352067412bc8f57196722
Bug 1805558 - Terminate ending MIME boundary with additional \r\n (and fix confusion in string writing).

diff --git a/mailnews/compose/src/MimeMessage.jsm b/mailnews/compose/src/MimeMessage.jsm
--- a/mailnews/compose/src/MimeMessage.jsm
+++ b/mailnews/compose/src/MimeMessage.jsm
@@ -481,16 +481,17 @@ class MimeMessage {
   /**
    * Recursively write an MimePart and its parts to a this._fstream.
    * @param {MimePart} curPart - The MimePart to write out.
    * @param {number} [depth=0] - Nested level of a part.
    */
   async _writePart(curPart, depth = 0) {
     let bodyString;
     try {
+      // `getEncodedBodyString()` returns a binary string.
       bodyString = await curPart.getEncodedBodyString();
     } catch (e) {
       if (e.data && /^data:/i.test(e.data.url)) {
         // Invalid data uri should not prevent sending message.
         return;
       }
       throw e;
     }
@@ -502,57 +503,61 @@ class MimeMessage {
         // Move child parts one layer deeper so that the message is still well
         // formed after crypto encapsulation.
         let newChild = new MimeMultiPart(curPart.subtype);
         newChild.parts = curPart._parts;
         curPart.parts = [newChild];
       }
     }
 
-    // Write out headers.
+    // Write out headers, there could be non-ASCII in the headers
+    // which we need to encode into UTF-8.
     this._writeString(curPart.getHeaderString());
 
     // Start crypto encapsulation if needed.
     if (depth == 0 && this._composeSecure) {
       this._startCryptoEncapsulation();
     }
 
     // Recursively write out parts.
     if (curPart.parts.length) {
       // single part message
       if (curPart.parts.length === 1) {
         await this._writePart(curPart.parts[0], depth + 1);
-        this._writeString(`${bodyString}`);
+        this._writeBinaryString(bodyString);
         return;
       }
 
-      this._writeString("\r\n");
+      // We can safely use `_writeBinaryString` for ASCII strings.
+      this._writeBinaryString("\r\n");
       if (depth == 0) {
         // Current part is a top part and multipart container.
-        this._writeString("This is a multi-part message in MIME format.\r\n");
+        this._writeBinaryString(
+          "This is a multi-part message in MIME format.\r\n"
+        );
       }
 
       // multipart message
       for (let part of curPart.parts) {
-        this._writeString(`--${curPart.separator}\r\n`);
+        this._writeBinaryString(`--${curPart.separator}\r\n`);
         await this._writePart(part, depth + 1);
       }
-      this._writeString(`\r\n--${curPart.separator}--\r\n`);
+      this._writeBinaryString(`\r\n--${curPart.separator}--\r\n\r\n`);
     } else {
       this._writeBinaryString(`\r\n`);
     }
 
     // Ensure there is exactly one blank line after a part and before
     // the boundary, and exactly one blank line between boundary lines.
     // This works around bugs in other software that erroneously remove
     // additional blank lines, thereby causing verification failures of
     // OpenPGP or S/MIME signatures. For example see bug 1731529.
 
     // Write out body.
-    this._writeBinaryString(`${bodyString}`);
+    this._writeBinaryString(bodyString);
   }
 
   /**
    * Write a binary string to this._fstream.
    *
    * @param {BinaryString} str - The binary string to write.
    */
   _writeBinaryString(str) {
