# HG changeset patch
# User Gene Smith <gds@chartertn.net>
# Date 1678567598 -3600
# Node ID 8005c8f26289897dc9142d6368b4ded9c3ba884e
# Parent  3094369f1e2e96b89827719e963762e7f9a074f8
Bug 1745130 - Fix hang at 100% during failed imap save to sent. r=mkmelin. r=mkmelin,micahilbery

CSS changes based on BB's comments in https://bugzilla.mozilla.org/show_bug.cgi?id=1745130#c103

Differential Revision: https://phabricator.services.mozilla.com/D171035

diff --git a/mail/themes/shared/mail/messenger.css b/mail/themes/shared/mail/messenger.css
--- a/mail/themes/shared/mail/messenger.css
+++ b/mail/themes/shared/mail/messenger.css
@@ -1257,24 +1257,36 @@ label.statusbarpanel {
 }
 
 #dialog\.progress:indeterminate::-moz-progress-bar,
 #shutdown_progressmeter:indeterminate::-moz-progress-bar,
 .progressmeter-statusbar:indeterminate::-moz-progress-bar {
   /* Make a white reflecting animation.
      Create a gradient with 2 identical pattern, and enlarge the size to 200%.
      This allows us to animate background-position with percentage. */
-  background-image: linear-gradient(90deg, transparent 0%,
-                                           rgba(255, 255, 255, 0.5) 25%,
-                                           transparent 50%,
-                                           rgba(255, 255, 255, 0.5) 75%,
-                                           transparent 100%);
+  background-image: linear-gradient(90deg, rgba(255, 255, 255, 0.8) 0%,
+                                           rgba(255, 255, 255, 0.2) 25%,
+                                           rgba(255, 255, 255, 0.8) 50%,
+                                           rgba(255, 255, 255, 0.2) 75%,
+                                           rgba(255, 255, 255, 0.8) 100%);
   background-size: 200% 100%;
 }
 
+@media (prefers-color-scheme: dark) {
+  #dialog\.progress:indeterminate::-moz-progress-bar,
+  #shutdown_progressmeter:indeterminate::-moz-progress-bar,
+  .progressmeter-statusbar:indeterminate::-moz-progress-bar {
+    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.5) 0%,
+                                             rgba(0, 0, 0, 0.1) 25%,
+                                             rgba(0, 0, 0, 0.5) 50%,
+                                             rgba(0, 0, 0, 0.1) 75%,
+                                             rgba(0, 0, 0, 0.5) 100%);
+  }
+}
+
 @media (prefers-reduced-motion: no-preference) {
   #dialog\.progress:indeterminate::-moz-progress-bar,
   #shutdown_progressmeter:indeterminate::-moz-progress-bar,
   .progressmeter-statusbar:indeterminate::-moz-progress-bar {
     animation: progressSlideX 1.5s linear infinite;
   }
 
   @keyframes progressSlideX {
diff --git a/mailnews/compose/content/sendProgress.js b/mailnews/compose/content/sendProgress.js
--- a/mailnews/compose/content/sendProgress.js
+++ b/mailnews/compose/content/sendProgress.js
@@ -17,17 +17,22 @@ var gBundle;
 
 window.addEventListener("DOMContentLoaded", onLoad);
 window.addEventListener("unload", onUnload);
 document.addEventListener("dialogcancel", onCancel);
 
 // all progress notifications are done through the nsIWebProgressListener implementation...
 var progressListener = {
   onStateChange(aWebProgress, aRequest, aStateFlags, aStatus) {
-    // Only need to handle STATE_STOP.
+    if (aStateFlags & Ci.nsIWebProgressListener.STATE_START) {
+      // Set progress meter to show indeterminate.
+      dialog.progress.removeAttribute("value");
+      dialog.progressText.value = "";
+    }
+
     if (aStateFlags & Ci.nsIWebProgressListener.STATE_STOP) {
       // we are done sending/saving the message...
       // Indicate completion in status area.
       var msg;
       if (itsASaveOperation) {
         msg = gBundle.GetStringFromName("messageSaved");
       } else {
         msg = gBundle.GetStringFromName("messageSent");
@@ -64,17 +69,17 @@ var progressListener = {
       // Advance progress meter.
       dialog.progress.value = percent;
 
       // Update percentage label on progress meter.
       dialog.progressText.value = gBundle.formatStringFromName("percentMsg", [
         percent,
       ]);
     } else {
-      // Progress meter should show no value in this case.
+      // Have progress meter show indeterminate with denominator <= 0.
       dialog.progress.removeAttribute("value");
       dialog.progressText.value = "";
     }
   },
 
   onLocationChange(aWebProgress, aRequest, aLocation, aFlags) {
     // we can ignore this notification
   },
diff --git a/mailnews/compose/src/SmtpService.jsm b/mailnews/compose/src/SmtpService.jsm
--- a/mailnews/compose/src/SmtpService.jsm
+++ b/mailnews/compose/src/SmtpService.jsm
@@ -146,30 +146,33 @@ SmtpService.prototype = {
       while (sstream.available()) {
         let chunk = sstream.read(65536);
         let canSendMore = client.send(chunk);
         if (!canSendMore) {
           // Socket buffer is full, wait for the ondrain event.
           await new Promise(resolve => (socketOnDrain = resolve));
         }
         // In practice, chunks are buffered by TCPSocket, progress reaches 100%
-        // almost immediately.
+        // almost immediately unless message is larger than chunk size.
         sentSize += chunk.length;
         progressListener?.onProgressChange(
           null,
           null,
           sentSize,
           totalSize,
           sentSize,
           totalSize
         );
       }
       sstream.close();
       fstream.close();
       client.end();
+
+      // Set progress to indeterminate.
+      progressListener?.onProgressChange(null, null, 0, -1, 0, -1);
     };
     client.ondrain = () => {
       // Socket buffer is empty, safe to continue sending.
       socketOnDrain();
     };
     client.ondone = exitCode => {
       if (!AppConstants.MOZ_SUITE) {
         Services.telemetry.scalarAdd("tb.mails.sent", 1);
diff --git a/mailnews/imap/src/nsImapProtocol.cpp b/mailnews/imap/src/nsImapProtocol.cpp
--- a/mailnews/imap/src/nsImapProtocol.cpp
+++ b/mailnews/imap/src/nsImapProtocol.cpp
@@ -6218,18 +6218,16 @@ void nsImapProtocol::OnAppendMsgFromFile
   }
 }
 
 void nsImapProtocol::UploadMessageFromFile(nsIFile* file,
                                            const char* mailboxName, PRTime date,
                                            imapMessageFlagsType flags,
                                            nsCString& keywords) {
   if (!file || !mailboxName) return;
-  // Zero the progress bar and text % after possible SMTP send of the file.
-  PercentProgressUpdateEvent(""_ns, u""_ns, 0, 100);
   IncrementCommandTagNumber();
 
   int64_t fileSize = 0;
   int64_t totalSize;
   uint32_t readCount;
   char* dataBuffer = nullptr;
   nsCString command(GetServerCommandTag());
   nsCString escapedName;
@@ -6326,16 +6324,27 @@ void nsImapProtocol::UploadMessageFromFi
       if (NS_SUCCEEDED(rv)) {
         NS_ASSERTION(readCount <= (uint32_t)totalSize,
                      "got more bytes than there should be");
         dataBuffer[readCount] = 0;
         rv = SendData(dataBuffer);
         totalSize -= readCount;
         PercentProgressUpdateEvent(""_ns, u""_ns, fileSize - totalSize,
                                    fileSize);
+        if (!totalSize) {
+          // The full message has been queued for sending, but the actual send
+          // is just now starting and can still potentially fail. From this
+          // point the progress cannot be determined, so just set the progress
+          // to "indeterminate" so that the user does not see an incorrect 100%
+          // complete on the progress bar while waiting for the retry dialog to
+          // appear if the send should fail.
+          m_lastProgressTime = 0;  // Force progress bar update
+          m_lastPercent = -1;      // Force progress bar update
+          PercentProgressUpdateEvent(""_ns, u""_ns, 0, -1);  // Indeterminate
+        }
       }
     }  // end while appending chunks
 
     if (NS_SUCCEEDED(rv)) {  // complete the append
       if (m_allowUTF8Accept)
         rv = SendData(")" CRLF);
       else
         rv = SendData(CRLF);
@@ -7973,17 +7982,23 @@ void nsImapProtocol::EndIdle(bool waitFo
     // mentioned in the IDLE rfc as a possibility. This is similar to the checks
     // done in OnStatusForFolder().
     if (waitForResponse && m_imapMailFolderSinkSelected &&
         GetServerStateParser().UntaggedResponse()) {
       Log("EndIdle", nullptr, "idle response after idle DONE");
       m_imapMailFolderSinkSelected->OnNewIdleMessages();
     }
   }
-  m_imapMailFolderSink = nullptr;
+  // Set m_imapMailFolderSink null only if shutting down or if DONE succeeds.
+  // We need to keep m_imapMailFolderSink if DONE fails or times out when not
+  // shutting down so the URL that is attempting to run on this connection can
+  // retry or signal a failed status when SetUrlState is called in
+  // ProcessCurrentUrl to invoke nsIUrlListener.onStopRunningUrl.
+  if (!waitForResponse || GetServerStateParser().LastCommandSuccessful())
+    m_imapMailFolderSink = nullptr;
 }
 
 void nsImapProtocol::Search(const char* searchCriteria, bool useUID,
                             bool notifyHit /* true */) {
   m_notifySearchHit = notifyHit;
   ProgressEventFunctionUsingName("imapStatusSearchMailbox");
   IncrementCommandTagNumber();
 
