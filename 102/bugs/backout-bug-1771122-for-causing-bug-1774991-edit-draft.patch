# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Parent  bea164394807fb901582ea8cefc91cc453ae7dd6
Backed out changeset f8c016fed692 (bug 1771122) - Breaks "Edit Draft" and "Edit as New Message".

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -3419,154 +3419,94 @@ async function verifyCertUsable(cert) {
           resolve(certificateUsageEmailRecipient);
         }
       }
     );
   });
 }
 
 async function checkRecipientKeys() {
+  if (!gSendEncrypted) {
+    updateKeyNotifications([]);
+    return;
+  }
+
   let recipients = getEncryptionCompatibleRecipients();
   // Calculate key notifications.
   // 1 notification at most per email address that has no valid key.
   // If an email address has several invalid keys, we notify only about the 1st
   // undecided key, or the 1st expired key, or the 1st rejected key, in this
   // order.
 
-  let emailsWithMissingCerts = [];
-  let haveAllCerts = false;
-
   let emailsWithMissingKeys = [];
-  let haveAllKeys = false;
-
-  if (gSendEncrypted || isPgpConfigured()) {
+
+  if (gSelectedTechnologyIsPGP) {
     for (let addr of recipients) {
       let keyMetas = await EnigmailKeyRing.getEncryptionKeyMeta(addr);
 
       if (keyMetas.length == 1 && keyMetas[0].readiness == "alias") {
         // Skip if this is an alias email.
         continue;
       }
 
       if (!keyMetas.some(k => k.readiness == "accepted")) {
         emailsWithMissingKeys.push(addr);
         continue;
       }
     }
-
-    if (!emailsWithMissingKeys.length) {
-      haveAllKeys = true;
-    }
-  }
-
-  if (gSendEncrypted || isSmimeEncryptionConfigured()) {
-    Recipients2CompFields(gMsgCompose.compFields);
-    let helper = Cc[
-      "@mozilla.org/messenger-smime/smimejshelper;1"
-    ].createInstance(Ci.nsISMimeJSHelper);
-
-    let outEmailAddresses = {};
-    let outCertIssuedInfos = {};
-    let outCertExpiresInfos = {};
-    let outCerts = {};
-    let outCanEncrypt = {};
-
-    helper.getRecipientCertsInfo(
-      gMsgCompose.compFields,
-      outEmailAddresses,
-      outCertIssuedInfos,
-      outCertExpiresInfos,
-      outCerts,
-      outCanEncrypt
-    );
-
-    let checks = [];
-    for (let i = 0; i < outEmailAddresses.value.length; i++) {
-      if (!outCerts.value[i]) {
-        emailsWithMissingCerts.push(outEmailAddresses.value[i]);
-        continue;
-      }
-
-      checks.push(
-        verifyCertUsable(outCerts.value[i])
-          .then(usage => {})
-          .catch(error => {
-            emailsWithMissingCerts.push(outEmailAddresses.value[i]);
-          })
-      );
-    }
-    await Promise.all(checks);
-
-    if (!emailsWithMissingCerts.length) {
-      haveAllCerts = true;
-    }
-  }
-
-  if (!gSendEncrypted) {
-    if (recipients.length && (haveAllCerts || haveAllKeys)) {
-      await updateEncryptionReminder(haveAllKeys, haveAllCerts);
-    } else {
-      await updateEncryptionReminder(false, false);
-    }
-
-    updateKeyNotifications([]);
+    updateKeyNotifications(emailsWithMissingKeys);
     return;
   }
 
-  await updateEncryptionReminder(false, false);
-  updateKeyNotifications(
-    gSelectedTechnologyIsPGP ? emailsWithMissingKeys : emailsWithMissingCerts
-  );
-}
-
-/**
- * Display (or hide) the notification that informs the user that
- * encryption is possible (but currently not enabled).
- *
- * @param {boolean} canEnableOpenPGP - If OpenPGP encryption is possible
- * @param {boolean} canEnableSMIME - If S/MIME encryption is possible
- */
-async function updateEncryptionReminder(canEnableOpenPGP, canEnableSMIME) {
-  let enableNotification = gComposeNotification.getNotificationWithValue(
-    "enableNotification"
-  );
-  if (enableNotification) {
-    gComposeNotification.removeNotification(enableNotification);
-  }
-
-  if (!canEnableOpenPGP && !canEnableSMIME) {
-    return;
-  }
-
-  let labelId = canEnableOpenPGP
-    ? "can-encrypt-openpgp-notification"
-    : "can-encrypt-smime-notification";
-
-  gComposeNotification.appendNotification(
-    "enableNotification",
-    {
-      label: { "l10n-id": labelId },
-      priority: gComposeNotification.PRIORITY_INFO_LOW,
-    },
-    [
-      {
-        "l10n-id": "can-e2e-encrypt-button",
-        callback() {
-          gSelectedTechnologyIsPGP = canEnableOpenPGP;
-          setSendEncryptedAndSigned(true);
-          updateEncryptionOptions();
-          checkRecipientKeys();
-          return true;
-        },
-      },
-    ]
-  );
+  // S/MIME
+
+  Recipients2CompFields(gMsgCompose.compFields);
+  let helper = Cc[
+    "@mozilla.org/messenger-smime/smimejshelper;1"
+  ].createInstance(Ci.nsISMimeJSHelper);
+
+  let outEmailAddresses = {};
+  let outCertIssuedInfos = {};
+  let outCertExpiresInfos = {};
+  let outCerts = {};
+  let outCanEncrypt = {};
+
+  helper.getRecipientCertsInfo(
+    gMsgCompose.compFields,
+    outEmailAddresses,
+    outCertIssuedInfos,
+    outCertExpiresInfos,
+    outCerts,
+    outCanEncrypt
+  );
+
+  let checks = [];
+  for (let i = 0; i < outEmailAddresses.value.length; i++) {
+    if (!outCerts.value[i]) {
+      emailsWithMissingKeys.push(outEmailAddresses.value[i]);
+      continue;
+    }
+
+    checks.push(
+      verifyCertUsable(outCerts.value[i])
+        .then(usage => {})
+        .catch(error => {
+          emailsWithMissingKeys.push(outEmailAddresses.value[i]);
+        })
+    );
+  }
+
+  await Promise.all(checks);
+  updateKeyNotifications(emailsWithMissingKeys);
 }
 
 function updateKeyNotifications(emailsWithMissingKeys) {
+  /**
+   * Remove all previous key notifications
+   */
   let notification = gComposeNotification.getNotificationWithValue(
     "keyNotification"
   );
   if (notification) {
     gComposeNotification.removeNotification(notification);
   }
 
   // Always refresh the pills UI.
@@ -3625,17 +3565,17 @@ function updateKeyNotifications(emailsWi
       : "smime-cert-issue-notification-many";
 
     label = {
       "l10n-id": id,
       "l10n-args": { count: emailsWithMissingKeys.length },
     };
   }
 
-  gComposeNotification.appendNotification(
+  notification = gComposeNotification.appendNotification(
     "keyNotification",
     {
       label,
       priority: gComposeNotification.PRIORITY_WARNING_MEDIUM,
     },
     buttons
   );
 }
