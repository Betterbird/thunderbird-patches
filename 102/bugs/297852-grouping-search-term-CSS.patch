# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1680596333 -7200
# Parent  fe3fbe39c7a0af3555eea3c5c18c6329ba693407
Bug 297852 - Allow grouping in search term UI: Add icons before a search row to see groups easier.

diff --git a/mail/themes/shared/jar.inc.mn b/mail/themes/shared/jar.inc.mn
--- a/mail/themes/shared/jar.inc.mn
+++ b/mail/themes/shared/jar.inc.mn
@@ -201,16 +201,18 @@
   skin/classic/messenger/icons/exclude.svg                    (../shared/mail/icons/exclude.svg)
   skin/classic/messenger/icons/empty-search-results.svg       (../shared/mail/icons/empty-search-results.svg)
   skin/classic/messenger/icons/encryption-key.svg             (../shared/mail/icons/encryption-key.svg)
   skin/classic/messenger/icons/feeds.svg                      (../shared/mail/icons/feeds.svg)
   skin/classic/messenger/icons/feeds-folder.svg               (../shared/mail/icons/feeds-folder.svg)
   skin/classic/messenger/icons/file.svg                       (../shared/mail/icons/file.svg)
   skin/classic/messenger/icons/file-item.svg                  (../shared/mail/icons/file-item.svg)
   skin/classic/messenger/icons/filter.svg                     (../shared/mail/icons/filter.svg)
+  skin/classic/messenger/icons/search-row-more.svg            (../shared/mail/icons/search-row-more.svg)
+  skin/classic/messenger/icons/search-row-end.svg             (../shared/mail/icons/search-row-end.svg)
   skin/classic/messenger/icons/fingerprint.svg                (../shared/mail/icons/fingerprint.svg)
   skin/classic/messenger/icons/flag-col.svg                   (../shared/mail/icons/flag-col.svg)
   skin/classic/messenger/icons/flagged.svg                    (../shared/mail/icons/flagged.svg)
   skin/classic/messenger/icons/folder.svg                     (../shared/mail/icons/folder.svg)
   skin/classic/messenger/icons/folder-local.svg               (../shared/mail/icons/folder-local.svg)
   skin/classic/messenger/icons/forget.svg                     (../shared/mail/icons/forget.svg)
   skin/classic/messenger/icons/forward.svg                    (../shared/mail/icons/forward.svg)
   skin/classic/messenger/icons/forward-redirect.svg           (../shared/mail/icons/forward-redirect.svg)
diff --git a/mail/themes/shared/mail/filterDialog.css b/mail/themes/shared/mail/filterDialog.css
--- a/mail/themes/shared/mail/filterDialog.css
+++ b/mail/themes/shared/mail/filterDialog.css
@@ -69,16 +69,30 @@ checkbox:not([label]) .checkbox-label-bo
 .ruleactionitem {
   min-width: 20em;
 }
 
 .ruleaction-type {
   min-width: 15em;
 }
 
+.search-row {
+  /* padding-inline-start and background-position-x are set in JS code */
+  background-image: url("chrome://messenger/skin/icons/search-row-more.svg");
+  background-position-y: center;
+  background-repeat: no-repeat;
+  -moz-context-properties: fill, fill-opacity;
+  fill: currentColor;
+  fill-opacity: 0.3;
+}
+
+.search-row-end {
+  background-image: url("chrome://messenger/skin/icons/search-row-end.svg");
+}
+
 #countBox[filterActive="matches"] {
   color: #4e9a06;
 }
 
 #countBox[filterActive="nomatches"] {
   color: #c00;
 }
 
diff --git a/mail/themes/shared/mail/icons/search-row-end.svg b/mail/themes/shared/mail/icons/search-row-end.svg
new file mode 100644
--- /dev/null
+++ b/mail/themes/shared/mail/icons/search-row-end.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="8" height="24" fill="context-fill" fill-opacity="context-fill-opacity" viewBox="0 0 8 24">
+  <path d="M 0,0 h 1 v 12 h 7 v 1 h -8 Z"/>
+</svg>
diff --git a/mail/themes/shared/mail/icons/search-row-more.svg b/mail/themes/shared/mail/icons/search-row-more.svg
new file mode 100644
--- /dev/null
+++ b/mail/themes/shared/mail/icons/search-row-more.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="8" height="24" fill="context-fill" fill-opacity="context-fill-opacity" viewBox="0 0 8 24">
+  <path d="M 0,0 h 1 v 12 h 7 v 1 h -7 v 11 h -1 Z"/>
+</svg>
diff --git a/mailnews/search/content/searchTerm.js b/mailnews/search/content/searchTerm.js
--- a/mailnews/search/content/searchTerm.js
+++ b/mailnews/search/content/searchTerm.js
@@ -269,16 +269,56 @@ function expressionValid() {
   Services.prompt.alert(
     window,
     "Internal error: Invalid rule expression",
     "The rule expression has unbalanced groups, please cancel, delete and start again. See GitHub issue #63 for details",
   );
   return false;
 }
 
+function setEndCSS() {
+  let richlistIdx = 1;
+  let termIdx = 0;
+  let richlistLength = gSearchTermList.children.length;
+  let level;
+  while (richlistIdx < richlistLength) {
+    let item = gSearchTermList.getItemAtIndex(richlistIdx);
+    if (item.firstChild.localName == "radiogroup") {
+    } else {
+      let isEnd = gSearchTerms[termIdx].obj.endsGrouping;
+      if (isEnd) {
+        // Special case where the search term ending a group
+        // is followed by a still empty group.
+        // Check whether a group with the next level follows.
+        if (richlistIdx + 1 < richlistLength) {
+          let itemChild = gSearchTermList.getItemAtIndex(richlistIdx + 1).firstChild;
+          if (itemChild.localName == "radiogroup") {
+            level = itemChild.getAttribute("level");
+            level = parseInt(level) + 1;
+            if (level == gSearchTerms[termIdx].level + 1) {
+              isEnd = false;
+            }
+          }
+        }
+      }
+      if (isEnd) {
+        item.classList.add("search-row-end");
+      } else {
+        item.classList.remove("search-row-end");
+      }
+      termIdx++;
+    }
+    richlistIdx++;
+  }
+
+  if (richlistLength > 1) {
+    gSearchTermList.getItemAtIndex(richlistLength - 1).classList.add("search-row-end");
+  }
+}
+
 function initializeSearchRows(scope, searchTerms) {
   let richlistIdx = 1;
   let level = 1;
   for (let i = 0; i < searchTerms.length; i++) {
     let searchTerm = searchTerms[i];
     for (let j = 0; j < searchTerm.beginsGrouping; j++) {
       // eslint-disable-next-line curly
       if (verbose) console.log(`initializeSearchRows: begin(${searchTerm.beginsGrouping}) at ${i}`);
@@ -341,16 +381,17 @@ function initializeSearchRows(scope, sea
     }
 
     if (searchTerm.endsGrouping) {
       level -= searchTerm.endsGrouping;
     }
   }
 
   initializeMatchAll();
+  setEndCSS();
   hasSearchTerms(expressionValid() ? searchTerms.length : 0);
   dumpSearchTerms("initializeSearchRows - exit");
 }
 
 function matchAllChanged(event) {
   let matchAllValue = event.target.checked;
   if (matchAllValue && gSearchTerms.length == 0) {
     // Insert dummy term.
@@ -589,16 +630,17 @@ function onMore(event) {
         if (verbose) {
           console.log(`searchTerm: onMore end (at end) ${termIdx}`);
         }
         gSearchTerms[termIdx].obj.endsGrouping++;
       }
     }
   }
 
+  setEndCSS();
   hasSearchTerms(expressionValid() ? gSearchTerms.length : 0);
   dumpSearchTerms("onMore - exit");
 }
 
 function onLess(event) {
   if (!event) {
     return;
   }
@@ -650,17 +692,17 @@ function onLess(event) {
       currentIdx++;
     }
     if (verbose) {
       console.log(
         `searchTerm: onLess: Need to transfer ${endsGroupingToTransfer}`
       );
     }
 
-    // Nuke everythiung between that index downto where we started.
+    // Nuke everything between that index down to where we started.
     for (let i = deleteToIdx; i > richlistIdx; i--) {
       if (verbose) {
         console.log(`searchTerm: onLess: removing group member ${i}`);
       }
       removeSearchRow(i);
     }
   } else {
     // We're not removing the entire group. Move the begin/end marker when removing from a group.
@@ -739,16 +781,17 @@ function onLess(event) {
     ) {
       if (verbose) {
         console.log(`searchTerm: onLess: adding end to ${prevTermIdx}`);
       }
       gSearchTerms[prevTermIdx].obj.endsGrouping += endsGroupingToTransfer;
     }
   }
 
+  setEndCSS();
   hasSearchTerms(expressionValid() ? gSearchTerms.length : 0);
   dumpSearchTerms("onLess - exit");
 }
 
 function onGroup(event) {
   dumpSearchTerms("onGroup - entry");
 
   // if we have an event, extract the list row index and use that as the row number
@@ -761,16 +804,17 @@ function onGroup(event) {
     richlistIdx = gSearchTermList.getRowCount();
   }
 
   createAndOrRow(richlistIdx, gSearchScope, "and", null, event != null);
 
   // the user just added a term, so scroll to it
   gSearchTermList.ensureIndexIsVisible(richlistIdx);
 
+  setEndCSS();
   dumpSearchTerms("onGroup - exit");
 }
 
 // set scope on all visible searchattribute tags
 function setSearchScope(scope) {
   gSearchScope = scope;
   for (var i = 0; i < gSearchTerms.length; i++) {
     // don't set element attributes if XBL hasn't loaded
@@ -960,17 +1004,18 @@ function createSearchRow(index, scope, s
   gSearchTerms.splice(termIdx, 0, {
     obj: searchTermObj,
     scope,
     searchTerm,
     initialized: false,
     level,
   });
 
-  searchrow.style = `padding-inline-start: ${level * 20}px;`;
+  searchrow.classList.add("search-row");
+  searchrow.style = `padding-inline-start: ${level * 20}px; background-position-x: ${level * 20 - 5}px;`;
 
   // `index` is index of new row.
   if (index == gSearchTermList.children.length) {
     gSearchTermList.appendChild(searchrow);
   } else {
     var currentItem = gSearchTermList.getItemAtIndex(index);
     gSearchTermList.insertBefore(searchrow, currentItem);
   }
@@ -1045,17 +1090,18 @@ function createAndOrRow(index, scope, lo
   andOrRow.appendChild(moreButton);
   andOrRow.appendChild(groupButton);
   andOrRow.appendChild(lessButton);
 
   if (!level) {
     level = getLevel(index);
   }
   radioGroup.setAttribute("level", level);
-  andOrRow.style = `padding-inline-start: ${level * 20}px;`;
+  andOrRow.classList.add("search-row");
+  andOrRow.style = `padding-inline-start: ${level * 20}px; background-position-x: ${level * 20 - 5}px;`;
 
   // `index` is index of new row.
   if (index == gSearchTermList.children.length) {
     gSearchTermList.appendChild(andOrRow);
   } else {
     var currentItem = gSearchTermList.getItemAtIndex(index);
     gSearchTermList.insertBefore(andOrRow, currentItem);
   }
