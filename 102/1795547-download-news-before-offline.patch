# HG changeset patch
# User Ping Chen <remotenonsense@gmail.com>
# Date 1667077314 -7200
# Node ID bf9dd95a17f3587fce7fc77f8509e938cd3602f8
# Parent  04af121b9194786ad9436b09f63e3e4d0d0d5318
Bug 1795547 - Support downloading all news before going offline (ESR 102 version by Betterbird). r=mkmelin

Differential Revision: https://phabricator.services.mozilla.com/D160707

diff --git a/mailnews/news/src/NewsDownloader.jsm b/mailnews/news/src/NewsDownloader.jsm
new file mode 100644
--- /dev/null
+++ b/mailnews/news/src/NewsDownloader.jsm
@@ -0,0 +1,154 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+var EXPORTED_SYMBOLS = ["NewsDownloader"];
+
+var { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+var { MailServices } = ChromeUtils.import(
+  "resource:///modules/MailServices.jsm"
+);
+var { NntpUtils } = ChromeUtils.import("resource:///modules/NntpUtils.jsm");
+
+/**
+ * Download articles in all subscribed newsgroups for offline use.
+ */
+class NewsDownloader {
+  _logger = NntpUtils.logger;
+
+  /**
+   * @param {nsIMsgWindow} msgWindow - The associated msg window.
+   * @param {nsIUrlListener} urlListener - Callback for the request.
+   */
+  constructor(msgWindow, urlListener) {
+    this._msgWindow = msgWindow;
+    this._urlListener = urlListener;
+
+    this._bundle = Services.strings.createBundle(
+      "chrome://messenger/locale/news.properties"
+    );
+  }
+
+  /**
+   * Actually start the download process.
+   */
+  async start() {
+    this._logger.debug("Start downloading all articles for offline");
+    let servers = MailServices.accounts.allServers.filter(
+      x => x.type == "nntp"
+    );
+    // Download all servers concurrently.
+    await Promise.all(
+      servers.map(async server => {
+        let folders = server.rootFolder.descendants;
+        for (let folder of folders) {
+          // Download newsgroups in a server one by one.
+          await this._downloadFolder(folder);
+        }
+      })
+    );
+
+    this._urlListener.OnStopRunningUrl(null, Cr.NS_OK);
+  }
+
+  /**
+   * Download articles in a newsgroup one by one.
+   * @param {nsIMsgFolder} folder - The newsgroup folder.
+   */
+  async _downloadFolder(folder) {
+    this._logger.debug(`Start downloading ${folder.URI}`);
+
+    folder.QueryInterface(Ci.nsIMsgNewsFolder).saveArticleOffline = true;
+    let keysToDownload = await this._getKeysToDownload(folder);
+
+    let i = 0;
+    let total = keysToDownload.size;
+    for (let key of keysToDownload) {
+      await new Promise(resolve => {
+        MailServices.nntp.fetchMessage(folder, key, this._msgWindow, null, {
+          OnStartRunningUrl() {},
+          OnStopRunningUrl() {
+            resolve();
+          },
+        });
+      });
+      this._msgWindow.statusFeedback.showStatusString(
+        this._bundle.formatStringFromName("downloadingArticlesForOffline", [
+          ++i,
+          total,
+          folder.prettyName,
+        ])
+      );
+    }
+
+    folder.saveArticleOffline = false;
+  }
+
+  /**
+   * Use a search session to find articles that match the download settings
+   * and we don't already have.
+   * @param {nsIMsgFolder} folder - The newsgroup folder.
+   * @returns {Set<number>}
+   */
+  async _getKeysToDownload(folder) {
+    let searchSession = Cc[
+      "@mozilla.org/messenger/searchSession;1"
+    ].createInstance(Ci.nsIMsgSearchSession);
+    let termValue = searchSession.createTerm().value;
+
+    let downloadSettings = folder.downloadSettings;
+    if (downloadSettings.downloadUnreadOnly) {
+      termValue.attrib = Ci.nsMsgSearchAttrib.MsgStatus;
+      termValue.status = Ci.nsMsgMessageFlags.Read;
+      searchSession.addSearchTerm(
+        Ci.nsMsgSearchAttrib.MsgStatus,
+        Ci.nsMsgSearchOp.Isnt,
+        termValue,
+        true,
+        null
+      );
+    }
+    if (downloadSettings.downloadByDate) {
+      termValue.attrib = Ci.nsMsgSearchAttrib.AgeInDays;
+      termValue.age = downloadSettings.ageLimitOfMsgsToDownload;
+      searchSession.addSearchTerm(
+        Ci.nsMsgSearchAttrib.AgeInDays,
+        Ci.nsMsgSearchOp.IsLessThan,
+        termValue,
+        true,
+        null
+      );
+    }
+    termValue.attrib = Ci.nsMsgSearchAttrib.MsgStatus;
+    termValue.status = Ci.nsMsgMessageFlags.Offline;
+    searchSession.addSearchTerm(
+      Ci.nsMsgSearchAttrib.MsgStatus,
+      Ci.nsMsgSearchOp.Isnt,
+      termValue,
+      true,
+      null
+    );
+
+    let keysToDownload = new Set();
+    await new Promise(resolve => {
+      searchSession.registerListener(
+        {
+          onSearchHit(hdr, folder) {
+            if (!(hdr.flags & Ci.nsMsgMessageFlags.Offline)) {
+              // Only need to download articles we don't already have.
+              keysToDownload.add(hdr.messageKey);
+            }
+          },
+          onSearchDone: status => {
+            resolve();
+          },
+        },
+        Ci.nsIMsgSearchSession.allNotifications
+      );
+      searchSession.addScopeTerm(Ci.nsMsgSearchScope.localNews, folder);
+      searchSession.search(this._msgWindow);
+    });
+
+    return keysToDownload;
+  }
+}
diff --git a/mailnews/news/src/NntpService.jsm b/mailnews/news/src/NntpService.jsm
--- a/mailnews/news/src/NntpService.jsm
+++ b/mailnews/news/src/NntpService.jsm
@@ -211,16 +211,24 @@ class NntpService {
         client.send("\r\n.\r\n");
 
         newsFolder.removeMessage(messageKey);
         newsFolder.cancelComplete();
       };
     });
   }
 
+  downloadNewsgroupsForOffline(msgWindow, urlListener) {
+    let { NewsDownloader } = ChromeUtils.import(
+      "resource:///modules/NewsDownloader.jsm"
+    );
+    let downloader = new NewsDownloader(msgWindow, urlListener);
+    downloader.start();
+  }
+
   /**
    * Find the hostname of a NNTP server from a group name.
    * @param {string} groupName - The group name.
    * @returns {string} The corresponding server host.
    */
   _findHostFromGroupName(groupName) {
     for (let server of MailServices.accounts.allServers) {
       if (
diff --git a/mailnews/news/src/moz.build b/mailnews/news/src/moz.build
--- a/mailnews/news/src/moz.build
+++ b/mailnews/news/src/moz.build
@@ -15,16 +15,17 @@ SOURCES += [
     "nsNNTPNewsgroupPost.cpp",
     "nsNNTPProtocol.cpp",
     "nsNntpService.cpp",
     "nsNntpUrl.cpp",
 ]
 
 EXTRA_JS_MODULES += [
     "NewsAutoCompleteSearch.jsm",
+    "NewsDownloader.jsm",
     "NntpChannel.jsm",
     "NntpClient.jsm",
     "NntpIncomingServer.jsm",
     "NntpMessageService.jsm",
     "NntpModuleLoader.jsm",
     "NntpNewsGroup.jsm",
     "NntpProtocolHandler.jsm",
     "NntpProtocolInfo.jsm",
