# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1667118520 -3600
# Parent  79c629f73910972b479904535787923342918b88
Bug 1798172 - Use getStringPref/setStringPref for folder URI preferences.

diff --git a/mail/base/content/folderPane.js b/mail/base/content/folderPane.js
--- a/mail/base/content/folderPane.js
+++ b/mail/base/content/folderPane.js
@@ -1042,17 +1042,17 @@ var gFolderTreeView = {
           .getService(Ci.nsIDragService)
           .getCurrentSession().dragAction ==
         Ci.nsIDragService.DRAGDROP_ACTION_MOVE;
       let isNews = sourceFolder.flags & Ci.nsMsgFolderFlags.Newsgroup;
       if (!sourceFolder.canDeleteMessages || isNews) {
         isMove = false;
       }
 
-      prefBranch.setCharPref("last_msg_movecopy_target_uri", targetFolder.URI);
+      prefBranch.setStringPref("last_msg_movecopy_target_uri", targetFolder.URI);
       prefBranch.setBoolPref("last_msg_movecopy_was_move", isMove);
       // ### ugh, so this won't work with cross-folder views. We would
       // really need to partition the messages by folder.
       cs.copyMessages(
         sourceFolder,
         array,
         targetFolder,
         isMove,
diff --git a/mail/base/content/mail3PaneWindowCommands.js b/mail/base/content/mail3PaneWindowCommands.js
--- a/mail/base/content/mail3PaneWindowCommands.js
+++ b/mail/base/content/mail3PaneWindowCommands.js
@@ -674,17 +674,17 @@ var DefaultController = {
         // Disable "Move to <folder> Again" for news and other read only
         // folders since we can't really move messages from there - only copy.
         if (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move")) {
           let loadedFolder = gFolderTreeView.getSelectedFolders()[0];
           if (loadedFolder && !loadedFolder.canDeleteMessages) {
             return false;
           }
         }
-        let targetURI = Services.prefs.getCharPref(
+        let targetURI = Services.prefs.getStringPref(
           "mail.last_msg_movecopy_target_uri"
         );
         if (!targetURI) {
           return false;
         }
         let targetFolder = MailUtils.getExistingFolder(targetURI);
         // If null, folder doesn't exist.
         return targetFolder !== null && gFolderDisplay.selectedCount > 0;
@@ -1094,17 +1094,17 @@ var DefaultController = {
       case "cmd_synchronizeOffline":
         MsgSynchronizeOffline();
         break;
       case "cmd_settingsOffline":
         MailOfflineMgr.openOfflineAccountSettings();
         break;
       case "cmd_moveToFolderAgain":
         var folder = MailUtils.getOrCreateFolder(
-          Services.prefs.getCharPref("mail.last_msg_movecopy_target_uri")
+          Services.prefs.getStringPref("mail.last_msg_movecopy_target_uri")
         );
         if (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move")) {
           MsgMoveMessage(folder);
         } else {
           MsgCopyMessage(folder);
         }
         break;
       case "cmd_selectAll":
diff --git a/mail/base/content/mailContext.js b/mail/base/content/mailContext.js
--- a/mail/base/content/mailContext.js
+++ b/mail/base/content/mailContext.js
@@ -682,33 +682,33 @@ var mailContextMenu = {
    * @param destFolder  the destination folder
    */
   moveMessage(destFolder) {
     // gFolderDisplay.hintAboutToDeleteMessages();
     gViewWrapper.dbView.doCommandWithFolder(
       Ci.nsMsgViewCommandType.moveMessages,
       destFolder
     );
-    Services.prefs.setCharPref(
+    Services.prefs.setStringPref(
       "mail.last_msg_movecopy_target_uri",
       destFolder.URI
     );
     Services.prefs.setBoolPref("mail.last_msg_movecopy_was_move", true);
   },
 
   /**
    * Copies the selected messages to the destination folder
    * @param destFolder  the destination folder
    */
   copyMessage(destFolder) {
     gViewWrapper.dbView.doCommandWithFolder(
       Ci.nsMsgViewCommandType.copyMessages,
       destFolder
     );
-    Services.prefs.setCharPref(
+    Services.prefs.setStringPref(
       "mail.last_msg_movecopy_target_uri",
       destFolder.URI
     );
     Services.prefs.setBoolPref("mail.last_msg_movecopy_was_move", false);
   },
 };
 
 var commandController = {
@@ -815,17 +815,17 @@ var commandController = {
       // TODO
     },
     cmd_archive() {
       let archiver = new LazyModules.MessageArchiver();
       archiver.archiveMessages(gViewWrapper.dbView.getSelectedMsgHdrs());
     },
     cmd_moveToFolderAgain() {
       let folder = LazyModules.MailUtils.getOrCreateFolder(
-        Services.prefs.getCharPref("mail.last_msg_movecopy_target_uri")
+        Services.prefs.getStringPref("mail.last_msg_movecopy_target_uri")
       );
       if (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move")) {
         mailContextMenu.moveMessage(folder);
       } else {
         mailContextMenu.copyMessage(folder);
       }
     },
     cmd_delete() {
@@ -972,17 +972,17 @@ var commandController = {
       case "cmd_moveToFolderAgain": {
         // Disable "Move to <folder> Again" for news and other read only
         // folders since we can't really move messages from there - only copy.
         let canMoveAgain = numSelectedMessages >= 1;
         if (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move")) {
           canMoveAgain = canMove;
         }
         if (canMoveAgain) {
-          let targetURI = Services.prefs.getCharPref(
+          let targetURI = Services.prefs.getStringPref(
             "mail.last_msg_movecopy_target_uri"
           );
           canMoveAgain =
             targetURI && LazyModules.MailUtils.getExistingFolder(targetURI);
         }
         return canMoveAgain;
       }
       case "cmd_delete":
diff --git a/mail/base/content/mailWindowOverlay.js b/mail/base/content/mailWindowOverlay.js
--- a/mail/base/content/mailWindowOverlay.js
+++ b/mail/base/content/mailWindowOverlay.js
@@ -1018,17 +1018,17 @@ function showCommandInSpecialFolder(aCom
 /**
  * Initializes the menu item aMenuItem to show either "Move" or "Copy" to
  * folder again, based on the value of mail.last_msg_movecopy_target_uri.
  * The menu item label and accesskey are adjusted to include the folder name.
  *
  * @param aMenuItem the menu item to adjust
  */
 function initMoveToFolderAgainMenu(aMenuItem) {
-  let lastFolderURI = Services.prefs.getCharPref(
+  let lastFolderURI = Services.prefs.getStringPref(
     "mail.last_msg_movecopy_target_uri"
   );
 
   if (!lastFolderURI) {
     return;
   }
   let destMsgFolder = MailUtils.getExistingFolder(lastFolderURI);
   if (!destMsgFolder) {
@@ -2183,34 +2183,34 @@ function MsgCopyMessage(aDestFolder) {
     );
   } else {
     gDBView.doCommandWithFolder(
       Ci.nsMsgViewCommandType.copyMessages,
       aDestFolder
     );
   }
 
-  Services.prefs.setCharPref(
+  Services.prefs.setStringPref(
     "mail.last_msg_movecopy_target_uri",
     aDestFolder.URI
   );
   Services.prefs.setBoolPref("mail.last_msg_movecopy_was_move", false);
 }
 
 /**
  * Moves the selected messages to the destination folder
  * @param aDestFolder  the destination folder
  */
 function MsgMoveMessage(aDestFolder) {
   gFolderDisplay.hintAboutToDeleteMessages();
   gDBView.doCommandWithFolder(
     Ci.nsMsgViewCommandType.moveMessages,
     aDestFolder
   );
-  Services.prefs.setCharPref(
+  Services.prefs.setStringPref(
     "mail.last_msg_movecopy_target_uri",
     aDestFolder.URI
   );
   Services.prefs.setBoolPref("mail.last_msg_movecopy_was_move", true);
 }
 
 function OpenContainingFolder() {
   MailUtils.displayMessageInFolderTab(gMessageDisplay.displayedMessage);
diff --git a/mail/base/content/messageWindow.js b/mail/base/content/messageWindow.js
--- a/mail/base/content/messageWindow.js
+++ b/mail/base/content/messageWindow.js
@@ -1243,17 +1243,17 @@ var MessageWindowController = {
         loadedFolder = gFolderDisplay.displayedFolder;
         if (
           !loadedFolder ||
           (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move") &&
             !loadedFolder.canDeleteMessages)
         ) {
           return false;
         }
-        let targetURI = Services.prefs.getCharPref(
+        let targetURI = Services.prefs.getStringPref(
           "mail.last_msg_movecopy_target_uri"
         );
         if (!targetURI) {
           return false;
         }
         let targetFolder = MailUtils.getExistingFolder(targetURI);
         // If null, folder doesn't exist.
         return targetFolder !== null;
@@ -1333,17 +1333,17 @@ var MessageWindowController = {
       case "cmd_newMsgFromTemplate":
         MsgNewMessageFromTemplate(null);
         break;
       case "cmd_editTemplateMsg":
         MsgEditTemplateMessage(null);
         break;
       case "cmd_moveToFolderAgain":
         var folder = MailUtils.getOrCreateFolder(
-          Services.prefs.getCharPref("mail.last_msg_movecopy_target_uri")
+          Services.prefs.getStringPref("mail.last_msg_movecopy_target_uri")
         );
         if (Services.prefs.getBoolPref("mail.last_msg_movecopy_was_move")) {
           MsgMoveMessage(folder);
         } else {
           MsgCopyMessage(folder);
         }
         break;
       case "cmd_createFilterFromPopup":
diff --git a/mail/components/search/SearchIntegration.jsm b/mail/components/search/SearchIntegration.jsm
--- a/mail/components/search/SearchIntegration.jsm
+++ b/mail/components/search/SearchIntegration.jsm
@@ -32,23 +32,23 @@ var PERM_FILE = 0o644;
 var SearchIntegration = null;
 
 var SearchSupport = {
   /**
    * URI of last folder indexed. Kept in sync with the pref
    */
   __lastFolderIndexedUri: null,
   set _lastFolderIndexedUri(uri) {
-    this._prefBranch.setCharPref("lastFolderIndexedUri", uri);
+    this._prefBranch.setStringPref("lastFolderIndexedUri", uri);
     this.__lastFolderIndexedUri = uri;
   },
   get _lastFolderIndexedUri() {
     // If we don't know about it, get it from the pref branch
     if (this.__lastFolderIndexedUri === null) {
-      this.__lastFolderIndexedUri = this._prefBranch.getCharPref(
+      this.__lastFolderIndexedUri = this._prefBranch.getStringPref(
         "lastFolderIndexedUri",
         ""
       );
     }
     return this.__lastFolderIndexedUri;
   },
 
   /**
