# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1679303253 -3600
# Parent  8ca345a8ade5d8e4cdbbcf722c927a37145ad7ab
Feature: Multi-line tree follow-up: Allow "group by sort" again.

diff --git a/mail/base/content/mailWindowOverlay.js b/mail/base/content/mailWindowOverlay.js
--- a/mail/base/content/mailWindowOverlay.js
+++ b/mail/base/content/mailWindowOverlay.js
@@ -656,17 +656,16 @@ function InitViewSortByMenu() {
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
 
   if (
     gFolderDisplay.view.dbView
       .QueryInterface(Ci.nsIMultilineTreeView)
       .isMultiline()
   ) {
-    groupBySortOrderMenuItem.setAttribute("disabled", true);
     sortThreadedMenuItem.setAttribute("disabled", true);
   } else {
     sortThreadedMenuItem.removeAttribute("disabled");
   }
 }
 
 function InitAppViewSortByMenu() {
   let sortType, sortOrder, grouped, threaded;
@@ -764,17 +763,16 @@ function InitAppViewSortByMenu() {
   groupBySortOrderMenuItem.setAttribute("disabled", !sortTypeSupportsGrouping);
   groupBySortOrderMenuItem.setAttribute("checked", grouped);
 
   if (
     gFolderDisplay.view.dbView
       .QueryInterface(Ci.nsIMultilineTreeView)
       .isMultiline()
   ) {
-    groupBySortOrderMenuItem.setAttribute("disabled", true);
     sortThreadedMenuItem.setAttribute("disabled", true);
   } else {
     sortThreadedMenuItem.removeAttribute("disabled");
   }
 }
 
 function isSortTypeValidForGrouping(sortType) {
   return Boolean(
diff --git a/mail/base/content/threadPane.js b/mail/base/content/threadPane.js
--- a/mail/base/content/threadPane.js
+++ b/mail/base/content/threadPane.js
@@ -411,16 +411,17 @@ function MsgSortDescending() {
 
 // XXX this should probably migrate into FolderDisplayWidget, or whatever
 //  FolderDisplayWidget ends up using if it refactors column management out.
 function UpdateSortIndicators(sortType, sortOrder) {
   // Remove the sort indicator from all the columns
   let treeColumns = document.getElementById("threadCols").children;
   for (let i = 0; i < treeColumns.length; i++) {
     treeColumns[i].removeAttribute("sortDirection");
+    treeColumns[i].removeAttribute("primary");
   }
 
   // show the twisties if the view is threaded
   let threadCol = document.getElementById("threadCol");
   let subjectCol = document.getElementById("subjectCol");
   let sortedColumn;
   // set the sort indicator on the column we are sorted by
   let colID = ConvertSortTypeToColumnID(sortType);
@@ -428,21 +429,29 @@ function UpdateSortIndicators(sortType, 
     sortedColumn = document.getElementById(colID);
   }
 
   let viewWrapper = gFolderDisplay.view;
 
   // the thread column is not visible when we are grouped by sort
   threadCol.collapsed = viewWrapper.showGroupedBySort;
 
-  // show twisties only when grouping or threading
-  if (viewWrapper.showGroupedBySort || viewWrapper.showThreaded) {
-    subjectCol.setAttribute("primary", "true");
+  if (
+    viewWrapper.dbView.QueryInterface(Ci.nsIMultilineTreeView).isMultiline()
+  ) {
+    // For multi-line views there is no subject column, so we show
+    // the twisties on the column that we sort by.
+    if (sortedColumn && viewWrapper.showGroupedBySort) {
+      sortedColumn.setAttribute("primary", "true");
+    }
   } else {
-    subjectCol.removeAttribute("primary");
+    // show twisties only when grouping or threading
+    if (viewWrapper.showGroupedBySort || viewWrapper.showThreaded) {
+      subjectCol.setAttribute("primary", "true");
+    }
   }
 
   if (sortedColumn) {
     sortedColumn.setAttribute(
       "sortDirection",
       sortOrder == Ci.nsMsgViewSortOrder.ascending ? "ascending" : "descending"
     );
   }
diff --git a/mail/themes/linux/mail/messageIcons.css b/mail/themes/linux/mail/messageIcons.css
--- a/mail/themes/linux/mail/messageIcons.css
+++ b/mail/themes/linux/mail/messageIcons.css
@@ -33,25 +33,43 @@ treechildren::-moz-tree-image(junkStatus
 }
 
 /* ..... correspondent column ..... */
 
 #correspondentCol {
   padding-inline-start: 17px;
 }
 
+#correspondentCol[primary="true"] {
+  padding-inline-start: 37px;
+}
+
 /* ..... subject column ..... */
 
 #subjectCol {
   padding-inline-start: 15px;
 }
 
 #subjectCol[primary="true"] {
   padding-inline-start: 35px;
 }
 
 treechildren::-moz-tree-image(subjectCol) {
   margin-inline-end: 2px;
 }
 
+/* ..... 12 more colums which can be primary as well ..... */
+#accountCol[primary="true"] { padding-inline-start: 20px; }
+#attachmentCol[primary="true"] { padding-inline-start: 20px; }
+#senderCol[primary="true"] { padding-inline-start: 20px; }
+#dateCol[primary="true"] { padding-inline-start: 20px; }
+#flaggedCol[primary="true"] { padding-inline-start: 20px; }
+#locationCol[primary="true"] { padding-inline-start: 20px; }
+#priorityCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#statusCol[primary="true"] { padding-inline-start: 20px; }
+#tagsCol[primary="true"] { padding-inline-start: 20px; }
+#customSortCol[primary="true"] { padding-inline-start: 20px; }
+
 :root[uidensity="compact"] treechildren::-moz-tree-image {
   margin-block-start: -1px;
 }
diff --git a/mail/themes/osx/mail/messageIcons.css b/mail/themes/osx/mail/messageIcons.css
--- a/mail/themes/osx/mail/messageIcons.css
+++ b/mail/themes/osx/mail/messageIcons.css
@@ -54,17 +54,35 @@ treechildren::-moz-tree-image(junkStatus
 }
 
 /* ..... correspondent column ..... */
 
 #correspondentCol {
   padding-inline-start: 20px;
 }
 
+#correspondentCol[primary="true"] {
+  padding-inline-start: 40px;
+}
+
 /* ..... subject column ..... */
 
 #subjectCol {
   padding-inline-start: 20px;
 }
 
 #subjectCol[primary="true"] {
   padding-inline-start: 40px;
 }
+
+/* ..... 12 more colums which can be primary as well ..... */
+#accountCol[primary="true"] { padding-inline-start: 20px; }
+#attachmentCol[primary="true"] { padding-inline-start: 20px; }
+#senderCol[primary="true"] { padding-inline-start: 20px; }
+#dateCol[primary="true"] { padding-inline-start: 20px; }
+#flaggedCol[primary="true"] { padding-inline-start: 20px; }
+#locationCol[primary="true"] { padding-inline-start: 20px; }
+#priorityCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#statusCol[primary="true"] { padding-inline-start: 20px; }
+#tagsCol[primary="true"] { padding-inline-start: 20px; }
+#customSortCol[primary="true"] { padding-inline-start: 20px; }
diff --git a/mail/themes/windows/mail/messageIcons.css b/mail/themes/windows/mail/messageIcons.css
--- a/mail/themes/windows/mail/messageIcons.css
+++ b/mail/themes/windows/mail/messageIcons.css
@@ -21,16 +21,30 @@
 #subjectCol {
   padding-inline-start: 20px;
 }
 
 #subjectCol[primary="true"] {
   padding-inline-start: 40px;
 }
 
+/* ..... 12 more colums which can be primary as well ..... */
+#accountCol[primary="true"] { padding-inline-start: 20px; }
+#attachmentCol[primary="true"] { padding-inline-start: 20px; }
+#senderCol[primary="true"] { padding-inline-start: 20px; }
+#dateCol[primary="true"] { padding-inline-start: 20px; }
+#flaggedCol[primary="true"] { padding-inline-start: 20px; }
+#locationCol[primary="true"] { padding-inline-start: 20px; }
+#priorityCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#receivedCol[primary="true"] { padding-inline-start: 20px; }
+#statusCol[primary="true"] { padding-inline-start: 20px; }
+#tagsCol[primary="true"] { padding-inline-start: 20px; }
+#customSortCol[primary="true"] { padding-inline-start: 20px; }
+
 /* ..... attachment column ..... */
 
 treechildren::-moz-tree-image(attachmentCol) {
   margin-inline-start: 1px;
 }
 
 /* ..... junkStatus column ..... */
 
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -2206,76 +2206,139 @@ nsMsgDBView::GetColspanTextProperties(in
       break;
     }
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::IsMultiline(bool* isMulti) {
+  nsTreeColumn* col;
+  RefPtr<mozilla::dom::Element> el;
+  mozilla::IgnoredErrorResult rv1;
+  RefPtr<nsTreeColumns> cols;
+  if (mTree) cols = mTree->GetColumns();
+
   *isMulti =
       mozilla::Preferences::GetBool("mail.pane_config.multiline_all", false);
   if (*isMulti) {
+    if (!cols) return NS_OK;
     mIsMultiline = true;
-    if (mTree) {
-      RefPtr<nsTreeColumns> cols = mTree->GetColumns();
-      if (cols) {
-        nsTreeColumn* col;
-        for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
-          const nsAString& colID = col->GetId();
-          if (colID.EqualsLiteral("subjectCol")) {
-            RefPtr<mozilla::dom::Element> el = col->Element();
-            mozilla::IgnoredErrorResult rv1;
-            el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
-            break;
-          }
-        }
+    for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+      const nsAString& colID = col->GetId();
+      if (colID.EqualsLiteral("subjectCol")) {
+        el = col->Element();
+        el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
+        break;
       }
     }
   } else {
     // Whether we are multiline or not depends on the visibility of the Subject
     // column.
     *isMulti = mIsMultiline;
     // This should not happen since the tree is set before calling
     // IsMultiline().
-    if (!mTree) return NS_OK;
-    RefPtr<nsTreeColumns> cols = mTree->GetColumns();
     if (!cols) return NS_OK;
 
     // There are strange cases where we find no columns here, in this case
     // we use the previous result.
-    nsTreeColumn* col;
     for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
       const nsAString& colID = col->GetId();
       if (colID.EqualsLiteral("subjectCol")) {
-        RefPtr<mozilla::dom::Element> el = col->Element();
+        el = col->Element();
         nsAutoString val;
         el->GetAttribute(u"hidden"_ns, val);
         mIsMultiline = val.EqualsLiteral("true");
         break;
       }
     }
   }
 
   if (mIsMultiline) {
-    // Hide thread column, remove "primary" attribute and switch
-    // threading/grouping off.
-    nsCOMPtr<nsIMsgWindow> msgWindow(do_QueryReferent(mMsgWindowWeak));
-    nsCOMPtr<nsIDocShell> rootShell;
-    nsresult rv = msgWindow->GetRootDocShell(getter_AddRefs(rootShell));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    mozilla::IgnoredErrorResult rv1;
-    RefPtr<mozilla::dom::Element> el =
-        rootShell->GetDocument()->GetElementById(u"threadCol"_ns);
-    if (el) el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
-    el = rootShell->GetDocument()->GetElementById(u"subjectCol"_ns);
-    if (el) el->RemoveAttribute(u"primary"_ns, rv1);
-    m_viewFlags &= ~(nsMsgViewFlagsType::kGroupBySort |
-                     nsMsgViewFlagsType::kThreadedDisplay);
+    // Hide thread column, remove/move primary attribute and switch
+    // threading off.
+    for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+      const nsAString& colID = col->GetId();
+      el = col->Element();
+      if (colID.EqualsLiteral("threadCol")) {
+        el->SetAttribute(u"hidden"_ns, u"true"_ns, rv1);
+      } else if (colID.EqualsLiteral("subjectCol")) {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+      }
+      if (m_viewFlags & nsMsgViewFlagsType::kGroupBySort) {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+        // Move the primary attribure onto the sort column.
+        // 14 valid sort types for "group by sort" from
+        // isSortTypeValidForGrouping().
+        bool set = false;
+        switch (m_sortType) {
+          case nsMsgViewSortType::byAccount:
+            if (colID.EqualsLiteral("accountCol")) set = true;
+            break;
+          case nsMsgViewSortType::byAttachments:
+            if (colID.EqualsLiteral("attachmentCol")) set = true;
+            break;
+          case nsMsgViewSortType::byAuthor:
+            if (colID.EqualsLiteral("senderCol")) set = true;
+            break;
+          case nsMsgViewSortType::byCorrespondent:
+            if (colID.EqualsLiteral("correspondentCol")) set = true;
+            break;
+          case nsMsgViewSortType::byDate:
+            if (colID.EqualsLiteral("dateCol")) set = true;
+            break;
+          case nsMsgViewSortType::byFlagged:
+            if (colID.EqualsLiteral("flaggedCol")) set = true;
+            break;
+          case nsMsgViewSortType::byLocation:
+            if (colID.EqualsLiteral("locationCol")) set = true;
+            break;
+          case nsMsgViewSortType::byPriority:
+            if (colID.EqualsLiteral("priorityCol")) set = true;
+            break;
+          case nsMsgViewSortType::byReceived:
+            if (colID.EqualsLiteral("receivedCol")) set = true;
+            break;
+          case nsMsgViewSortType::byRecipient:
+            if (colID.EqualsLiteral("recipientCol")) set = true;
+            break;
+          case nsMsgViewSortType::byStatus:
+            if (colID.EqualsLiteral("statusCol")) set = true;
+            break;
+          case nsMsgViewSortType::bySubject:
+            if (colID.EqualsLiteral("subjectCol")) set = true;
+            break;
+          case nsMsgViewSortType::byTags:
+            if (colID.EqualsLiteral("tagsCol")) set = true;
+            break;
+          case nsMsgViewSortType::byCustom:
+            if (colID.EqualsLiteral("customSortCol")) set = true;
+            break;
+          default:
+            break;
+        }
+        if (set) el->SetAttribute(u"primary"_ns, u"true"_ns, rv1);
+      }
+    }
+    if (!(m_viewFlags & nsMsgViewFlagsType::kGroupBySort)) {
+      // Switch off pure threading.
+      m_viewFlags &= ~nsMsgViewFlagsType::kThreadedDisplay;
+    }
+  } else if (m_viewFlags & nsMsgViewFlagsType::kGroupBySort) {
+    // Put the primary attribute back onto the subject column
+    // and remove it elsewhere.
+    for (col = cols->GetFirstColumn(); col; col = col->GetNext()) {
+      const nsAString& colID = col->GetId();
+      el = col->Element();
+      if (colID.EqualsLiteral("subjectCol")) {
+        el->SetAttribute(u"primary"_ns, u"true"_ns, rv1);
+      } else {
+        el->RemoveAttribute(u"primary"_ns, rv1);
+      }
+    }
   }
   *isMulti = mIsMultiline;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::AlignWith(int32_t row, nsTreeColumn* col, bool* alignWith) {
   if (!IsValidIndex(row)) {
@@ -2289,19 +2352,19 @@ nsMsgDBView::AlignWith(int32_t row, nsTr
       colID.EqualsLiteral("dateCol") || colID.EqualsLiteral("receivedCol") ||
       colID.EqualsLiteral("betweenCol"))  // used by "Conversations" add-on
     *alignWith = true;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsMsgDBView::IsColspanCol(nsTreeColumn* col, bool* isImageCol) {
+nsMsgDBView::IsColspanCol(nsTreeColumn* col, bool* isColspanCol) {
   const nsAString& colID = col->GetId();
-  *isImageCol = colID.EqualsLiteral("subjectCol") ? true : false;
+  *isColspanCol = colID.EqualsLiteral("subjectCol") ? true : false;
   return NS_OK;
 }
 
 ///////////////////////////////////////////////////////////////////////////
 // end nsIMultilineTreeView Implementation Methods
 ///////////////////////////////////////////////////////////////////////////
 
 NS_IMETHODIMP
