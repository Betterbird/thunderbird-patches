# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1676065385 -3600
# Parent  a39bd6edbe5a7e9355b5317d5c93179185e3b15d
Feature: Allow short date entry. Code adapted from submission of Lutz Kutscher <kutscher@tailorsoft.de>

diff --git a/calendar/base/content/widgets/datetimepickers.js b/calendar/base/content/widgets/datetimepickers.js
--- a/calendar/base/content/widgets/datetimepickers.js
+++ b/calendar/base/content/widgets/datetimepickers.js
@@ -1205,19 +1205,97 @@
         if (time != null) {
           hours = time.getHours();
           minutes = time.getMinutes();
           seconds = time.getSeconds();
         }
       }
       tempDate = new Date(year, month, day, hours, minutes, seconds, 0);
     } // else did not match regex, not a valid date
+    else if (/^\d{1,8}$/.test(aValue.length)) {
+      // Let's do shortened date entry if we have 1 to 8 digits.
+      // First, let's figure out whether we have DDMM or MMDD format.
+      // We see whether we get 22/11/2000 or 11/22/2000.
+      let test = new Services.intl.DateTimeFormat(undefined, {
+        year: "numeric",
+        month: "numeric",
+        day: "numeric",
+      }).format(new Date(2000, 10, 22));
+      let DDMM = test.indexOf("22") < test.indexOf("11");
+
+      // Create a new date, initialised to `now`.
+      tempDate = new Date();
+
+      if (aValue.length <= 2) {
+        // Set only day.
+        let maxDay = getMaxDay(tempDate.getFullYear(), tempDate.getMonth() + 1);
+        tempDate.setDate(Math.min(aValue, maxDay));
+      } else if (aValue.length <= 4) {
+        // Set day and month.
+        setDateMonth(DDMM, tempDate.getFullYear(), aValue, tempDate);
+      } else if (aValue.length <= 6) {
+        // Two digit year, figure out what year it means.
+        // If more than 30 years into the future, use last century.
+        // If more than 69 years into the past, use next century.
+        let currentYear = tempDate.getFullYear();
+        let currentCentury = currentYear - (currentYear % 100);
+        let year = currentCentury + parseInt(aValue.substring(4));
+        if (year < currentYear - 69) {
+          year += 100;
+        }
+        if (year > currentYear + 30) {
+          year -= 100;
+        }
+        tempDate.setFullYear(year);
+        setDateMonth(DDMM, year, aValue, tempDate);
+      } else {
+        // More than 6 digits: assume 4 digit year.
+        let year = parseInt(aValue.substring(4));
+        tempDate.setFullYear(year);
+        setDateMonth(DDMM, year, aValue, tempDate);
+      }
+    }
     return tempDate;
   }
 
+  function getMaxDay(year, month) {
+    if (month == 2) {
+      if (year % 4 != 0) {
+        return 28;
+      } else if (year % 100 == 0 && year % 400 != 0) {
+        return 28;
+      }
+      return 29;
+    } else if ([4, 6, 9, 11].includes(month)) {
+      return 30;
+    }
+    return 31;
+  }
+
+  function setDateMonth(DDMM, year, value, tempDate) {
+    let month;
+    if (DDMM) {
+      month = Math.min(parseInt(value.substring(2, 4)), 12);
+    } else {
+      month = Math.min(parseInt(value.substring(0, 2)), 12);
+    }
+    if (month == 0) {
+      month = 1;
+    }
+
+    // Always set month first to avoid errors like February 31.
+    tempDate.setMonth(month - 1);
+    let maxDay = getMaxDay(year, month);
+    if (DDMM) {
+      tempDate.setDate(Math.min(value.substring(0, 2), maxDay));
+    } else {
+      tempDate.setDate(Math.min(value.substring(2, 4), maxDay));
+    }
+  }
+
   /**
    * Parse a variety of time formats so that cut and paste is likely to work.
    * separator:            ':'         '.'        ' '        symbol        none
    *                       "12:34:56"  "12.34.56" "12 34 56" "12h34m56s"   "123456"
    * seconds optional:     "02:34"     "02.34"    "02 34"    "02h34m"      "0234"
    * minutes optional:     "12"        "12"       "12"       "12h"         "12"
    * 1st hr digit optional:"9:34"      " 9.34"     "9 34"     "9H34M"       "934am"
    * skip nondigit prefix  " 12:34"    "t12.34"   " 12 34"   "T12H34M"     "T0234"
