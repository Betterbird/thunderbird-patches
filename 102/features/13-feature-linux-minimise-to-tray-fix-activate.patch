# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1693170533 -10800
# Parent  6f4fead8a7911aa8cf664cbb89124c21d476227e
Feature: Minimise to tray for Linux: Fix activation of window.

diff --git a/mailnews/base/src/nsMessengerUnixIntegration.cpp b/mailnews/base/src/nsMessengerUnixIntegration.cpp
--- a/mailnews/base/src/nsMessengerUnixIntegration.cpp
+++ b/mailnews/base/src/nsMessengerUnixIntegration.cpp
@@ -7,16 +7,17 @@
 #include "nsServiceManagerUtils.h"
 #include "nsCOMPtr.h"
 #include "nsCOMArray.h"
 #include "nsString.h"
 #include "../../../third_party/appindicator/app-indicator.h"
 #include "mozilla/Preferences.h"
 #include "mozIDOMWindow.h"
 #include "nsIBaseWindow.h"
+#include "nsIDocShell.h"
 #include "nsIPrefService.h"
 #include "nsIWidget.h"
 #include "mozilla/WidgetUtilsGtk.h"
 #include "nsIWindowMediator.h"
 #include "nsPIDOMWindow.h"
 #include <time.h>
 
 #define SHOW_TRAY_ICON_PREF "mail.biff.show_tray_icon"
@@ -44,18 +45,77 @@ NS_IMPL_RELEASE(nsMessengerUnixIntegrati
 
 NS_INTERFACE_MAP_BEGIN(nsMessengerUnixIntegration)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIMessengerOSIntegration)
   NS_INTERFACE_MAP_ENTRY(nsIMessengerUnixIntegration)
   NS_INTERFACE_MAP_ENTRY(nsIMessengerOSIntegration)
 NS_INTERFACE_MAP_END
 
 static void activateWindow(mozIDOMWindowProxy* win) {
-  nsCOMPtr<nsPIDOMWindowOuter> privateWindow = nsPIDOMWindowOuter::From(win);
-  privateWindow->Focus(mozilla::dom::CallerType::System);
+  nsCOMPtr<nsPIDOMWindowOuter> domWindow = nsPIDOMWindowOuter::From(win);
+  nsCOMPtr<nsIBaseWindow> baseWindow =
+      do_QueryInterface(domWindow->GetDocShell());
+  if (!baseWindow) {
+    domWindow->Focus(mozilla::dom::CallerType::System);
+    fprintf(stderr, "Betterbird: Activating window via Focus() only (1)\n");
+    return;
+  }
+  // Getting the visibility doesn't work, even hidden windows are visible :-(
+  baseWindow->SetVisibility(true);
+
+  nsCOMPtr<nsIWidget> widget;
+  baseWindow->GetMainWidget(getter_AddRefs(widget));
+  if (!widget) {
+    fprintf(stderr, "Betterbird: Activating window via Focus() only (2)\n");
+    return;
+  }
+
+  // Raise the window, no good if it appears in the background.
+  // KDE works with just the `SetFocus()`, `gtk_window_present` was added for Gnome.
+  void* gtkWidget = widget->GetNativeData(NS_NATIVE_SHELLWIDGET);
+  if (gtkWidget) gtk_window_present(GTK_WINDOW(gtkWidget));
+  widget->SetFocus(nsIWidget::Raise::Yes, mozilla::dom::CallerType::System);
+
+  // Now move the window to where it was. We need to find it first in the
+  // list of windows.
+  if (!gtkWidget) {
+    fprintf(stderr, "Betterbird: Activating window via Focus() only (3)\n");
+    return;
+  }
+  for (uint32_t i = 0; i < sHiddenWindows.Length(); i++) {
+    auto window = sHiddenWindows.SafeElementAt(i);
+    if (!window) {
+      continue;
+    }
+    nsCOMPtr<nsIWidget> w;
+    window->GetMainWidget(getter_AddRefs(w));
+    if (widget == w) {
+      WinDims dims = sHiddenWindowsDims[i];
+      // The following isn't working well, so use native calls.
+      // Last parameter: Bits: eRepaint = 1; eDelayResize = 2;
+      // window->SetPositionAndSize(dims.x, dims.y, dims.w, dims.h, 1);
+      gtk_window_move(GTK_WINDOW(gtkWidget), dims.x, dims.y);
+      gtk_window_resize(GTK_WINDOW(gtkWidget), dims.w, dims.h);
+// #define DEBUG_RESTORE 1
+#ifdef DEBUG_RESTORE
+      fprintf(stderr, "=== Trying to restore to %d %d %d %d\n", dims.x, dims.y, dims.w, dims.h);
+      // window->GetPositionAndSize(&dims.x, &dims.y, &dims.w, &dims.h);
+      gtk_window_get_position(GTK_WINDOW(gtkWidget), &dims.x, &dims.y);
+      gtk_window_get_size(GTK_WINDOW(gtkWidget), &dims.w, &dims.h);
+      fprintf(stderr, "=== was restored to      %d %d %d %d\n", dims.x, dims.y, dims.w, dims.h);
+#endif
+      sHiddenWindows.RemoveElementAt(i);
+      sHiddenWindowsDims.RemoveElementAt(i);
+      break;
+    }
+  }
+
+  // Strangely we get "sizemodechange" event with STATE_MINIMIZED,
+  // so we ignore that for some milliseconds.
+  clock_gettime(CLOCK_MONOTONIC, &sTimeActivated);
 }
 
 static void activated(AppIndicator* self, gint x, gint y, gpointer data) {
   nsresult rv;
   bool showTrayIcon = mozilla::Preferences::GetBool(SHOW_TRAY_ICON_PREF, false);
   bool showTrayIconAlways = mozilla::Preferences::GetBool(SHOW_TRAY_ICON_ALWAYS_PREF, false);
   if ((!showTrayIcon || !sLastUnreadCount) && !showTrayIconAlways) {
     if (ci) {
