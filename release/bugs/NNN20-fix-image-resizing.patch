# HG changeset patch
# User alta88@fixall.com
# Date 1737433340 25200
# Parent  60907fcbed420e9dfdb55c89521f602bc2331acd
NNN20 - Fix image resizing regressions.

diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -59,17 +59,19 @@ async function messagePaneOnResize() {
   if (doc?.URL.startsWith("http") || !doc?.images) {
     return;
   }
 
-  const availableWidth = Math.max(
-    document.body.scrollWidth,
-    window.visualViewport.width
+  const availableWidth = Math.floor(
+    Math.max(document.body.scrollWidth, window.visualViewport.width)
   );
 
   const adjustImg = img => {
     if (img.hasAttribute("shrinktofit")) {
       // overflowing: Whether the image is overflowing visible area.
-      img.toggleAttribute("overflowing", img.naturalWidth > img.clientWidth);
+      const isOverflowing =
+        img.naturalWidth >= img.clientWidth &&
+        img.naturalWidth >= availableWidth;
+      img.toggleAttribute("overflowing", isOverflowing);
     } else if (img.hasAttribute("overflowing")) {
       const isOverflowing = img.clientWidth >= availableWidth;
       img.toggleAttribute("overflowing", isOverflowing);
       img.toggleAttribute("shrinktofit", !isOverflowing);
@@ -78,11 +80,8 @@ async function messagePaneOnResize() {
 
   for (const img of doc.querySelectorAll(
     "img:is([shrinktofit],[overflowing])"
   )) {
-    if (img.closest("[href]")) {
-      continue;
-    }
     if (!img.complete) {
       img.addEventListener("load", event => adjustImg(event.target), {
         once: true,
       });
diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -1028,16 +1028,25 @@ var messageProgressListener = {
     }
 
     // Scale any overflowing images, exclude http content.
     if (!browser.contentDocument.URL.startsWith("http")) {
+      const availableWidth = Math.floor(
+        Math.max(document.body.scrollWidth, window.visualViewport.width)
+      );
       const adjustImg = img => {
-        img.toggleAttribute("overflowing", img.naturalWidth > img.clientWidth);
+        // An image is overflowing iff its naturalWidth is larger than the
+        // messagepane viewport AND its naturalWidth (unconstrained) is greater
+        // than its displayed width. The naturalWidth should always be available
+        // due to load complete state. Also in messagePaneOnResize().
+        const isOverflowing =
+          img.naturalWidth >= img.clientWidth &&
+          img.naturalWidth >= availableWidth;
+        img.toggleAttribute("overflowing", isOverflowing);
       };
       for (const img of browser.contentDocument.images) {
-        // No zooming for children of clickable links.
-        if (img.closest("[href]")) {
-          continue;
-        }
+        // Any overflowing image must be click zoomable. An overflowing link
+        // image will have the url displayed on hover and can be opened via
+        // contextmenu.
         img.toggleAttribute("shrinktofit", true);
         if (!img.complete) {
           img.addEventListener("load", event => adjustImg(event.target), {
             once: true,
