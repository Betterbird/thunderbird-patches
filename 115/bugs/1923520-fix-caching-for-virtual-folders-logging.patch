# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1732128753 -3600
# Parent  ccd37871162a6b46c9279bb8e2b75d1c824bec83
Add pref mailnews.virtual_folders.verbose to log caching actions for virtual folders.

diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.cpp b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
--- a/mailnews/base/src/nsMsgQuickSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
@@ -16,9 +16,11 @@
 #include "nsIMsgSearchTerm.h"
 
 /* for logging to Error Console */
 #include "nsIScriptError.h"
+#include "nsPrintfCString.h"
 #include "nsMsgUtils.h"
+#include "mozilla/Preferences.h"
 
 nsMsgQuickSearchDBView::nsMsgQuickSearchDBView() {
   m_usingCachedHits = false;
   m_cacheEmpty = true;
@@ -309,8 +311,10 @@ nsMsgQuickSearchDBView::OnSearchDone(nsr
       m_viewFolder != m_folder && status != NS_MSG_SEARCH_INTERRUPTED) {
     nsTArray<nsMsgKey> keyArray;
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
+    nsCString baseURI;
+    m_folder->GetURI(baseURI);
     uint32_t count = m_hdrHits.Count();
     // Build up message keys. The cache expects them to be sorted.
     for (uint32_t i = 0; i < count; i++) {
       nsMsgKey key;
@@ -320,8 +324,20 @@ nsMsgQuickSearchDBView::OnSearchDone(nsr
     keyArray.Sort();
     nsTArray<nsMsgKey> staleHits;
     nsresult rv = m_db->RefreshCache(searchUri, keyArray, staleHits);
     NS_ENSURE_SUCCESS(rv, rv);
+
+    if (mozilla::Preferences::GetBool("mailnews.virtual_folders.verbose",
+                                      false)) {
+      nsCString msg = nsPrintfCString(
+          "Search folder %s: Cache for %s populated with new hits: %" PRIu64
+          ", removed: %" PRIu64,
+          searchUri.get(), baseURI.get(), keyArray.Length(),
+          staleHits.Length());
+      MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                       NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                       nsIScriptError::infoFlag);
+    }
     for (nsMsgKey staleKey : staleHits) {
       nsCOMPtr<nsIMsgDBHdr> hdrDeleted;
       m_db->GetMsgHdrForKey(staleKey, getter_AddRefs(hdrDeleted));
       if (hdrDeleted) OnHdrDeleted(hdrDeleted, nsMsgKey_None, 0, this);
@@ -375,8 +391,10 @@ nsMsgQuickSearchDBView::OnNewSearch() {
   // this needs to happen after we remove all the keys, since RowCountChanged()
   // will call our GetRowCount()
   if (mTree) mTree->RowCountChanged(0, -oldSize);
   if (mJSTree) mJSTree->RowCountChanged(0, -oldSize);
+
+  nsAutoCString hits;
   uint32_t folderFlags = 0;
   if (m_viewFolder) m_viewFolder->GetFlags(&folderFlags);
   // check if it's a virtual folder - if so, we should get the cached hits
   // from the db, and set a flag saying that we're using cached values.
@@ -406,37 +424,58 @@ nsMsgQuickSearchDBView::OnNewSearch() {
     // If the search session search string doesn't match the vf search str,
     // then we're doing quick search, which means we don't want to invalidate
     // cached results, or use cached results.
     m_doingQuickSearch = !curSearchAsString.Equals(terms);
+    nsCString searchUri;
+    nsCString baseURI;
     if (!m_doingQuickSearch) {
       // We're NOT doing quick search, so use cached hits.
       nsCOMPtr<nsIMsgEnumerator> cachedHits;
-      nsCString searchUri;
       m_viewFolder->GetURI(searchUri);
+      m_folder->GetURI(baseURI);
       m_db->GetCachedHits(searchUri, getter_AddRefs(cachedHits));
       if (cachedHits) {
         bool hasMore;
         nsresult rv = cachedHits->HasMoreElements(&hasMore);
         if (NS_SUCCEEDED(rv) && hasMore) {
           m_usingCachedHits = true;
-          m_cacheEmpty = !hasMore;
+          m_cacheEmpty = false;
           if (mTree) mTree->BeginUpdateBatch();
           if (mJSTree) mJSTree->BeginUpdateBatch();
+          int32_t baseHits = 0;
           while (hasMore) {
             nsCOMPtr<nsIMsgDBHdr> header;
             rv = cachedHits->GetNext(getter_AddRefs(header));
-            if (header && NS_SUCCEEDED(rv)) {
-              nsMsgKey key;
-              header->GetMessageKey(&key);
-              AddHdr(header);
-            } else
+            if (!header && NS_SUCCEEDED(rv)) rv = NS_ERROR_NULL_POINTER;
+            if (NS_SUCCEEDED(rv)) {
+              do {
+                nsMsgKey msgKey;
+                rv = header->GetMessageKey(&msgKey);
+                if (NS_FAILED(rv)) break;
+                rv = AddHdr(header);
+                if (NS_FAILED(rv)) break;
+                baseHits++;
+              } while (false);
+            }
+            if (NS_FAILED(rv)) {
+              nsCString msg = nsPrintfCString(
+                  "Search folder %s: Error 0x%x restoring cache for folder "
+                  "%s, got to %" PRIu32 " headers",
+                  searchUri.get(), (uint32_t)rv, baseURI.get(), baseHits);
+              MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                               NS_LITERAL_STRING_FROM_CSTRING(__FILE__),
+                               __LINE__, nsIScriptError::errorFlag);
+              m_usingCachedHits = false;
               break;
+            }
             cachedHits->HasMoreElements(&hasMore);
           }
+          hits = baseURI + ": "_ns + nsPrintfCString("%" PRIi32, baseHits);
           if (mTree) mTree->EndUpdateBatch();
           if (mJSTree) mJSTree->EndUpdateBatch();
 
-          if (searchSession) searchSession->SuppressSearch(true);
+          if (m_usingCachedHits && searchSession)
+            searchSession->SuppressSearch(true);
         }
       }
     }
     if (!m_doingQuickSearch && !m_usingCachedHits) {
@@ -444,8 +483,19 @@ nsMsgQuickSearchDBView::OnNewSearch() {
           u"Single-folder virtual view not using cache: First access, update or missing/empty cache. Searched folder needs to contribute search hits."_ns,
           NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
           nsIScriptError::infoFlag);
     }
+
+    if (!m_doingQuickSearch && m_usingCachedHits &&
+        mozilla::Preferences::GetBool("mailnews.virtual_folders.verbose",
+                                      false)) {
+      nsCString msg = nsPrintfCString(
+          "Search folder %s: View populated with retrieved cache hits: %s",
+          searchUri.get(), hits.get());
+      MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                       NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                       nsIScriptError::infoFlag);
+    }
   }
 
   // Prevent updates for every message found. This batch ends in OnSearchDone.
   // Do this only when updating virtual folders, not for quick search which
diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
@@ -17,9 +17,11 @@
 #include "nsServiceManagerUtils.h"
 
 /* for logging to Error Console */
 #include "nsIScriptError.h"
+#include "nsPrintfCString.h"
 #include "nsMsgUtils.h"
+#include "mozilla/Preferences.h"
 
 nsMsgXFVirtualFolderDBView::nsMsgXFVirtualFolderDBView() {
   mSuppressMsgDisplay = false;
   m_doingSearch = false;
@@ -185,14 +187,27 @@ nsMsgXFVirtualFolderDBView::OnHdrPropert
 void nsMsgXFVirtualFolderDBView::UpdateCacheAndViewForFolder(
     nsIMsgFolder* folder, nsTArray<nsMsgKey> const& newHits) {
   nsCOMPtr<nsIMsgDatabase> db;
   nsresult rv = folder->GetMsgDatabaseLRU(getter_AddRefs(db));
+  nsCString baseURI;
+  folder->GetURI(baseURI);
   if (NS_SUCCEEDED(rv) && db) {
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
     nsTArray<nsMsgKey> badHits;
     rv = db->RefreshCache(searchUri, newHits, badHits);
     if (NS_SUCCEEDED(rv)) {
+      if (mozilla::Preferences::GetBool("mailnews.virtual_folders.verbose",
+                                        false)) {
+        nsCString msg = nsPrintfCString(
+            "Search folder %s: Cache for %s populated with new hits: %" PRIu64
+            ", removed: %" PRIu64,
+            searchUri.get(), baseURI.get(), newHits.Length(), badHits.Length());
+        MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                         NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                         nsIScriptError::infoFlag);
+      }
+
       nsCOMPtr<nsIMsgDBHdr> badHdr;
       for (nsMsgKey badKey : badHits) {
         // ### of course, this isn't quite right, since we should be
         // using FindHdr, and we shouldn't be expanding the threads.
@@ -420,46 +435,66 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
     if (mJSTree) mJSTree->BeginUpdateBatch();
   }
 
   bool allScopesHaveCache = true;
+  nsAutoCString hits;
+  nsCString searchUri;
+  m_viewFolder->GetURI(searchUri);
   for (int32_t i = 0; i < scopeCount; i++) {
     nsMsgSearchScopeValue scopeId;
     nsCOMPtr<nsIMsgFolder> searchFolder;
     searchSession->GetNthSearchScope(i, &scopeId, getter_AddRefs(searchFolder));
     if (searchFolder) {
       nsCOMPtr<nsIMsgDatabase> searchDB;
-      nsCString searchUri;
-      m_viewFolder->GetURI(searchUri);
       nsresult rv = searchFolder->GetMsgDatabaseLRU(getter_AddRefs(searchDB));
+      int32_t baseHits = 0;
       if (NS_SUCCEEDED(rv) && searchDB) {
         if (msgDBService)
           msgDBService->RegisterPendingListener(searchFolder, this);
 
         m_foldersSearchingOver.AppendObject(searchFolder);
+
         // Ignore cached hits in quick search case.
         if (m_doingQuickSearch) continue;
 
+        nsCString baseURI;
+        searchFolder->GetURI(baseURI);
+        if (hits.IsEmpty()) {
+          hits = baseURI + ": "_ns;
+        } else {
+          hits += ", "_ns + baseURI + ": "_ns;
+        }
+
         nsCOMPtr<nsIMsgEnumerator> cachedHits;
         searchDB->GetCachedHits(searchUri, getter_AddRefs(cachedHits));
         bool hasMore;
         if (cachedHits) {
           nsresult rv = cachedHits->HasMoreElements(&hasMore);
           if (NS_SUCCEEDED(rv) && hasMore) {
-            mozilla::DebugOnly<nsMsgKey> prevKey = nsMsgKey_None;
             while (hasMore) {
               nsCOMPtr<nsIMsgDBHdr> header;
               rv = cachedHits->GetNext(getter_AddRefs(header));
-              if (header && NS_SUCCEEDED(rv)) {
-                nsMsgKey msgKey;
-                header->GetMessageKey(&msgKey);
-                NS_ASSERTION(prevKey == nsMsgKey_None || msgKey > prevKey,
-                             "cached Hits not sorted");
-#ifdef DEBUG
-                prevKey = msgKey;
-#endif
-                AddHdrFromFolder(header, searchFolder);
-                m_totalMessagesInView++;
-              } else {
+              if (!header && NS_SUCCEEDED(rv)) rv = NS_ERROR_NULL_POINTER;
+              if (NS_SUCCEEDED(rv)) {
+                do {
+                  nsMsgKey msgKey;
+                  rv = header->GetMessageKey(&msgKey);
+                  if (NS_FAILED(rv)) break;
+                  rv = AddHdrFromFolder(header, searchFolder);
+                  if (NS_FAILED(rv)) break;
+                  m_totalMessagesInView++;
+                  baseHits++;
+                } while (false);
+              }
+              if (NS_FAILED(rv)) {
+                nsCString msg = nsPrintfCString(
+                    "Search folder %s: Error 0x%x restoring cache for folder "
+                    "%s, got to %" PRIu32 " headers",
+                    searchUri.get(), (uint32_t)rv, baseURI.get(), baseHits);
+                MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                                 NS_LITERAL_STRING_FROM_CSTRING(__FILE__),
+                                 __LINE__, nsIScriptError::errorFlag);
+                allScopesHaveCache = false;
                 break;
               }
 
               cachedHits->HasMoreElements(&hasMore);
@@ -470,8 +505,9 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
         } else {
           allScopesHaveCache = false;
         }
       }
+      hits += nsPrintfCString("%" PRIi32, baseHits);
     }
   }
 
   if (!m_doingQuickSearch && !allScopesHaveCache) {
@@ -481,8 +517,17 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
         nsIScriptError::infoFlag);
   }
 
   if (!m_doingQuickSearch && allScopesHaveCache) {
+    if (mozilla::Preferences::GetBool("mailnews.virtual_folders.verbose",
+                                      false)) {
+      nsCString msg = nsPrintfCString(
+          "Search folder %s: View populated with retrieved cache hits: %s",
+          searchUri.get(), hits.get());
+      MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                       NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                       nsIScriptError::infoFlag);
+    }
     m_usingCachedHits = true;
     searchSession->SuppressSearch(true);
   } else {
     // Reset the total count, it will be increased in
diff --git a/mailnews/mailnews.js b/mailnews/mailnews.js
--- a/mailnews/mailnews.js
+++ b/mailnews/mailnews.js
@@ -103,8 +103,11 @@ pref("mailnews.sort_threads_by_root", fa
 
 // Reversed threading when ordered by date descending.
 pref("mailnews.reversed_threading", false);
 
+// Virtual folder verbosity.
+pref("mailnews.virtual_folders.verbose", false);
+
 // default view flags for new folders
 // both flags are int values reflecting nsMsgViewFlagsType values
 // as defined in nsIMsgDBView.idl (kNone = 0, kThreadedDisplay = 1 etc.)
 
