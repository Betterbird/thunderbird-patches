# HG changeset patch
# User Geoff Lankow <geoff@darktrojan.net>
# Date 1695195614 -7200
# Parent  110847f11b3eec164caa878e4b8f0e553f945da3
Bug 1854035 - Improve startup performance for unified folders.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -1021,28 +1021,42 @@ var folderPane = {
         // For any rows we removed, check they are added back to the tree.
         for (let server of serversToCheck) {
           this.initServer(server);
         }
       },
 
       initServer(server) {
         // Find all folders in this server that aren't currently displayed.
-        let remainingFolders = server.rootFolder.descendants.filter(
-          folder => !folderPane.getRowForFolder(folder, "smart")
+        let existingRows = new Set(
+          Array.from(
+            this.containerList.getElementsByTagName("li"),
+            li => li.uri
+          )
         );
-
-        while (remainingFolders.length) {
-          let folder = remainingFolders.shift();
+        let remainingFolderURIs = server.rootFolder.descendants
+          .map(folder => folder.URI)
+          .filter(folderURI => !existingRows.has(folderURI));
+
+        while (remainingFolderURIs.length) {
+          let folderURI = remainingFolderURIs.shift();
+          let folder = MailServices.folderLookup.getFolderForURL(folderURI);
           if (folderPane._isGmailFolder(folder)) {
             continue;
           }
           this.addFolder(folderPane._getNonGmailParent(folder), folder);
-          remainingFolders = remainingFolders.filter(
-            folder => !folderPane.getRowForFolder(folder, "smart")
+
+          existingRows = new Set(
+            Array.from(
+              this.containerList.getElementsByTagName("li"),
+              li => li.uri
+            )
+          );
+          remainingFolderURIs = remainingFolderURIs.filter(
+            folderURI => !existingRows.has(folderURI)
           );
         }
       },
 
       addFolder(parentFolder, childFolder) {
         if (folderPane.getRowForFolder(childFolder, this.name)) {
           // If a row for this folder exists, do nothing.
           return;
@@ -2246,20 +2260,30 @@ var folderPane = {
    * @param {string?} modeName - If given, only look in the folders for this
    *   mode, otherwise look in the whole tree.
    * @returns {FolderTreeRow}
    */
   getRowForFolder(folderOrURI, modeName) {
     if (folderOrURI instanceof Ci.nsIMsgFolder) {
       folderOrURI = folderOrURI.URI;
     }
-    let container = modeName ? this._modes[modeName].container : folderTree;
-    return [...container.querySelectorAll("li")].find(
-      row => row.uri == folderOrURI
-    );
+
+    let modeNames = modeName ? [modeName] : this.activeModes;
+    for (let name of modeNames) {
+      let id = FolderTreeRow.makeRowID(name, folderOrURI);
+      id = id.replaceAll(/\W/g, m => "\\" + m); // Make selector safe.
+      // Look in the mode's container. The container may or may not be
+      // attached to the document at this point.
+      let row = this._modes[name].containerList.querySelector(`#${id}`);
+      if (row) {
+        return row;
+      }
+    }
+
+    return null;
   },
 
   /**
    * Loop through all currently active modes and call the required function if
    * it exists.
    *
    * @param {string} functionName - The name of the function to call.
    * @param  {...any} args - The list of arguments to pass to the function.
@@ -3634,16 +3658,26 @@ class FolderTreeRow extends HTMLLIElemen
   /**
    * Used for comparing folder names. This matches the collator used in
    * `nsMsgDBFolder::createCollationKeyGenerator`.
    * @type {Intl.Collator}
    */
   static nameCollator = new Intl.Collator(undefined, { sensitivity: "base" });
 
   /**
+   * Creates an identifier unique for the given mode name and folder URI.
+   *
+   * @param {string} modeName
+   * @param {string} uri
+   */
+  static makeRowID(modeName, uri) {
+    return `${modeName}-${btoa(MailStringUtils.stringToByteString(uri))}`;
+  }
+
+  /**
    * The name of the folder tree mode this row belongs to.
    * @type {string}
    */
   modeName;
   /**
    * The URI of the folder represented by this row.
    * @type {string}
    */
@@ -3815,19 +3849,17 @@ class FolderTreeRow extends HTMLLIElemen
 
   /**
    * Set some common properties based on the URI for this row.
    * `this.modeName` must be set before calling this function.
    *
    * @param {string} uri
    */
   _setURI(uri) {
-    this.id = `${this.modeName}-${btoa(
-      MailStringUtils.stringToByteString(uri)
-    )}`;
+    this.id = FolderTreeRow.makeRowID(this.modeName, uri);
     this.uri = uri;
     if (!FolderTreeProperties.getIsExpanded(uri, this.modeName)) {
       this.classList.add("collapsed");
     }
     this.setIconColor();
   }
 
   /**
