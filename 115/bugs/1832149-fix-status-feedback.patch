# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1695068292 -7200
# Parent  003125791d3e34a8fecb3c8337913f86eceed8d6
Bug 1832149 - Fix status feedback.

Hunk in nsImapService.cpp by Gene Smith <gds@chartertn.net> from https://bugzilla.mozilla.org/show_bug.cgi?id=1832149#c9

diff --git a/mail/base/content/mailWindow.js b/mail/base/content/mailWindow.js
--- a/mail/base/content/mailWindow.js
+++ b/mail/base/content/mailWindow.js
@@ -1084,21 +1084,28 @@ var contentProgress = {
       return this.callListeners("onRefreshAttempted", args);
     }
   },
 };
 
 // Add a progress listener to any about:message content browser that comes
 // along. This often happens after the tab is opened so the usual mechanism
 // doesn't work. It also works for standalone message windows.
-window.addEventListener("aboutMessageLoaded", event =>
-  contentProgress.addProgressListenerToBrowser(
-    event.target.getMessagePaneBrowser()
-  )
-);
+window.addEventListener("aboutMessageLoaded", event => {
+  let browser = event.target.getMessagePaneBrowser();
+  contentProgress.addProgressListenerToBrowser(browser);
+
+  // Register `statusFeedback` as web listener.
+  let webProgressListener = statusFeedback.QueryInterface(
+    Ci.nsIWebProgressListener
+  );
+  browser.docShell
+    .QueryInterface(Ci.nsIWebProgress)
+    .addProgressListener(webProgressListener, Ci.nsIWebProgress.NOTIFY_ALL);
+});
 
 // Listener to correctly set the busy flag on the webBrowser in about:3pane. All
 // other content tabs are handled by tabmail.js.
 contentProgress.addListener({
   onStateChange(browser, webProgress, request, stateFlags, statusCode) {
     // Skip if this is not the webBrowser in about:3pane.
     if (browser.id != "webBrowser") {
       return;
diff --git a/mailnews/imap/src/nsImapService.cpp b/mailnews/imap/src/nsImapService.cpp
--- a/mailnews/imap/src/nsImapService.cpp
+++ b/mailnews/imap/src/nsImapService.cpp
@@ -2381,17 +2381,31 @@ NS_IMETHODIMP nsImapService::NewChannel(
     if (msgDocShell) {
       nsCOMPtr<nsIProgressEventSink> prevEventSink;
       channel->GetProgressEventSink(getter_AddRefs(prevEventSink));
       nsCOMPtr<nsIInterfaceRequestor> docIR(do_QueryInterface(msgDocShell));
       channel->SetNotificationCallbacks(docIR);
       // we want to use our existing event sink.
       if (prevEventSink) channel->SetProgressEventSink(prevEventSink);
     }
+  } else {
+    nsCOMPtr<nsIMsgMailSession> mailSession = do_GetService(
+        "@mozilla.org/messenger/services/session;1", &rv);
+    NS_ENSURE_SUCCESS(rv, rv);
+    nsCOMPtr<nsIMsgWindow> msgWindow;
+    rv = mailSession->GetTopmostMsgWindow(getter_AddRefs(msgWindow));
+    if (NS_SUCCEEDED(rv) && msgWindow) {
+      mailnewsUrl->SetMsgWindow(msgWindow);
+      nsCOMPtr<nsIMsgStatusFeedback> statusFeedback;
+      msgWindow->GetStatusFeedback(getter_AddRefs(statusFeedback));
+      nsCOMPtr<nsIProgressEventSink>eventSink = do_QueryInterface(statusFeedback);
+      channel->SetProgressEventSink(eventSink);
+    }
   }
+
   // the imap url holds a weak reference so we can pass the channel into the
   // imap protocol when we actually run the url.
   imapUrl->SetMockChannel(channel);
 
   bool externalLinkUrl;
   imapUrl->GetExternalLinkUrl(&externalLinkUrl);
 
   // Only external imap links with no action are supported. Ignore links that
