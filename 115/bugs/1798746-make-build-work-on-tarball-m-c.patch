# HG changeset patch
# User nicklas boman <smurfd@gmail.com>
# Date 1689113774 -7200
# Node ID ebd8e5e25327cba0f0ab334fbcc1d192ab85d01e
# Parent  958f19129f8fcc71540b70343fc1edd1d059758b
Bug 1798746 - Ensure checking for mercurial/git only if its a hg/git clone, not release source r=ahochheiden

Differential Revision: https://phabricator.services.mozilla.com/D162461

These changes sadly got clobbered from upstream, so put them back, see:
https://github.com/taskcluster/taskgraph/pull/291

diff --git a/third_party/python/taskcluster_taskgraph/taskgraph/parameters.py b/third_party/python/taskcluster_taskgraph/taskgraph/parameters.py
--- a/third_party/python/taskcluster_taskgraph/taskgraph/parameters.py
+++ b/third_party/python/taskcluster_taskgraph/taskgraph/parameters.py
@@ -75,56 +75,86 @@ def get_contents(path):
 def get_version(repo_path):
     version_path = os.path.join(repo_path, "version.txt")
     return get_contents(version_path) if os.path.isfile(version_path) else None
 
 
 def _get_defaults(repo_root=None):
     repo_path = repo_root or os.getcwd()
     repo = get_repository(repo_path)
-    try:
-        repo_url = repo.get_url()
-        parsed_url = mozilla_repo_urls.parse(repo_url)
-        project = parsed_url.repo_name
-    except (
-        CalledProcessError,
-        mozilla_repo_urls.errors.InvalidRepoUrlError,
-        mozilla_repo_urls.errors.UnsupportedPlatformError,
-    ):
-        repo_url = ""
-        project = ""
+    if repo:
+        try:
+            repo_url = repo.get_url()
+            parsed_url = mozilla_repo_urls.parse(repo_url)
+            project = parsed_url.repo_name
+        except (
+            CalledProcessError,
+            mozilla_repo_urls.errors.InvalidRepoUrlError,
+            mozilla_repo_urls.errors.UnsupportedPlatformError,
+        ):
+            repo_url = ""
+            project = ""
 
-    return {
-        "base_repository": repo_url,
-        "base_ref": "",
-        "base_rev": "",
-        "build_date": int(time.time()),
-        "build_number": 1,
-        "do_not_optimize": [],
-        "enable_always_target": True,
-        "existing_tasks": {},
-        "filters": ["target_tasks_method"],
-        "head_ref": repo.branch or repo.head_rev,
-        "head_repository": repo_url,
-        "head_rev": repo.head_rev,
-        "head_tag": "",
-        "level": "3",
-        "moz_build_date": datetime.now().strftime("%Y%m%d%H%M%S"),
-        "next_version": None,
-        "optimize_strategies": None,
-        "optimize_target_tasks": True,
-        "owner": "nobody@mozilla.com",
-        "project": project,
-        "pushdate": int(time.time()),
-        "pushlog_id": "0",
-        "repository_type": repo.tool,
-        "target_tasks_method": "default",
-        "tasks_for": "",
-        "version": get_version(repo_path),
-    }
+        return {
+            "base_repository": repo_url,
+            "base_ref": "",
+            "base_rev": "",
+            "build_date": int(time.time()),
+            "build_number": 1,
+            "do_not_optimize": [],
+            "enable_always_target": True,
+            "existing_tasks": {},
+            "filters": ["target_tasks_method"],
+            "head_ref": repo.branch or repo.head_rev,
+            "head_repository": repo_url,
+            "head_rev": repo.head_rev,
+            "head_tag": "",
+            "level": "3",
+            "moz_build_date": datetime.now().strftime("%Y%m%d%H%M%S"),
+            "next_version": None,
+            "optimize_strategies": None,
+            "optimize_target_tasks": True,
+            "owner": "nobody@mozilla.com",
+            "project": project,
+            "pushdate": int(time.time()),
+            "pushlog_id": "0",
+            "repository_type": repo.tool,
+            "target_tasks_method": "default",
+            "tasks_for": "",
+            "version": get_version(repo_path),
+        }
+    else:
+        return {
+            "base_repository": "SOURCE",
+            "base_ref": "",
+            "base_rev": "",
+            "build_date": int(time.time()),
+            "build_number": 1,
+            "do_not_optimize": [],
+            "enable_always_target": True,
+            "existing_tasks": {},
+            "filters": ["target_tasks_method"],
+            "head_ref": "",
+            "head_repository": "",
+            "head_rev": "",
+            "head_tag": "",
+            "level": "3",
+            "moz_build_date": datetime.now().strftime("%Y%m%d%H%M%S"),
+            "next_version": None,
+            "optimize_strategies": None,
+            "optimize_target_tasks": True,
+            "owner": "nobody@mozilla.com",
+            "project": "",
+            "pushdate": int(time.time()),
+            "pushlog_id": "0",
+            "repository_type": "",
+            "target_tasks_method": "default",
+            "tasks_for": "",
+            "version": "",
+        }
 
 
 defaults_functions = [_get_defaults]
 
 
 def extend_parameters_schema(schema, defaults_fn=None):
     """
     Extend the schema for parameters to include per-project configuration.
@@ -190,23 +220,24 @@ class Parameters(ReadOnlyDict):
         if result.scheme in ("http", "https"):
             spec = result.path
 
         return os.path.splitext(os.path.basename(spec))[0]
 
     @staticmethod
     def _fill_defaults(repo_root=None, **kwargs):
         defaults = {}
-        for fn in defaults_functions:
-            defaults.update(fn(repo_root))
+        if repo_root != "SOURCE":
+            for fn in defaults_functions:
+                defaults.update(fn(repo_root))
 
-        for name, default in defaults.items():
-            if name not in kwargs:
-                kwargs[name] = default
-        return kwargs
+            for name, default in defaults.items():
+                if name not in kwargs:
+                    kwargs[name] = default
+            return kwargs
 
     def check(self):
         schema = (
             base_schema if self.strict else base_schema.extend({}, extra=ALLOW_EXTRA)
         )
         try:
             validate_schema(schema, self.copy(), "Invalid parameters:")
         except Exception as e:
diff --git a/third_party/python/taskcluster_taskgraph/taskgraph/util/vcs.py b/third_party/python/taskcluster_taskgraph/taskgraph/util/vcs.py
--- a/third_party/python/taskcluster_taskgraph/taskgraph/util/vcs.py
+++ b/third_party/python/taskcluster_taskgraph/taskgraph/util/vcs.py
@@ -499,18 +499,20 @@ def get_repository(path):
     """Get a repository object for the repository at `path`.
     If `path` is not a known VCS repository, raise an exception.
     """
     for path in ancestors(path):
         if os.path.isdir(os.path.join(path, ".hg")):
             return HgRepository(path)
         elif os.path.exists(os.path.join(path, ".git")):
             return GitRepository(path)
+        elif os.path.exists(os.path.join(path, "moz.configure")):
+            return None
 
-    raise RuntimeError("Current directory is neither a git or hg repository")
+    raise RuntimeError("Current directory is neither a git or hg repository, nor a release source")
 
 
 def find_hg_revision_push_info(repository, revision):
     """Given the parameters for this action and a revision, find the
     pushlog_id of the revision."""
     pushlog_url = PUSHLOG_TMPL.format(repository, revision)
 
     def query_pushlog(url):
