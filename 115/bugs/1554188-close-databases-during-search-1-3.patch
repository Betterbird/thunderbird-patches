# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1683446544 -7200
# Parent  92d0baeca9b69c2db66fe0991505cb8e6f337c53
Bug 1554188 - More aggressively close databases during search.
* * *
Bug 1554188 - Only aggressively close folders if many involved in search.
* * *
Bug 1554188 - modify algorithm that closes databases during search. Allow for 100 open ones, keep simple LRU cache.

diff --git a/mailnews/base/public/nsIMsgFolder.idl b/mailnews/base/public/nsIMsgFolder.idl
--- a/mailnews/base/public/nsIMsgFolder.idl
+++ b/mailnews/base/public/nsIMsgFolder.idl
@@ -543,16 +543,18 @@ interface nsIMsgFolder : nsISupports {
    *
    * @exception NS_MSG_ERROR_FOLDER_SUMMARY_MISSING If the database does not
    *                         exist.
    * @exception NS_MSG_ERROR_FOLDER_SUMMARY_OUT_OF_DATE If the database contains
    *                         out of date information.
    * @see nsIMsgFolder::getDBFolderInfoAndDB.
    */
   attribute nsIMsgDatabase msgDatabase;
+  /// Get database via API that keeps a LRU cache.
+  readonly attribute nsIMsgDatabase msgDatabaseLRU;
 
   /// Close the database if not open in folder.
   void closeDBIfFolderNotOpen(in boolean forceClosed);
 
   /// Does the folder have a local reference to the msgDatabase?
   readonly attribute boolean databaseOpen;
 
   /**
diff --git a/mailnews/base/src/nsMsgDBFolder.cpp b/mailnews/base/src/nsMsgDBFolder.cpp
--- a/mailnews/base/src/nsMsgDBFolder.cpp
+++ b/mailnews/base/src/nsMsgDBFolder.cpp
@@ -4740,24 +4740,94 @@ NS_IMETHODIMP nsMsgDBFolder::EnableNotif
     if (enable) {
       UpdateSummaryTotals(true);
     }
     return NS_OK;
   }
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
+// Cleap implementation of LRU cache.
+#define MAXLRUCACHE 100
+size_t dbLRUcacheCount = 0;
+nsWeakPtr dbLRUcache[MAXLRUCACHE];
+
+static void insertIntoLRUcache(nsMsgDBFolder* folder) {
+// #define FOLDER_DEBUG 1
+#ifdef FOLDER_DEBUG
+  nsAutoCString n;
+  folder->GetURI(n);
+#endif
+
+  // Let's keep track of the last folders and close a folder database
+  // if necessary.
+  // Let's see whether our folder is in the cache.
+  bool found = false;
+  for (size_t i = 0; i < dbLRUcacheCount; i++) {
+    nsCOMPtr<nsIMsgFolder> f = do_QueryReferent(dbLRUcache[i]);
+    if (f == folder) {
+      found = true;
+      // Move elements down to i and insert at [0].
+      if (i > 0) {
+        memmove((void*)&dbLRUcache[1], (void*)&dbLRUcache[0], i * sizeof(nsWeakPtr));
+        dbLRUcache[0] = do_GetWeakReference(folder);
+      }
+      break;
+    }
+  }
+#ifdef FOLDER_DEBUG
+  fprintf(stderr, "LRU insert: %s, found: %d, %zu\n", n.get(), found, dbLRUcacheCount);
+#endif
+  if (!found) {
+    if (dbLRUcacheCount == MAXLRUCACHE) {
+      // Expunge last element.
+      nsCOMPtr<nsIMsgFolder> last = do_QueryReferent(dbLRUcache[MAXLRUCACHE - 1]);
+      if (last) {
+        bool dbOpen = false;
+        last->GetDatabaseOpen(&dbOpen);
+        if (dbOpen) last->CloseDBIfFolderNotOpen(false);
+#ifdef FOLDER_DEBUG
+        last->GetURI(n);
+        fprintf(stderr, "LRU cache closed: %s\n", n.get());
+#endif
+      }
+      dbLRUcacheCount--;
+    }
+    // Move elements down and insert at [0].
+    if (dbLRUcacheCount > 0) {
+      memmove((void*)&dbLRUcache[1], (void*)&dbLRUcache[0], dbLRUcacheCount * sizeof(nsWeakPtr));
+    }
+    dbLRUcacheCount++;
+    dbLRUcache[0] = do_GetWeakReference(folder);
+  }
+}
+
 NS_IMETHODIMP nsMsgDBFolder::GetMessageHeader(nsMsgKey msgKey,
                                               nsIMsgDBHdr** aMsgHdr) {
   NS_ENSURE_ARG_POINTER(aMsgHdr);
+  bool weOpenedDB = !mDatabase;
   nsCOMPtr<nsIMsgDatabase> database;
   nsresult rv = GetMsgDatabase(getter_AddRefs(database));
   NS_ENSURE_SUCCESS(rv, rv);
-  return (database) ? database->GetMsgHdrForKey(msgKey, aMsgHdr)
-                    : NS_ERROR_FAILURE;
+  if (!database) return NS_ERROR_FAILURE;
+  rv = database->GetMsgHdrForKey(msgKey, aMsgHdr);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  if (weOpenedDB) {
+    insertIntoLRUcache(this);
+  }
+  return rv;
+}
+
+NS_IMETHODIMP
+nsMsgDBFolder::GetMsgDatabaseLRU(nsIMsgDatabase** aMsgDatabase) {
+  if (!mDatabase) {
+    insertIntoLRUcache(this);
+  }
+  return GetMsgDatabase(aMsgDatabase);
 }
 
 NS_IMETHODIMP nsMsgDBFolder::GetDescendants(
     nsTArray<RefPtr<nsIMsgFolder>>& aDescendants) {
   aDescendants.Clear();
   for (nsIMsgFolder* child : mSubFolders) {
     aDescendants.AppendElement(child);
     nsTArray<RefPtr<nsIMsgFolder>> grandchildren;
@@ -4966,17 +5036,18 @@ NS_IMETHODIMP nsMsgDBFolder::NotifyCompa
 NS_IMETHODIMP nsMsgDBFolder::CloseDBIfFolderNotOpen(bool aForceClosed) {
   nsresult rv;
   nsCOMPtr<nsIMsgMailSession> session =
       do_GetService("@mozilla.org/messenger/services/session;1", &rv);
   NS_ENSURE_SUCCESS(rv, rv);
   bool folderOpen;
   session->IsFolderOpenInWindow(this, &folderOpen);
   if (!folderOpen &&
-      !(mFlags & (nsMsgFolderFlags::Trash | nsMsgFolderFlags::Inbox))) {
+      !(mFlags & (nsMsgFolderFlags::Trash | nsMsgFolderFlags::Inbox |
+                  nsMsgFolderFlags::Queue))) {
     if (aForceClosed && mDatabase) mDatabase->ForceClosed();
     SetMsgDatabase(nullptr);
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgDBFolder::SetSortOrder(int32_t order) {
   NS_ASSERTION(false, "not implemented");
diff --git a/mailnews/base/src/nsMsgSearchDBView.cpp b/mailnews/base/src/nsMsgSearchDBView.cpp
--- a/mailnews/base/src/nsMsgSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgSearchDBView.cpp
@@ -344,22 +344,19 @@ void nsMsgSearchDBView::RemoveRows(nsMsg
 nsresult nsMsgSearchDBView::GetMsgHdrForViewIndex(nsMsgViewIndex index,
                                                   nsIMsgDBHdr** msgHdr) {
   if (index == nsMsgViewIndex_None || index >= (uint32_t)m_folders.Count()) {
     return NS_MSG_INVALID_DBVIEW_INDEX;
   }
 
   nsIMsgFolder* folder = m_folders[index];
   if (folder) {
-    nsCOMPtr<nsIMsgDatabase> db;
-    nsresult rv = folder->GetMsgDatabase(getter_AddRefs(db));
+    nsresult rv = folder->GetMessageHeader(m_keys[index], msgHdr);
     NS_ENSURE_SUCCESS(rv, rv);
-    if (db) {
-      return db->GetMsgHdrForKey(m_keys[index], msgHdr);
-    }
+    return rv;
   }
 
   return NS_ERROR_FAILURE;
 }
 
 NS_IMETHODIMP
 nsMsgSearchDBView::GetFolderForViewIndex(nsMsgViewIndex index,
                                          nsIMsgFolder** aFolder) {
diff --git a/mailnews/base/src/nsMsgXFViewThread.cpp b/mailnews/base/src/nsMsgXFViewThread.cpp
--- a/mailnews/base/src/nsMsgXFViewThread.cpp
+++ b/mailnews/base/src/nsMsgXFViewThread.cpp
@@ -248,20 +248,19 @@ nsresult nsMsgXFViewThread::AddHdr(nsIMs
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgXFViewThread::GetChildHdrAt(uint32_t aIndex, nsIMsgDBHdr** aResult) {
   if (aIndex >= m_keys.Length()) return NS_MSG_MESSAGE_NOT_FOUND;
 
-  nsCOMPtr<nsIMsgDatabase> db;
-  nsresult rv = m_folders[aIndex]->GetMsgDatabase(getter_AddRefs(db));
+  nsresult rv = m_folders[aIndex]->GetMessageHeader(m_keys[aIndex], aResult);
   NS_ENSURE_SUCCESS(rv, rv);
-  return db->GetMsgHdrForKey(m_keys[aIndex], aResult);
+  return rv;
 }
 
 NS_IMETHODIMP
 nsMsgXFViewThread::RemoveChildAt(uint32_t aIndex) {
   m_keys.RemoveElementAt(aIndex);
   m_levels.RemoveElementAt(aIndex);
   m_folders.RemoveObjectAt(aIndex);
   return NS_OK;
diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
@@ -176,28 +176,28 @@ nsMsgXFVirtualFolderDBView::OnHdrPropert
     NoteChange(index, 1, nsMsgViewNotificationCode::changed);
 
   return NS_OK;
 }
 
 void nsMsgXFVirtualFolderDBView::UpdateCacheAndViewForFolder(
     nsIMsgFolder* folder, nsTArray<nsMsgKey> const& newHits) {
   nsCOMPtr<nsIMsgDatabase> db;
-  nsresult rv = folder->GetMsgDatabase(getter_AddRefs(db));
+  nsresult rv = folder->GetMsgDatabaseLRU(getter_AddRefs(db));
   if (NS_SUCCEEDED(rv) && db) {
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
     nsTArray<nsMsgKey> badHits;
     rv = db->RefreshCache(searchUri, newHits, badHits);
     if (NS_SUCCEEDED(rv)) {
       nsCOMPtr<nsIMsgDBHdr> badHdr;
       for (nsMsgKey badKey : badHits) {
         // ### of course, this isn't quite right, since we should be
         // using FindHdr, and we shouldn't be expanding the threads.
-        db->GetMsgHdrForKey(badKey, getter_AddRefs(badHdr));
+        folder->GetMessageHeader(badKey, getter_AddRefs(badHdr));
         // Let nsMsgSearchDBView decide what to do about this header
         // getting removed.
         if (badHdr) OnHdrDeleted(badHdr, nsMsgKey_None, 0, this);
       }
     }
   }
 }
 
@@ -247,19 +247,17 @@ nsMsgXFVirtualFolderDBView::OnSearchHit(
     m_curFolderGettingHits = aFolder;
     m_hdrHits.Clear();
     m_curFolderStartKeyIndex = m_keys.Length();
   }
 
   bool hdrInCache = false;
   if (!m_doingQuickSearch) {
     nsCOMPtr<nsIMsgDatabase> dbToUse;
-    nsCOMPtr<nsIDBFolderInfo> dummyInfo;
-    nsresult rv = aFolder->GetDBFolderInfoAndDB(getter_AddRefs(dummyInfo),
-                                                getter_AddRefs(dbToUse));
+    nsresult rv = aFolder->GetMsgDatabaseLRU(getter_AddRefs(dbToUse));
     if (NS_SUCCEEDED(rv)) {
       nsCString searchUri;
       m_viewFolder->GetURI(searchUri);
       dbToUse->HdrIsInCache(searchUri, aMsgHdr, &hdrInCache);
     }
   }
 
   if (!m_doingSearch || !m_curFolderHasCachedHits || !hdrInCache) {
@@ -408,17 +406,17 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
   for (int32_t i = 0; i < scopeCount; i++) {
     nsMsgSearchScopeValue scopeId;
     nsCOMPtr<nsIMsgFolder> searchFolder;
     searchSession->GetNthSearchScope(i, &scopeId, getter_AddRefs(searchFolder));
     if (searchFolder) {
       nsCOMPtr<nsIMsgDatabase> searchDB;
       nsCString searchUri;
       m_viewFolder->GetURI(searchUri);
-      nsresult rv = searchFolder->GetMsgDatabase(getter_AddRefs(searchDB));
+      nsresult rv = searchFolder->GetMsgDatabaseLRU(getter_AddRefs(searchDB));
       if (NS_SUCCEEDED(rv) && searchDB) {
         if (msgDBService)
           msgDBService->RegisterPendingListener(searchFolder, this);
 
         m_foldersSearchingOver.AppendObject(searchFolder);
         // Ignore cached hits in quick search case.
         if (m_doingQuickSearch) continue;
 
diff --git a/mailnews/db/mork/morkRowSpace.cpp b/mailnews/db/mork/morkRowSpace.cpp
--- a/mailnews/db/mork/morkRowSpace.cpp
+++ b/mailnews/db/mork/morkRowSpace.cpp
@@ -301,16 +301,17 @@ morkTable* morkRowSpace::NewTable(
     this->NilSpaceStoreError(ev);
 
   return outTable;
 }
 
 mork_tid morkRowSpace::MakeNewTableId(morkEnv* ev) {
   mork_tid outTid = 0;
   mork_tid id = mRowSpace_NextTableId;
+  if (!id) id++;
   mork_num count = 9;  // try up to eight times
 
   while (!outTid && --count)  // still trying to find an unused table ID?
   {
     if (!mRowSpace_Tables.GetTable(ev, id))
       outTid = id;
     else {
       MORK_ASSERT(morkBool_kFalse);  // alert developer about ID problems
diff --git a/mailnews/search/src/nsMsgSearchSession.cpp b/mailnews/search/src/nsMsgSearchSession.cpp
--- a/mailnews/search/src/nsMsgSearchSession.cpp
+++ b/mailnews/search/src/nsMsgSearchSession.cpp
@@ -490,31 +490,21 @@ nsresult nsMsgSearchSession::TimeSlice(b
   // we only do serial for now.
   return TimeSliceSerial(aDone);
 }
 
 void nsMsgSearchSession::ReleaseFolderDBRef() {
   nsMsgSearchScopeTerm* scope = GetRunningScope();
   if (!scope) return;
 
-  bool isOpen = false;
-  uint32_t flags;
   nsCOMPtr<nsIMsgFolder> folder;
   scope->GetFolder(getter_AddRefs(folder));
-  nsCOMPtr<nsIMsgMailSession> mailSession =
-      do_GetService("@mozilla.org/messenger/services/session;1");
-  if (!mailSession || !folder) return;
-
-  mailSession->IsFolderOpenInWindow(folder, &isOpen);
-  folder->GetFlags(&flags);
-
-  /*we don't null out the db reference for inbox because inbox is like the
-    "main" folder and performance outweighs footprint */
-  if (!isOpen && !(nsMsgFolderFlags::Inbox & flags))
-    folder->SetMsgDatabase(nullptr);
+  // The call parameter needs to be `true` when dealing with more than one
+  // folder. Tested via trial and error.
+  folder->CloseDBIfFolderNotOpen(m_scopeList.Length() > 1);
 }
 nsresult nsMsgSearchSession::TimeSliceSerial(bool* aDone) {
   // This version of TimeSlice runs each scope term one at a time, and waits
   // until one scope term is finished before starting another one. When we're
   // searching the local disk, this is the fastest way to do it.
 
   NS_ENSURE_ARG_POINTER(aDone);
 
