# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1709828397 -3600
# Parent  b5806e68c4baf790cdd3f47e7c924e95e3ec4dec
Bug 799040 - If ignored thread received new message, don't increase unread count.

diff --git a/mailnews/base/public/nsIMsgThread.idl b/mailnews/base/public/nsIMsgThread.idl
--- a/mailnews/base/public/nsIMsgThread.idl
+++ b/mailnews/base/public/nsIMsgThread.idl
@@ -25,8 +25,9 @@ interface nsIMsgThread : nsISupports {
   nsIMsgDBHdr getChildHdrAt(in unsigned long index);
   nsIMsgDBHdr getRootHdr();
   void removeChildAt(in unsigned long index);
   void removeChildHdr(in nsIMsgDBHdr child, in nsIDBChangeAnnouncer announcer);
+  void resetNumUnreadChildren();
 
   void markChildRead(in boolean bRead);
 
   nsIMsgDBHdr getFirstUnreadChild();
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -6158,8 +6158,15 @@ nsresult nsMsgDBView::MarkThreadRead(nsI
       idsMarkedRead.InsertElementAt(0, hdrMsgId);
     }
   }
 
+  uint32_t numUnreadChildren;
+  threadHdr->GetNumUnreadChildren(&numUnreadChildren);
+  if (numUnreadChildren > 0) {
+    // Repair damage from bug 799040.
+    threadHdr->ResetNumUnreadChildren();
+    mTree->InvalidateRow(threadIndex);
+  }
   return NS_OK;
 }
 
 bool nsMsgDBView::AdjustReadFlag(nsIMsgDBHdr* msgHdr, uint32_t* msgFlags) {
diff --git a/mailnews/base/src/nsMsgGroupThread.cpp b/mailnews/base/src/nsMsgGroupThread.cpp
--- a/mailnews/base/src/nsMsgGroupThread.cpp
+++ b/mailnews/base/src/nsMsgGroupThread.cpp
@@ -88,8 +88,12 @@ NS_IMETHODIMP nsMsgGroupThread::GetNumUn
   *aNumUnreadChildren = m_numUnreadChildren;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgGroupThread::ResetNumUnreadChildren() {
+  return NS_OK;  // No-op, only used for repair in nsMsgThread.
+}
+
 void nsMsgGroupThread::InsertMsgHdrAt(nsMsgViewIndex index, nsIMsgDBHdr* hdr) {
   nsMsgKey msgKey;
   hdr->GetMessageKey(&msgKey);
   m_keys.InsertElementAt(index, msgKey);
diff --git a/mailnews/base/src/nsMsgXFViewThread.cpp b/mailnews/base/src/nsMsgXFViewThread.cpp
--- a/mailnews/base/src/nsMsgXFViewThread.cpp
+++ b/mailnews/base/src/nsMsgXFViewThread.cpp
@@ -87,8 +87,12 @@ nsMsgXFViewThread::GetNumUnreadChildren(
   *aNumUnreadChildren = m_numUnreadChildren;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgXFViewThread::ResetNumUnreadChildren() {
+  return NS_OK;  // No-op, only used for repair in nsMsgThread.
+}
+
 NS_IMETHODIMP
 nsMsgXFViewThread::AddChild(nsIMsgDBHdr* aNewHdr, nsIMsgDBHdr* aInReplyTo,
                             bool aThreadInThread,
                             nsIDBChangeAnnouncer* aAnnouncer) {
diff --git a/mailnews/db/msgdb/src/nsMsgThread.cpp b/mailnews/db/msgdb/src/nsMsgThread.cpp
--- a/mailnews/db/msgdb/src/nsMsgThread.cpp
+++ b/mailnews/db/msgdb/src/nsMsgThread.cpp
@@ -357,10 +357,14 @@ NS_IMETHODIMP nsMsgThread::AddChild(nsIM
 
   // do this after we've put the new hdr in the thread
   bool isKilled;
   child->GetIsKilled(&isKilled);
-  if ((m_flags & nsMsgMessageFlags::Ignored || isKilled) && m_mdbDB)
+  if ((m_flags & nsMsgMessageFlags::Ignored || isKilled) && m_mdbDB) {
     m_mdbDB->MarkHdrRead(child, true, nullptr);
+    // If we don't count down the unread child count, the thread will
+    // carry an invisible unread child forever.
+    ChangeUnreadChildCount(-1);
+  }
 #ifdef DEBUG_David_Bienvenu
   nsMsgKey msgHdrThreadKey;
   child->GetThreadId(&msgHdrThreadKey);
   NS_ASSERTION(msgHdrThreadKey == m_threadKey,
@@ -883,8 +887,15 @@ nsresult nsMsgThread::ChangeChildCount(i
   m_numChildren = childCount;
   return rv;
 }
 
+NS_IMETHODIMP nsMsgThread::ResetNumUnreadChildren() {
+  nsresult rv = m_mdbDB->UInt32ToRowCellColumn(
+      m_metaRow, m_mdbDB->m_threadUnreadChildrenColumnToken, 0);
+  m_numUnreadChildren = 0;
+  return rv;
+}
+
 nsresult nsMsgThread::ChangeUnreadChildCount(int32_t delta) {
   nsresult rv;
 
   uint32_t childCount = 0;
