# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1705606498 -3600
# Parent  839e37a697125ad5c824ccdb7f19cc764cf23048
Bug 1831500 - Reinstate feedback during search: Take 2: Re-instate batching, introduce variable batch size of 5, 10 and 20.

In the end, the patch will be pulled out since it gave no performance benefit and despite ending batches,
rows in the view aren't updated, so this is bad for feedback.

diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.cpp b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
--- a/mailnews/base/src/nsMsgQuickSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
@@ -272,28 +272,47 @@ nsMsgQuickSearchDBView::SetSearchSession
 NS_IMETHODIMP
 nsMsgQuickSearchDBView::OnSearchHit(nsIMsgDBHdr* aMsgHdr,
                                     nsIMsgFolder* folder) {
   NS_ENSURE_ARG(aMsgHdr);
   if (!m_db) return NS_ERROR_NULL_POINTER;
   // remember search hit and when search is done, reconcile cache
   // with new hits;
   m_hdrHits.AppendObject(aMsgHdr);
+  bool switchedOffBatching = false;
+  if (mJSTree && m_hdrHits.Length() > 0 &&
+      (m_hdrHits.Length() % m_batchSize == 0)) {
+    switchedOffBatching = true;
+    mJSTree->EndUpdateBatch();
+    // Slowly increase batch size, so first results come quickly.
+    if (m_hdrHits.Length() >= 20) {
+      m_batchSize = 10;
+    } else if (m_hdrHits.Length() >= 40) {
+      m_batchSize = 20;
+    }
+  }
+
   nsMsgKey key;
   aMsgHdr->GetMessageKey(&key);
   // Is FindKey going to be expensive here? A lot of hits could make
   // it a little bit slow to search through the view for every hit.
+  nsresult rv;
   if (m_cacheEmpty || FindKey(key, false) == nsMsgViewIndex_None)
-    return AddHdr(aMsgHdr);
+    rv = AddHdr(aMsgHdr);
   else
-    return NS_OK;
+    rv = NS_OK;
+
+  if (switchedOffBatching) mJSTree->BeginUpdateBatch();
+  return rv;
 }
 
 NS_IMETHODIMP
 nsMsgQuickSearchDBView::OnSearchDone(nsresult status) {
+  // This batch began in OnNewSearch.
+  if (mJSTree) mJSTree->EndUpdateBatch();
   // We're a single-folder virtual folder if viewFolder != folder, and that is
   // the only case in which we want to be messing about with a results cache
   // or unread counts.
   if (m_db && m_viewFolder && m_viewFolder != m_folder) {
     nsTArray<nsMsgKey> keyArray;
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
     uint32_t count = m_hdrHits.Count();
@@ -346,16 +365,17 @@ nsMsgQuickSearchDBView::OnSearchDone(nsr
 NS_IMETHODIMP
 nsMsgQuickSearchDBView::OnNewSearch() {
   int32_t oldSize = GetSize();
 
   m_keys.Clear();
   m_levels.Clear();
   m_flags.Clear();
   m_hdrHits.Clear();
+  m_batchSize = 5;  // Give the user the first results quickly.
   // this needs to happen after we remove all the keys, since RowCountChanged()
   // will call our GetRowCount()
   if (mTree) mTree->RowCountChanged(0, -oldSize);
   if (mJSTree) mJSTree->RowCountChanged(0, -oldSize);
   uint32_t folderFlags = 0;
   if (m_viewFolder) m_viewFolder->GetFlags(&folderFlags);
   // check if it's a virtual folder - if so, we should get the cached hits
   // from the db, and set a flag saying that we're using cached values.
@@ -380,16 +400,20 @@ nsMsgQuickSearchDBView::OnNewSearch() {
         else
           break;
         cachedHits->HasMoreElements(&hasMore);
       }
       if (mTree) mTree->EndUpdateBatch();
       if (mJSTree) mJSTree->EndUpdateBatch();
     }
   }
+
+  // Prevent updates for every message found. This batch ends in OnSearchDone.
+  if (mJSTree) mJSTree->BeginUpdateBatch();
+
   return NS_OK;
 }
 
 nsresult nsMsgQuickSearchDBView::GetFirstMessageHdrToDisplayInThread(
     nsIMsgThread* threadHdr, nsIMsgDBHdr** result) {
   uint32_t numChildren;
   nsresult rv = NS_OK;
   uint8_t minLevel = 0xff;
diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.h b/mailnews/base/src/nsMsgQuickSearchDBView.h
--- a/mailnews/base/src/nsMsgQuickSearchDBView.h
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.h
@@ -58,16 +58,17 @@ class nsMsgQuickSearchDBView : public ns
 
  protected:
   virtual ~nsMsgQuickSearchDBView();
   nsWeakPtr m_searchSession;
   nsTArray<nsMsgKey> m_origKeys;
   bool m_usingCachedHits;
   bool m_cacheEmpty;
   nsCOMArray<nsIMsgDBHdr> m_hdrHits;
+  int m_batchSize;
   virtual nsresult AddHdr(nsIMsgDBHdr* msgHdr,
                           nsMsgViewIndex* resultIndex = nullptr) override;
   virtual nsresult OnNewHeader(nsIMsgDBHdr* newHdr, nsMsgKey aParentKey,
                                bool ensureListed) override;
   virtual nsresult DeleteMessages(nsIMsgWindow* window,
                                   nsTArray<nsMsgViewIndex> const& selection,
                                   bool deleteStorage) override;
   virtual nsresult SortThreads(nsMsgViewSortTypeValue sortType,
