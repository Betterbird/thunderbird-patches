# HG changeset patch
# User welpy-cw <h.w.forms@arcor.de>
# Date 1705266959 -3600
# Parent  63fd491bd49c8ff878110325ad8e945ff549fc59
Bug 1849650 - Improve quick filter responsiveness.
* * *
Bug 1849650 - Fix quick filter performance regression caused by bug 1827042. r=mkmelin

Calling 'ensureThreadStateForQuickSearchView()' before all messages have been loaded interferes
with the batch processing of search hits, which has a severe performance impact on collapsed
threaded single-folder views, especially when sorted by date ascending.

Differential Revision: https://phabricator.services.mozilla.com/D198506

diff --git a/mail/base/content/mailCommon.js b/mail/base/content/mailCommon.js
--- a/mail/base/content/mailCommon.js
+++ b/mail/base/content/mailCommon.js
@@ -1037,23 +1037,35 @@ var dbViewWrapperListener = {
     window.quickFilterBar?.onFolderChanged();
   },
   onDisplayingFolder() {},
   onLeavingFolder() {},
   onMessagesLoaded(all) {
     if (!window.threadPane) {
       return;
     }
+
+    // nsMsgQuickSearchDBView::SortThreads leaves all threads expanded in any
+    // case.
+    if (
+      all &&
+      gViewWrapper.isSingleFolder &&
+      gViewWrapper.search.hasSearchTerms &&
+      gViewWrapper.showThreaded &&
+      !gViewWrapper._threadExpandAll
+    ) {
+      gViewWrapper.dbView.doCommand(Ci.nsMsgViewCommandType.collapseAll);
+    }
+
     // Try to restore what was selected. Keep the saved selection (if there is
     // one) until we have all of the messages. This will also reveal selected
     // messages in collapsed threads.
     window.threadPane.restoreSelection({ discard: all });
 
     if (all || gViewWrapper.search.hasSearchTerms) {
-      window.threadPane.ensureThreadStateForQuickSearchView();
       let newMessageFound = false;
       if (window.threadPane.scrollToNewMessage) {
         try {
           let index = gDBView.findIndexOfMsgHdr(gFolder.firstNewMessage, true);
           if (index != nsMsgViewIndex_None) {
             window.threadTree.scrollToIndex(index, true);
             newMessageFound = true;
           }
diff --git a/mail/base/content/quickFilterBar.js b/mail/base/content/quickFilterBar.js
--- a/mail/base/content/quickFilterBar.js
+++ b/mail/base/content/quickFilterBar.js
@@ -49,16 +49,24 @@ var quickFilterBar = {
    * The UI element that last triggered a search. This can be used to avoid
    * updating the element when a search returns - in particular the text box,
    * which the user may still be typing into.
    *
    * @type {Element}
    */
   activeElement: null,
 
+  /**
+   * This identifies the timer for the deferred search, which is cleared when
+   * another deferred search is scheduled.
+   *
+   * @type {integer}
+   */
+  searchTimeoutID: 0,
+
   init() {
     this._bindUI();
     this.updateRovingTab();
 
     // Enable any filters set by the user.
     // If keep filters applied/sticky setting is enabled, enable sticky.
     let xulStickyVal = Services.xulStore.getValue(
       XULSTORE_URL,
@@ -485,17 +493,23 @@ var quickFilterBar = {
    * For UI responsiveness purposes, defer the actual initiation of the search
    * until after the button click handling has completed and had the ability
    * to paint such.
    *
    * @param {Element} activeElement - The element that triggered a call to
    *   this function, if any.
    */
   deferredUpdateSearch(activeElement) {
-    setTimeout(() => this.updateSearch(activeElement), 10);
+    if (this.searchTimeoutID) {
+      clearTimeout(this.searchTimeoutID);
+    }
+    this.searchTimeoutID = setTimeout(
+      () => this.updateSearch(activeElement),
+      100
+    );
   },
 
   /**
    * Update the user terms part of the search definition to reflect the active
    * filterer's current state.
    *
    * @param {Element?} activeElement - The element that triggered a call to
    *   this function, if any.
