# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1683049442 -7200
# Parent  5072c9c61430b767bf94fb01d8f8c048358baeee
Bug 1737245 - Add charset detection also for the 'forward/edit as new' codepath.

diff --git a/mailnews/mime/src/mimedrft.cpp b/mailnews/mime/src/mimedrft.cpp
--- a/mailnews/mime/src/mimedrft.cpp
+++ b/mailnews/mime/src/mimedrft.cpp
@@ -1189,19 +1189,20 @@ static void mime_parse_stream_complete(n
 
     NS_ASSERTION(mdd->options == mdd->obj->options,
                  "mime draft options not same as obj->options");
     mime_free(mdd->obj);
     mdd->obj = 0;
     if (mdd->options) {
       // save the override flag before it's unavailable
       charsetOverride = mdd->options->override_charset;
-      if ((!mdd->mailcharset || charsetOverride) &&
-          mdd->options->default_charset) {
-        PR_Free(mdd->mailcharset);
+      // Override the charset only if requested. If the message doesn't have
+      // one and we're not overriding, we'll detect it later.
+      if (charsetOverride && mdd->options->default_charset) {
+        PR_FREEIF(mdd->mailcharset);
         mdd->mailcharset = strdup(mdd->options->default_charset);
       }
 
       // mscott: aren't we leaking a bunch of strings here like the charset
       // strings and such?
       delete mdd->options;
       mdd->options = 0;
     }
@@ -1436,32 +1437,43 @@ static void mime_parse_stream_complete(n
 
           // Convert the body to UTF-8
           char* mimeCharset = nullptr;
           // Get a charset from the header if no override is set.
           if (!charsetOverride)
             mimeCharset = MimeHeaders_get_parameter(
                 mdd->messageBody->m_type.get(), "charset", nullptr, nullptr);
           // If no charset is specified in the header then use the default.
-          char* bodyCharset = mimeCharset ? mimeCharset : mdd->mailcharset;
-          if (bodyCharset) {
+          nsAutoCString bodyCharset;
+          if (mimeCharset) {
+            bodyCharset.Adopt(mimeCharset);
+          } else if (mdd->mailcharset) {
+            bodyCharset.Assign(mdd->mailcharset);
+          }
+          if (bodyCharset.IsEmpty()) {
+            nsAutoCString detectedCharset;
+            // We need to detect it.
+            rv = MIME_detect_charset(body, bodyLen, detectedCharset);
+            if (NS_SUCCEEDED(rv) && !detectedCharset.IsEmpty()) {
+              bodyCharset = detectedCharset;
+            }
+          }
+          if (!bodyCharset.IsEmpty()) {
             nsAutoString tmpUnicodeBody;
-            rv = nsMsgI18NConvertToUnicode(nsDependentCString(bodyCharset),
-                                           nsDependentCString(body),
-                                           tmpUnicodeBody);
+            rv = nsMsgI18NConvertToUnicode(
+                bodyCharset, nsDependentCString(body), tmpUnicodeBody);
             if (NS_FAILED(rv))  // Tough luck, ASCII/ISO-8859-1 then...
               CopyASCIItoUTF16(nsDependentCString(body), tmpUnicodeBody);
 
             char* newBody = ToNewUTF8String(tmpUnicodeBody);
             if (newBody) {
               PR_Free(body);
               body = newBody;
             }
           }
-          PR_FREEIF(mimeCharset);
         }
       }
 
       bool convertToPlainText = false;
       if (forward_inline) {
         if (mdd->identity) {
           bool identityComposeHTML;
           mdd->identity->GetComposeHtml(&identityComposeHTML);
