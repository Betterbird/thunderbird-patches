# HG changeset patch
# User Masayuki Nakano <masayuki@d-toybox.com>
# Date 1689123159 0
# Node ID 2932851a8379833597a1b3068591cd80e9cfccdc
# Parent  8af5adb5ae937869ae26ef844e3ea8414c6412f4
Bug 1840500 - Make `HTMLEditor::ClearStyleAt()` remove `<br>` for reuse before removing its parent from the tree r=m_kato

Once a parent node is removed from the tree, the node may become not editable
because editable state "inherits" from ancestor nodes.
`HTMLEditor::ClearStyleAt` cleans up unnecessary parent inline elements first,
but if `<br>` element which should be reused in the block parent is contained
the inline elements, `HTMLEditUtils::IsRemovableNode()` will start returning
`false` for the `<br>` element because of in a document fragment which do not
contain an element whose `contenteditable` is `true`.  Then,
`MoveNodeWithTransaction` fails to move it because of unremovable.

Therefore, this patch makes the method move `<br>` element before removing
inline elements and use `InsertNodeWithTransaction` instead if `<br>` element
is an orphan node.

Differential Revision: https://phabricator.services.mozilla.com/D182640

diff --git a/editor/libeditor/HTMLStyleEditor.cpp b/editor/libeditor/HTMLStyleEditor.cpp
--- a/editor/libeditor/HTMLStyleEditor.cpp
+++ b/editor/libeditor/HTMLStyleEditor.cpp
@@ -2391,29 +2391,40 @@ Result<EditorDOMPoint, nsresult> HTMLEdi
     // And if it has only padding <br> element, we should move it into the
     // previous <i> which will have new content.
     bool seenBR = false;
     if (HTMLEditUtils::IsEmptyNode(
             *unwrappedSplitResultAtStartOfNextNode.GetNextContent(),
             {EmptyCheckOption::TreatListItemAsVisible,
              EmptyCheckOption::TreatTableCellAsVisible},
             &seenBR)) {
+      if (seenBR && !brElement) {
+        brElement = HTMLEditUtils::GetFirstBRElement(
+            *unwrappedSplitResultAtStartOfNextNode.GetNextContentAs<Element>());
+      }
+      // Once we remove <br> element's parent, we lose the rights to remove it
+      // from the parent because the parent becomes not editable.  Therefore, we
+      // need to delete the <br> element before removing its parents for reusing
+      // it later.
+      if (brElement) {
+        nsresult rv = DeleteNodeWithTransaction(*brElement);
+        if (NS_FAILED(rv)) {
+          NS_WARNING("EditorBase::DeleteNodeWithTransaction() failed");
+          return Err(rv);
+        }
+      }
       // Delete next node if it's empty.
-      // MOZ_KnownLive(unwrappedSplitResultAtStartOfNextNode.GetNextContent()):
-      // It's grabbed by unwrappedSplitResultAtStartOfNextNode.
+      // MOZ_KnownLive because of grabbed by
+      // unwrappedSplitResultAtStartOfNextNode.
       nsresult rv = DeleteNodeWithTransaction(MOZ_KnownLive(
           *unwrappedSplitResultAtStartOfNextNode.GetNextContent()));
       if (NS_FAILED(rv)) {
         NS_WARNING("EditorBase::DeleteNodeWithTransaction() failed");
         return Err(rv);
       }
-      if (seenBR && !brElement) {
-        brElement = HTMLEditUtils::GetFirstBRElement(
-            *unwrappedSplitResultAtStartOfNextNode.GetNextContentAs<Element>());
-      }
     }
   }
 
   if (!unwrappedSplitResultAtStartOfNextNode.Handled()) {
     return std::move(pointToPutCaret);
   }
 
   // If there is no content, we should return here.
@@ -2439,26 +2450,35 @@ Result<EditorDOMPoint, nsresult> HTMLEdi
           ? firstLeafChildOfPreviousNode
           : unwrappedSplitResultAtStartOfNextNode.GetPreviousContent(),
       0);
 
   // If the right node starts with a `<br>`, suck it out of right node and into
   // the left node left node.  This is so we you don't revert back to the
   // previous style if you happen to click at the end of a line.
   if (brElement) {
-    {
+    if (brElement->GetParentNode()) {
       Result<MoveNodeResult, nsresult> moveBRElementResult =
           MoveNodeWithTransaction(*brElement, pointToPutCaret);
       if (MOZ_UNLIKELY(moveBRElementResult.isErr())) {
         NS_WARNING("HTMLEditor::MoveNodeWithTransaction() failed");
         return moveBRElementResult.propagateErr();
       }
-      MoveNodeResult unwrappedMoveBRElementResult =
-          moveBRElementResult.unwrap();
-      unwrappedMoveBRElementResult.MoveCaretPointTo(
+      moveBRElementResult.unwrap().MoveCaretPointTo(
+          pointToPutCaret, *this,
+          {SuggestCaret::OnlyIfHasSuggestion,
+           SuggestCaret::OnlyIfTransactionsAllowedToDoIt});
+    } else {
+      Result<CreateElementResult, nsresult> insertBRElementResult =
+          InsertNodeWithTransaction<Element>(*brElement, pointToPutCaret);
+      if (MOZ_UNLIKELY(insertBRElementResult.isErr())) {
+        NS_WARNING("EditorBase::InsertNodeWithTransaction() failed");
+        return insertBRElementResult.propagateErr();
+      }
+      insertBRElementResult.unwrap().MoveCaretPointTo(
           pointToPutCaret, *this,
           {SuggestCaret::OnlyIfHasSuggestion,
            SuggestCaret::OnlyIfTransactionsAllowedToDoIt});
     }
 
     if (unwrappedSplitResultAtStartOfNextNode.GetNextContent() &&
         unwrappedSplitResultAtStartOfNextNode.GetNextContent()
             ->IsInComposedDoc()) {
