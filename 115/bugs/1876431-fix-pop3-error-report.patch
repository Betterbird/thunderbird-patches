# HG changeset patch
# User Geoff Lankow <geoff@darktrojan.net>
# Date 1706556020 -3600
# Node ID 2557964c07d3740db3554b496fc2f9400fbf15b7
# Parent  f9b478b6f8c5da3fa65f56c99d4bb03a0e8a7de6
Bug 1876431 - Report POP3 connection errors to the user. r=mkmelin

This patch adds a missing part to Pop3Client (essentially copied from NntpClient) and fixes a test broken by the new behaviour.

Differential Revision: https://phabricator.services.mozilla.com/D199596

diff --git a/mailnews/local/src/Pop3Client.jsm b/mailnews/local/src/Pop3Client.jsm
--- a/mailnews/local/src/Pop3Client.jsm
+++ b/mailnews/local/src/Pop3Client.jsm
@@ -363,16 +363,48 @@ class Pop3Client {
   /**
    * The error event handler.
    *
    * @param {TCPSocketErrorEvent} event - The error event.
    */
   _onError = async event => {
     this._logger.error(`${event.name}: a ${event.message} error occurred`);
     this._server.serverBusy = false;
+    let errorName;
+    switch (event.errorCode) {
+      case Cr.NS_ERROR_UNKNOWN_HOST:
+      case Cr.NS_ERROR_UNKNOWN_PROXY_HOST:
+        errorName = "unknownHostError";
+        break;
+      case Cr.NS_ERROR_CONNECTION_REFUSED:
+        errorName = "connectionRefusedError";
+        break;
+      case Cr.NS_ERROR_PROXY_CONNECTION_REFUSED:
+        errorName = "connectionRefusedError";
+        break;
+      case Cr.NS_ERROR_NET_TIMEOUT:
+        errorName = "netTimeoutError";
+        break;
+      case Cr.NS_ERROR_NET_RESET:
+        errorName = "netResetError";
+        break;
+      case Cr.NS_ERROR_NET_INTERRUPT:
+        errorName = "netInterruptError";
+        break;
+    }
+    if (errorName) {
+      const bundle = Services.strings.createBundle(
+        "chrome://messenger/locale/messenger.properties"
+      );
+      const errorMessage = bundle.formatStringFromName(errorName, [
+        this._server.hostName,
+      ]);
+      MailServices.mailSession.alertUser(errorMessage, this.runningUri);
+    }
+
     this.quit();
     let secInfo =
       await event.target.transport?.tlsSocketControl?.asyncGetSecurityInfo();
     if (secInfo) {
       this._logger.error(`SecurityError info: ${secInfo.errorCodeString}`);
       if (secInfo.failedCertChain.length) {
         let chain = secInfo.failedCertChain.map(c => {
           return c.commonName + "; serial# " + c.serialNumber;
