# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1695376116 -7200
# Node ID 33b6830d06ed871912f3c56a7789d21a2378812a
# Parent  6a6a411a7a2d46ee534cf551dae82c190e85d4a9
Bug 1825374 - Folder server was not found for IP hostname ending in dot. r=babolivier

FQDN hostnames can have an ending dot. But for an IP that wouldn't mean anything.

Differential Revision: https://phabricator.services.mozilla.com/D188691

diff --git a/mailnews/base/src/nsMsgAccountManager.cpp b/mailnews/base/src/nsMsgAccountManager.cpp
--- a/mailnews/base/src/nsMsgAccountManager.cpp
+++ b/mailnews/base/src/nsMsgAccountManager.cpp
@@ -1872,16 +1872,26 @@ nsresult nsMsgAccountManager::findServer
 
     if (!server) continue;
 
     nsresult rv;
     nsCString thisHostname;
     rv = server->GetHostName(thisHostname);
     if (NS_FAILED(rv)) continue;
 
+    // If the hostname was a IP with trailing dot, that dot gets removed
+    // during URI mutation. We may well be here in findServerInternal to
+    // find a server from a folder URI. Remove the trailing dot so we can
+    // find the server.
+    nsCString thisHostnameNoDot(thisHostname);
+    if (!thisHostname.IsEmpty() &&
+        thisHostname.CharAt(thisHostname.Length() - 1) == '.') {
+      thisHostnameNoDot.Cut(thisHostname.Length() - 1, 1);
+    }
+
     nsCString thisUsername;
     rv = server->GetUsername(thisUsername);
     if (NS_FAILED(rv)) continue;
 
     nsCString thisType;
     rv = server->GetType(thisType);
     if (NS_FAILED(rv)) continue;
 
@@ -1893,17 +1903,19 @@ nsresult nsMsgAccountManager::findServer
         continue;
       }
     }
 
     // treat "" as a wild card, so if the caller passed in "" for the desired
     // attribute treat it as a match
     if ((type.IsEmpty() || thisType.Equals(type)) &&
         (hostname.IsEmpty() ||
-         thisHostname.Equals(hostname, nsCaseInsensitiveCStringComparator)) &&
+         thisHostname.Equals(hostname, nsCaseInsensitiveCStringComparator) ||
+         thisHostnameNoDot.Equals(hostname,
+                                  nsCaseInsensitiveCStringComparator)) &&
         (!(port != 0) || (port == thisPort)) &&
         (username.IsEmpty() || thisUsername.Equals(username))) {
       // stop on first find; cache for next time
       SetLastServerFound(server, hostname, username, port, type);
 
       NS_ADDREF(*aResult = server);  // Was populated from member variable.
       return NS_OK;
     }
