# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1646757507 -3600
#      Tue Mar 08 17:38:27 2022 +0100
# Node ID edb53d77cf04d75032c6e399474b903cfcae980a
# Parent  028f940ea05ef7e51e53a4cdcb4468067bac6160
Bug 359303/bug 1769534 - don't replace NBSP with ASCII space unless adjacent to ASCII space.

This is based on the idea of Henri Sivonen from https://bugzilla.mozilla.org/show_bug.cgi?id=359303#c98:
..., I suggest changing an NBSP to an ASCII space upon plain text clipboard export only if it is adjacent
to an ASCII space. This would leave non-editor-generated NBSP intact, and I think it is a legitimate concern
to want those to be left intact e.g. in the case of French quotation marks.

Firefox adopted the change in bug 1769534 here https://hg.mozilla.org/mozilla-central/rev/34c1c9be027d#l9.19
and later backed it out due to complaints that copying code examples with NBSP padding from some websites
resulted in unexpected results.

diff --git a/dom/serializers/nsPlainTextSerializer.cpp b/dom/serializers/nsPlainTextSerializer.cpp
--- a/dom/serializers/nsPlainTextSerializer.cpp
+++ b/dom/serializers/nsPlainTextSerializer.cpp
@@ -101,19 +101,40 @@ static void DetermineLineBreak(const int
     // Platform/default
     aLineBreak.AssignLiteral(NS_ULINEBREAK);
   }
 }
 
 void nsPlainTextSerializer::CurrentLine::MaybeReplaceNbspsInContent(
     const int32_t aFlags) {
   if (!(aFlags & nsIDocumentEncoder::OutputPersistNBSP)) {
-    // First, replace all nbsp characters with spaces,
-    // which the unicode encoder won't do for us.
-    mContent.ReplaceChar(kNBSP, kSPACE);
+    // Replace NBSP characters with spaces if they are adjacent to a space.
+    int32_t length = mContent.Length();
+    bool containsSpace = false;
+    bool containsNBSP = false;
+    // Inspect string and promote spaces to the right.
+    for (int32_t i = 0; i < length; i++) {
+      if (mContent[i] == kSPACE) containsSpace = true;
+      if (mContent[i] == kNBSP) {
+        if (i > 0 && mContent[i - 1] == kSPACE) {
+          mContent.SetCharAt(kSPACE, i);
+        } else {
+          containsNBSP = true;
+        }
+      }
+    }
+    if (containsSpace && containsNBSP) {
+      // We found a space and didn't replace all NBSP, so reverse the loop and
+      // promote spaces to the left.
+      for (int32_t i = length - 2; i >= 0; i--) {
+        if (mContent[i] == kNBSP && mContent[i + 1] == kSPACE) {
+          mContent.SetCharAt(kSPACE, i);
+        }
+      }
+    }
   }
 }
 
 void nsPlainTextSerializer::CurrentLine::ResetContentAndIndentationHeader() {
   mContent.Truncate();
   mIndentation.mHeader.Truncate();
 }
 
