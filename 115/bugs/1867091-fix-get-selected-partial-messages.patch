# HG changeset patch
# User welpy-cw <h.w.forms@arcor.de>
# Date 1707948399 -3600
# Node ID 30b899294372aefb4b6708dcd7e49167acec7780
# Parent  6d8207f63b89a0fe82560562724413f0cfc04ee2
Bug 1867091 - Fix "Get selected messages" command. r=BenC

- Enable the "Get selected messages" command when applicable.
- Remove partial messages that have been completed by this command.
- Fix activity message in status bar.

Differential Revision: https://phabricator.services.mozilla.com/D200827

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -7496,17 +7496,17 @@ commandController.registerCallback(
   () =>
     gViewWrapper.dbView.doCommand(
       Ci.nsMsgViewCommandType.downloadSelectedForOffline
     ),
   () =>
     gFolder &&
     !gFolder.isServer &&
     MailOfflineMgr.isOnline() &&
-    gViewWrapper.dbView.selectedCount > 0
+    gViewWrapper.dbView.numSelected > 0
 );
 
 var sortController = {
   handleCommand(event) {
     switch (event.target.value) {
       case "ascending":
         this.sortAscending();
         threadPane.restoreSortIndicator();
diff --git a/mailnews/local/public/nsIMsgLocalMailFolder.idl b/mailnews/local/public/nsIMsgLocalMailFolder.idl
--- a/mailnews/local/public/nsIMsgLocalMailFolder.idl
+++ b/mailnews/local/public/nsIMsgLocalMailFolder.idl
@@ -96,21 +96,32 @@ interface nsIMsgLocalMailFolder : nsISup
    * @param aMessageCount The number of messages.
    * @param aMessages An array of pointers to strings containing entire message
    *                  bodies.
    * @return an array of nsIMsgDBHdr of the added messages
    */
   Array<nsIMsgDBHdr> addMessageBatch(in Array<ACString> aMessages);
 
   /**
-   * Functions for updating the UI while running downloadMessagesForOffline:
-   * delete the old message before adding its newly downloaded body, and
-   * select the new message after it has replaced the old one
+   * Check if DownloadMessagesForOffline() has stored a message header of
+   * a partial message with the same message ID in mDownloadPartialMessages.
+   * If so, remove the header from that array and return it.
+   *
+   * This method is only invoked by nsPop3Sink::IncorporateComplete.
+   *
+   * @param newHdr The message header to match.
+   * @return If found, the message header of the partial message, else nullptr.
    */
-  void deleteDownloadMsg(in nsIMsgDBHdr aMsgHdr);
+  nsIMsgDBHdr retrieveHdrOfPartialMessage(in nsIMsgDBHdr newHdr);
+
+  /**
+   * Notify about deletion of partial messages not existing anymore on the server.
+   *
+   * This method is only invoked by nsPop3Sink::CheckPartialMessages.
+   */
   void notifyDelete();
 
   /**
    * Functions for grubbing through a folder to find the Uidl for a
    * given msgDBHdr.
    */
   [noscript] void getFolderScanState(in nsLocalFolderScanState aState);
   [noscript] void getUidlFromFolder(in nsLocalFolderScanState aState, in nsIMsgDBHdr aMsgHdr);
diff --git a/mailnews/local/src/Pop3Client.jsm b/mailnews/local/src/Pop3Client.jsm
--- a/mailnews/local/src/Pop3Client.jsm
+++ b/mailnews/local/src/Pop3Client.jsm
@@ -1111,16 +1111,17 @@ class Pop3Client {
               ...uidlState,
               messageNumber,
               status: UIDL_DELETE,
             });
           } else if (
             [UIDL_FETCH_BODY, UIDL_DELETE].includes(uidlState.status)
           ) {
             // Fetch the full message.
+            this._newMessageTotal++;
             this._messagesToHandle.push({
               ...uidlState,
               messageNumber,
               status: uidlState.status,
             });
           } else {
             // Do nothing to this message.
             this._newUidlMap.set(uidl, uidlState);
diff --git a/mailnews/local/src/nsLocalMailFolder.cpp b/mailnews/local/src/nsLocalMailFolder.cpp
--- a/mailnews/local/src/nsLocalMailFolder.cpp
+++ b/mailnews/local/src/nsLocalMailFolder.cpp
@@ -91,17 +91,17 @@ nsLocalFolderScanState::~nsLocalFolderSc
 ///////////////////////////////////////////////////////////////////////////////
 
 nsMsgLocalMailFolder::nsMsgLocalMailFolder(void)
     : mCopyState(nullptr),
       mHaveReadNameFromDB(false),
       mInitialized(false),
       mCheckForNewMessagesAfterParsing(false),
       m_parsingFolder(false),
-      mDownloadState(DOWNLOAD_STATE_NONE) {}
+      mDownloadInProgress(false) {}
 
 nsMsgLocalMailFolder::~nsMsgLocalMailFolder(void) {}
 
 NS_IMPL_ISUPPORTS_INHERITED(nsMsgLocalMailFolder, nsMsgDBFolder,
                             nsICopyMessageListener, nsIMsgLocalMailFolder)
 
 ////////////////////////////////////////////////////////////////////////////////
 
@@ -2703,74 +2703,60 @@ nsMsgLocalMailFolder::MarkMsgsOnPop3Serv
   // need to do this for all pop3 mail servers that had messages deleted.
   uint32_t serverCount = pop3Servers.Count();
   for (uint32_t index = 0; index < serverCount; index++)
     pop3Servers[index]->MarkMessages();
 
   return rv;
 }
 
-NS_IMETHODIMP nsMsgLocalMailFolder::DeleteDownloadMsg(nsIMsgDBHdr* aMsgHdr) {
-  uint32_t numMsgs;
+NS_IMETHODIMP nsMsgLocalMailFolder::RetrieveHdrOfPartialMessage(
+    nsIMsgDBHdr* newHdr, nsIMsgDBHdr** oldHdr) {
+  NS_ENSURE_ARG_POINTER(newHdr);
+  NS_ENSURE_ARG_POINTER(oldHdr);
+  *oldHdr = nullptr;
+
   char* newMsgId;
-
-  // This method is only invoked through DownloadMessagesForOffline()
-  if (mDownloadState != DOWNLOAD_STATE_NONE) {
-    // We only remember the first key, no matter how many
-    // messages were originally selected.
-    if (mDownloadState == DOWNLOAD_STATE_INITED) {
-      aMsgHdr->GetMessageKey(&mDownloadSelectKey);
-      mDownloadState = DOWNLOAD_STATE_GOTMSG;
-    }
-
-    aMsgHdr->GetMessageId(&newMsgId);
-
-    // Walk through all the selected headers, looking for a matching
-    // Message-ID.
-    numMsgs = mDownloadMessages.Length();
-    for (uint32_t i = 0; i < numMsgs; i++) {
-      nsresult rv;
-      nsCOMPtr<nsIMsgDBHdr> msgDBHdr = mDownloadMessages[i];
-      char* oldMsgId = nullptr;
-      msgDBHdr->GetMessageId(&oldMsgId);
-
-      // Delete the first match and remove it from the array
-      if (!PL_strcmp(newMsgId, oldMsgId)) {
-        rv = GetDatabase();
-        if (!mDatabase) return rv;
-
-        UpdateNewMsgHdr(msgDBHdr, aMsgHdr);
-
-        mDatabase->DeleteHeader(msgDBHdr, nullptr, false, true);
-        mDownloadMessages.RemoveElementAt(i);
-        break;
-      }
+  newHdr->GetMessageId(&newMsgId);
+
+  // Walk through all the selected headers, looking for a matching
+  // Message-ID.
+  for (uint32_t i = 0; i < mDownloadPartialMessages.Length(); i++) {
+    nsCOMPtr<nsIMsgDBHdr> msgDBHdr = mDownloadPartialMessages[i];
+    char* oldMsgId = nullptr;
+    msgDBHdr->GetMessageId(&oldMsgId);
+
+    // Return the first match and remove it from the array
+    if (!PL_strcmp(newMsgId, oldMsgId)) {
+      msgDBHdr.forget(oldHdr);
+      mDownloadPartialMessages.RemoveElementAt(i);
+      break;
     }
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgLocalMailFolder::DownloadMessagesForOffline(
     nsTArray<RefPtr<nsIMsgDBHdr>> const& aMessages, nsIMsgWindow* aWindow) {
-  if (mDownloadState != DOWNLOAD_STATE_NONE)
+  if (mDownloadInProgress)
     return NS_ERROR_FAILURE;  // already has a download in progress
 
   // We're starting a download...
-  mDownloadState = DOWNLOAD_STATE_INITED;
+  mDownloadInProgress = true;
 
   MarkMsgsOnPop3Server(aMessages, POP3_FETCH_BODY);
 
   // Pull out all the PARTIAL messages into a new array
   nsresult rv;
   for (nsIMsgDBHdr* hdr : aMessages) {
     uint32_t flags = 0;
     hdr->GetFlags(&flags);
     if (flags & nsMsgMessageFlags::Partial) {
-      mDownloadMessages.AppendElement(hdr);
+      mDownloadPartialMessages.AppendElement(hdr);
     }
   }
   mDownloadWindow = aWindow;
 
   nsCOMPtr<nsIMsgIncomingServer> server;
   rv = GetServer(getter_AddRefs(server));
   NS_ENSURE_SUCCESS(rv, NS_MSG_INVALID_OR_MISSING_SERVER);
 
@@ -2909,19 +2895,19 @@ nsMsgLocalMailFolder::OnStartRunningUrl(
     }
   }
   return nsMsgDBFolder::OnStartRunningUrl(aUrl);
 }
 
 NS_IMETHODIMP
 nsMsgLocalMailFolder::OnStopRunningUrl(nsIURI* aUrl, nsresult aExitCode) {
   // If we just finished a DownloadMessages call, reset...
-  if (mDownloadState != DOWNLOAD_STATE_NONE) {
-    mDownloadState = DOWNLOAD_STATE_NONE;
-    mDownloadMessages.Clear();
+  if (mDownloadInProgress) {
+    mDownloadInProgress = false;
+    mDownloadPartialMessages.Clear();
     mDownloadWindow = nullptr;
     return nsMsgDBFolder::OnStopRunningUrl(aUrl, aExitCode);
   }
 
   nsresult rv;
   if (NS_SUCCEEDED(aExitCode)) {
     nsCOMPtr<nsIMsgMailSession> mailSession =
         do_GetService("@mozilla.org/messenger/services/session;1", &rv);
diff --git a/mailnews/local/src/nsLocalMailFolder.h b/mailnews/local/src/nsLocalMailFolder.h
--- a/mailnews/local/src/nsLocalMailFolder.h
+++ b/mailnews/local/src/nsLocalMailFolder.h
@@ -270,19 +270,14 @@ class nsMsgLocalMailFolder : public nsMs
   bool mCheckForNewMessagesAfterParsing;
   bool m_parsingFolder;
   nsCOMPtr<nsIUrlListener> mReparseListener;
   nsTArray<nsMsgKey> mSpamKeysToMove;
   nsresult setSubfolderFlag(const nsAString& aFolderName, uint32_t flags);
 
   // state variables for DownloadMessagesForOffline
 
-  nsCOMArray<nsIMsgDBHdr> mDownloadMessages;
+  nsCOMArray<nsIMsgDBHdr> mDownloadPartialMessages;
   nsCOMPtr<nsIMsgWindow> mDownloadWindow;
-  nsMsgKey mDownloadSelectKey;
-  uint32_t mDownloadState;
-#define DOWNLOAD_STATE_NONE 0
-#define DOWNLOAD_STATE_INITED 1
-#define DOWNLOAD_STATE_GOTMSG 2
-#define DOWNLOAD_STATE_DIDSEL 3
+  bool mDownloadInProgress;
 };
 
 #endif  // nsMsgLocalMailFolder_h__
diff --git a/mailnews/local/src/nsPop3Sink.cpp b/mailnews/local/src/nsPop3Sink.cpp
--- a/mailnews/local/src/nsPop3Sink.cpp
+++ b/mailnews/local/src/nsPop3Sink.cpp
@@ -594,18 +594,21 @@ nsPop3Sink::IncorporateComplete(nsIMsgWi
     if (!hdr) return NS_ERROR_FAILURE;
 
     nsCOMPtr<nsIMsgLocalMailFolder> localFolder = do_QueryInterface(m_folder);
 
     // If a header already exists for this message (for example, when
     // getting a complete message when a partial exists), then update the new
     // header from the old.
     nsCOMPtr<nsIMsgDBHdr> oldMsgHdr;
-    if (!m_origMessageUri.IsEmpty() && localFolder) {
-      rv = GetMsgDBHdrFromURI(m_origMessageUri, getter_AddRefs(oldMsgHdr));
+    if (localFolder) {
+      rv = !m_origMessageUri.IsEmpty()
+               ? GetMsgDBHdrFromURI(m_origMessageUri, getter_AddRefs(oldMsgHdr))
+               : localFolder->RetrieveHdrOfPartialMessage(
+                     hdr, getter_AddRefs(oldMsgHdr));
       if (NS_SUCCEEDED(rv) && oldMsgHdr) {
         localFolder->UpdateNewMsgHdr(oldMsgHdr, hdr);
       }
     }
     m_msgStore->FinishNewMessage(m_outFileStream, hdr);
     m_newMailParser->PublishMsgHeader(aMsgWindow);
     m_newMailParser->ApplyForwardAndReplyFilter(aMsgWindow);
     if (aSize) hdr->SetUint32Property("onlineSize", aSize);
