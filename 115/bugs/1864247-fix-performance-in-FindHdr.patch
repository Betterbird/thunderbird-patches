# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1699693176 -3600
# Parent  c2c552b71eb10f3cbf9042a72f7fdae7d0b253c9
Bug 1864247 - revert part of bug 1846885: Do not use GetMsgHdrForViewIndex() in FindHdr().

Change in about3Pane.js taken from https://phabricator.services.mozilla.com/D185238?vs=on&id=750056#toc

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -6160,18 +6160,21 @@ function selectMessage(msgHdr) {
     gDBView?.numSelected == 1 &&
     gDBView.hdrForFirstSelectedMessage == msgHdr
   ) {
     return;
   }
 
   let index = threadTree.view?.findIndexOfMsgHdr(msgHdr, true);
   // Change to correct folder if needed. We might not be in a folder, or the
-  // message might not be found in the current folder.
-  if (index === undefined || index === nsMsgViewIndex_None) {
+  // message might not be found in the current folder, or we found a different
+  // message with the same key (`findIndexOfMsgHdr` only checks keys).
+  if (index === undefined ||
+      index === nsMsgViewIndex_None ||
+      threadTree.view.getMsgHdrAt(index) != msgHdr) {
     threadPane.forgetSelection(msgHdr.folder.URI);
     displayFolder(msgHdr.folder.URI);
     index = threadTree.view.findIndexOfMsgHdr(msgHdr, true);
     threadTree.scrollToIndex(index, true);
   }
   threadTree.selectedIndex = index;
 }
 
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -4623,24 +4623,30 @@ nsMsgViewIndex nsMsgDBView::FindHdr(nsIM
       !(m_flags[viewIndex - 1] & nsMsgMessageFlags::Elided)) {
     viewIndex--;
   } else if (!allowDummy && m_flags[viewIndex] & MSG_VIEW_FLAG_DUMMY) {
     // We're not allowing dummies, and we found a dummy, look again
     // one past the dummy.
     return m_keys.IndexOf(msgKey, viewIndex + 1);
   }
 
+#if 0
+  The following code causes a severy performance regression for search views
+  since for them, GetMsgHdrForViewIndex() is a very expensive operation
+  opening all the databases involved in the view ... and potentially leaving
+  them open!
   // Check that the message we found matches the message we were looking for.
   if (viewIndex != nsMsgViewIndex_None) {
     nsCOMPtr<nsIMsgDBHdr> foundMsgHdr;
     nsresult rv = GetMsgHdrForViewIndex(viewIndex, getter_AddRefs(foundMsgHdr));
     if (NS_FAILED(rv) || foundMsgHdr != msgHdr) {
       viewIndex = nsMsgViewIndex_None;
     }
   }
+#endif
 
   return viewIndex;
 }
 
 nsMsgViewIndex nsMsgDBView::FindKey(nsMsgKey key, bool expand) {
   nsMsgViewIndex retIndex = nsMsgViewIndex_None;
   retIndex = (nsMsgViewIndex)(m_keys.IndexOf(key));
   // For dummy headers, try to expand if the caller says so. And if the thread
