# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1706552558 -3600
# Parent  28faf3e4992d44e028436ae127b722f86907d21d
NNN9 - Suppress unneeded logging to the error console.

diff --git a/toolkit/components/extensions/ExtensionChild.sys.mjs b/toolkit/components/extensions/ExtensionChild.sys.mjs
--- a/toolkit/components/extensions/ExtensionChild.sys.mjs
+++ b/toolkit/components/extensions/ExtensionChild.sys.mjs
@@ -667,16 +667,21 @@ class ProxyAPIImplementation extends Sch
       return;
     }
 
     let id = map.listeners.get(listener);
     map.listeners.delete(listener);
     map.ids.delete(id);
     map.removedIds.add(id);
 
+    // The following call throws if there is no actor.
+    // No benefit in calling it.
+    if (!this.childApiManager.conduit.actor) {
+      return;
+    }
     this.childApiManager.conduit.sendRemoveListener({
       childId: this.childApiManager.id,
       listenerId: id,
       path: this.path,
       alreadyLogged: this.alreadyLogged,
     });
   }
 
diff --git a/toolkit/components/extensions/ExtensionParent.sys.mjs b/toolkit/components/extensions/ExtensionParent.sys.mjs
--- a/toolkit/components/extensions/ExtensionParent.sys.mjs
+++ b/toolkit/components/extensions/ExtensionParent.sys.mjs
@@ -317,17 +317,19 @@ const ProxyMessenger = {
     }
 
     return sender;
   },
 
   getTopBrowsingContextId(tabId) {
     // If a tab alredy has content scripts, no need to check private browsing.
     let tab = apiManager.global.tabTracker.getTab(tabId, null);
-    if (!tab || (tab.browser || tab).getAttribute("pending") === "true") {
+    // tab.getAttribute("pending") throws, so the following doesn't work:
+    // if (!tab || (tab.browser || tab).getAttribute("pending") === "true") {
+    if (!tab || !tab.browser || tab.browser.getAttribute("pending") === "true") {
       // No receivers in discarded tabs, so bail early to keep the browser lazy.
       throw new ExtensionError(ERROR_NO_RECEIVERS);
     }
     let browser = tab.linkedBrowser || tab.browser;
     return browser.browsingContext.id;
   },
 
   // TODO: Rework/simplify this and getSender/getTopBC after bug 1580766.
@@ -1106,17 +1108,25 @@ ParentAPIManager = {
           data.path,
           end - start * 1000
         );
       }
     }
   },
 
   async recvAPICall(data, { actor }) {
-    let context = this.getContextById(data.childId);
+    let context;
+    // getContextById will throw if the context has been destroyed
+    // in the meantime.
+    try {
+      context = this.getContextById(data.childId);
+    } catch (ex) {
+      console.info(`No context for ${data.childId}`);
+      return;
+    }
     let target = actor.browsingContext?.top.embedderElement;
 
     verifyActorForContext(actor, context);
 
     let reply = result => {
       if (target && !context.parentMessageManager) {
         Services.console.logStringMessage(
           "Cannot send function call result: other side closed connection " +
diff --git a/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs b/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
--- a/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
+++ b/toolkit/components/passwordmgr/LoginManagerChild.sys.mjs
@@ -141,17 +141,22 @@ const observer = {
     loginManagerChild()._onNavigation(window.document);
   },
 
   // nsIObserver
   observe(subject, topic, data) {
     switch (topic) {
       case "autocomplete-did-enter-text": {
         let input = subject.QueryInterface(Ci.nsIAutoCompleteInput);
-        let { selectedIndex } = input.popup;
+        let selectedIndex;
+        try {
+          selectedIndex = input.popup.selectedIndex;
+        } catch (ex) {
+          selectedIndex = -1;
+        }
         if (selectedIndex < 0) {
           break;
         }
 
         let { focusedInput } = lazy.gFormFillService;
         if (focusedInput.nodePrincipal.isNullPrincipal) {
           // If we have a null principal then prevent any more password manager code from running and
           // incorrectly using the document `location`.
