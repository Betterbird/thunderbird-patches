# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1706135692 -3600
# Parent  28faf3e4992d44e028436ae127b722f86907d21d
Bug 1787577 - Switch mailcites from <span> to <div> element. Only needed for 115, not necessary since 123, bug 1858071.

diff --git a/editor/libeditor/HTMLEditorDataTransfer.cpp b/editor/libeditor/HTMLEditorDataTransfer.cpp
--- a/editor/libeditor/HTMLEditorDataTransfer.cpp
+++ b/editor/libeditor/HTMLEditorDataTransfer.cpp
@@ -3149,125 +3149,129 @@ nsresult HTMLEditor::InsertAsPlaintextQu
         return NS_ERROR_EDITOR_DESTROYED;
       }
       NS_WARNING_ASSERTION(
           NS_SUCCEEDED(rv),
           "HTMLEditor::PrepareInlineStylesForCaret() failed, but ignored");
     }
   }
 
-  // Wrap the inserted quote in a <span> so we can distinguish it. If we're
-  // inserting into the <body>, we use a <span> which is displayed as a block
-  // and sized to the screen using 98 viewport width units.
-  // We could use 100vw, but 98vw avoids a horizontal scroll bar where possible.
-  // All this is done to wrap overlong lines to the screen and not to the
-  // container element, the width-restricted body.
-  Result<RefPtr<Element>, nsresult> spanElementOrError =
+  // Wrap the inserted quote in a <div> or <span> so we can distinguish it. If
+  // we're inserting into the <body>, we use a <div> which is displayed as a
+  // block and sized to the screen using 98 viewport width units. We could use
+  // 100vw, but 98vw avoids a horizontal scroll bar where possible. All this is
+  // done to wrap overlong lines to the screen and not to the container element,
+  // the width-restricted body.
+  EditorDOMPoint pointToInsert(SelectionRef().AnchorRef());
+  if (!pointToInsert.IsSet()) {
+    return NS_ERROR_FAILURE;
+  }
+  bool useDiv = pointToInsert.IsContainerHTMLElement(nsGkAtoms::body);
+  Result<RefPtr<Element>, nsresult> contElementOrError =
       DeleteSelectionAndCreateElement(
-          *nsGkAtoms::span, [](HTMLEditor&, Element& aSpanElement,
-                               const EditorDOMPoint& aPointToInsert) {
+          useDiv ? *nsGkAtoms::div : *nsGkAtoms::span,
+          [](HTMLEditor&, Element& aContElement,
+             const EditorDOMPoint& aPointToInsert) {
             // Add an attribute on the pre node so we'll know it's a quotation.
-            DebugOnly<nsresult> rvIgnored = aSpanElement.SetAttr(
+            DebugOnly<nsresult> rvIgnored = aContElement.SetAttr(
                 kNameSpaceID_None, nsGkAtoms::mozquote, u"true"_ns,
-                aSpanElement.IsInComposedDoc());
+                aContElement.IsInComposedDoc());
             NS_WARNING_ASSERTION(
                 NS_SUCCEEDED(rvIgnored),
                 nsPrintfCString(
                     "Element::SetAttr(nsGkAtoms::mozquote, \"true\", %s) "
                     "failed",
-                    aSpanElement.IsInComposedDoc() ? "true" : "false")
+                    aContElement.IsInComposedDoc() ? "true" : "false")
                     .get());
             // Allow wrapping on spans so long lines get wrapped to the screen.
             if (aPointToInsert.IsContainerHTMLElement(nsGkAtoms::body)) {
-              DebugOnly<nsresult> rvIgnored = aSpanElement.SetAttr(
+              DebugOnly<nsresult> rvIgnored = aContElement.SetAttr(
                   kNameSpaceID_None, nsGkAtoms::style,
-                  nsLiteralString(u"white-space: pre-wrap; display: block; "
-                                  u"width: 98vw;"),
-                  false);
+                  u"white-space: pre-wrap; width: 98vw;"_ns, false);
               NS_WARNING_ASSERTION(
                   NS_SUCCEEDED(rvIgnored),
-                  "Element::SetAttr(nsGkAtoms::style, \"pre-wrap, block\", "
+                  "Element::SetAttr(nsGkAtoms::style, \"pre-wrap\", "
                   "false) failed, but ignored");
             } else {
               DebugOnly<nsresult> rvIgnored =
-                  aSpanElement.SetAttr(kNameSpaceID_None, nsGkAtoms::style,
+                  aContElement.SetAttr(kNameSpaceID_None, nsGkAtoms::style,
                                        u"white-space: pre-wrap;"_ns, false);
               NS_WARNING_ASSERTION(NS_SUCCEEDED(rvIgnored),
                                    "Element::SetAttr(nsGkAtoms::style, "
                                    "\"pre-wrap\", false) failed, but ignored");
             }
             return NS_OK;
           });
-  NS_WARNING_ASSERTION(spanElementOrError.isOk(),
+  NS_WARNING_ASSERTION(contElementOrError.isOk(),
                        "HTMLEditor::DeleteSelectionAndCreateElement(nsGkAtoms::"
-                       "span) failed, but ignored");
+                       "div/span) failed, but ignored");
 
   // If this succeeded, then set selection inside the pre
   // so the inserted text will end up there.
   // If it failed, we don't care what the return value was,
   // but we'll fall through and try to insert the text anyway.
-  if (spanElementOrError.isOk()) {
-    MOZ_ASSERT(spanElementOrError.inspect());
+  if (contElementOrError.isOk()) {
+    MOZ_ASSERT(contElementOrError.inspect());
     rv = CollapseSelectionToStartOf(
-        MOZ_KnownLive(*spanElementOrError.inspect()));
+        MOZ_KnownLive(*contElementOrError.inspect()));
     if (MOZ_UNLIKELY(rv == NS_ERROR_EDITOR_DESTROYED)) {
       NS_WARNING(
           "EditorBase::CollapseSelectionToStartOf() caused destroying the "
           "editor");
       return NS_ERROR_EDITOR_DESTROYED;
     }
     NS_WARNING_ASSERTION(
         NS_SUCCEEDED(rv),
         "EditorBase::CollapseSelectionToStartOf() failed, but ignored");
   }
 
   // TODO: We should insert text at specific point rather than at selection.
-  //       Then, we can do this before inserting the <span> element.
+  //       Then, we can do this before inserting the <div> element.
   if (aAddCites) {
     rv = InsertWithQuotationsAsSubAction(aQuotedText);
     if (NS_FAILED(rv)) {
       NS_WARNING("HTMLEditor::InsertWithQuotationsAsSubAction() failed");
       return rv;
     }
   } else {
     rv = InsertTextAsSubAction(aQuotedText, SelectionHandling::Delete);
     if (NS_FAILED(rv)) {
       NS_WARNING("EditorBase::InsertTextAsSubAction() failed");
       return rv;
     }
   }
 
   // XXX Why don't we check this before inserting the quoted text?
-  if (spanElementOrError.isErr()) {
+  if (contElementOrError.isErr()) {
     return NS_OK;
   }
 
   // Set the selection to just after the inserted node:
   EditorRawDOMPoint afterNewSpanElement(
-      EditorRawDOMPoint::After(*spanElementOrError.inspect()));
+      EditorRawDOMPoint::After(*contElementOrError.inspect()));
   NS_WARNING_ASSERTION(
       afterNewSpanElement.IsSet(),
-      "Failed to set after the new <span> element, but ignored");
+      "Failed to set after the new <div> element, but ignored");
   if (afterNewSpanElement.IsSet()) {
     nsresult rv = CollapseSelectionTo(afterNewSpanElement);
     if (MOZ_UNLIKELY(rv == NS_ERROR_EDITOR_DESTROYED)) {
       NS_WARNING(
           "EditorBase::CollapseSelectionTo() caused destroying the editor");
       return NS_ERROR_EDITOR_DESTROYED;
     }
     NS_WARNING_ASSERTION(
         NS_SUCCEEDED(rv),
         "EditorBase::CollapseSelectionTo() failed, but ignored");
   }
 
   // Note that if !aAddCites, aNodeInserted isn't set.
   // That's okay because the routines that use aAddCites
   // don't need to know the inserted node.
   if (aNodeInserted) {
-    spanElementOrError.unwrap().forget(aNodeInserted);
+    contElementOrError.unwrap().forget(aNodeInserted);
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP HTMLEditor::Rewrap(bool aRespectNewlines) {
   AutoEditActionDataSetter editActionData(*this, EditAction::eRewrap);
   nsresult rv = editActionData.CanHandleAndMaybeDispatchBeforeInputEvent();
