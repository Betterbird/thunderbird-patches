# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1699647862 -3600
# Parent  3e89bea47f3b62b1bdacffd1430196a502893888
Bug 1863798 - Use GetMostRecentBrowserWindow() to cater for mail client's main window.

diff --git a/widget/windows/ToastNotification.cpp b/widget/windows/ToastNotification.cpp
--- a/widget/windows/ToastNotification.cpp
+++ b/widget/windows/ToastNotification.cpp
@@ -668,18 +668,17 @@ RefPtr<ToastHandledPromise> ToastNotific
 void ToastNotification::SignalComNotificationHandled(
     const nsAString& aWindowsTag) {
   DWORD pid = 0;
 
   nsCOMPtr<nsIWindowMediator> winMediator(
       do_GetService(NS_WINDOWMEDIATOR_CONTRACTID));
   if (winMediator) {
     nsCOMPtr<mozIDOMWindowProxy> navWin;
-    winMediator->GetMostRecentWindow(u"navigator:browser",
-                                     getter_AddRefs(navWin));
+    winMediator->GetMostRecentBrowserWindow(getter_AddRefs(navWin));
     if (navWin) {
       nsCOMPtr<nsIWidget> widget =
           WidgetUtils::DOMWindowToWidget(nsPIDOMWindowOuter::From(navWin));
       if (widget) {
         HWND hwnd = (HWND)widget->GetNativeData(NS_NATIVE_WINDOW);
         GetWindowThreadProcessId(hwnd, &pid);
       } else {
         MOZ_LOG(sWASLog, LogLevel::Debug, ("Failed to get widget"));
diff --git a/widget/windows/ToastNotificationHandler.cpp b/widget/windows/ToastNotificationHandler.cpp
--- a/widget/windows/ToastNotificationHandler.cpp
+++ b/widget/windows/ToastNotificationHandler.cpp
@@ -784,18 +784,17 @@ ToastNotificationHandler::OnActivate(
       mAlertListener->Observe(nullptr, "alertdisablecallback", mCookie.get());
     } else if (mClickable) {
       // When clicking toast, focus moves to another process, but we want to set
       // focus on Firefox process.
       nsCOMPtr<nsIWindowMediator> winMediator(
           do_GetService(NS_WINDOWMEDIATOR_CONTRACTID));
       if (winMediator) {
         nsCOMPtr<mozIDOMWindowProxy> navWin;
-        winMediator->GetMostRecentWindow(u"navigator:browser",
-                                         getter_AddRefs(navWin));
+        winMediator->GetMostRecentBrowserWindow(getter_AddRefs(navWin));
         if (navWin) {
           nsCOMPtr<nsIWidget> widget =
               WidgetUtils::DOMWindowToWidget(nsPIDOMWindowOuter::From(navWin));
           if (widget) {
             SetForegroundWindow(
                 static_cast<HWND>(widget->GetNativeData(NS_NATIVE_WINDOW)));
           }
         }
