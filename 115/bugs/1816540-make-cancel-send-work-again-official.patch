# HG changeset patch
# User Gene Smith <gds@chartertn.net>
# Date 1702749384 -3600
# Node ID 1c361d2ba2e1f62cb4a0f038e85a80856e8db083
# Parent  808f16430f82a086e18ca00051cb28df0f74ee37
Bug 1816540 - Make SMTP cancel of send work again. r=mkmelin

Allows user to cancel an SMTP message send while transfer to server
is in progress. This restores functionality that was present with
ESR 102 and earlier. All associated unit tests pass with no modifications.
Betterbird project found the root cause of the bug and contributed
code to prevent unit tests from timing out.

Differential Revision: https://phabricator.services.mozilla.com/D195729

diff --git a/mailnews/compose/src/MessageSend.jsm b/mailnews/compose/src/MessageSend.jsm
--- a/mailnews/compose/src/MessageSend.jsm
+++ b/mailnews/compose/src/MessageSend.jsm
@@ -813,17 +813,17 @@ class MessageSend {
       }
     }
 
     this._deliveryFile = await this._createDeliveryFile();
     if (this._compFields.newsgroups) {
       this._deliverAsNews();
       return;
     }
-    this._deliverAsMail();
+    await this._deliverAsMail();
   }
 
   /**
    * Strip Bcc header, create the file to be actually delivered.
    *
    * @returns {nsIFile}
    */
   async _createDeliveryFile() {
@@ -1113,17 +1113,17 @@ class MessageSend {
       IOUtils.remove(this._messageFile.path).catch(console.error);
       this._messageFile = null;
     }
   }
 
   /**
    * Send this._deliveryFile to smtp service.
    */
-  _deliverAsMail() {
+  async _deliverAsMail() {
     this.sendReport.currentProcess = Ci.nsIMsgSendReport.process_SMTP;
     this._setStatusMessage(
       this._composeBundle.GetStringFromName("sendingMessage")
     );
     let recipients = [
       this._compFields.to,
       this._compFields.cc,
       this._compFields.bcc,
@@ -1144,17 +1144,19 @@ class MessageSend {
       `Delivering mail message <${this._compFields.messageId}>`
     );
     let deliveryListener = new MsgDeliveryListener(this, false);
     let msgStatus =
       this._sendProgress instanceof Ci.nsIMsgStatusFeedback
         ? this._sendProgress
         : this._statusFeedback;
     this._smtpRequest = {};
-    MailServices.smtp.sendMailMessage(
+    // Do async call. This is necessary to ensure _smtpRequest is set so that
+    // cancel function can be obtained.
+    await MailServices.smtp.wrappedJSObject.sendMailMessage(
       this._deliveryFile,
       encodedRecipients,
       this._userIdentity,
       this._compFields.from,
       this._smtpPassword,
       deliveryListener,
       msgStatus,
       null,
diff --git a/mailnews/compose/src/SmtpService.jsm b/mailnews/compose/src/SmtpService.jsm
--- a/mailnews/compose/src/SmtpService.jsm
+++ b/mailnews/compose/src/SmtpService.jsm
@@ -63,40 +63,53 @@ class SmtpService {
       // Load SMTP servers from prefs.
       this._servers = this._getSmtpServerKeys().map(key =>
         this._keyToServer(key)
       );
     }
     return this._servers;
   }
 
+  get wrappedJSObject() {
+    return this;
+  }
+
   /**
    * @see nsISmtpService
    */
-  sendMailMessage(
+  async sendMailMessage(
     messageFile,
     recipients,
     userIdentity,
     sender,
     password,
     deliveryListener,
     statusListener,
     notificationCallbacks,
     requestDSN,
     messageId,
     outURI,
     outRequest
   ) {
     this._logger.debug(`Sending message ${messageId}`);
     let server = this.getServerByIdentity(userIdentity);
+    if (!server) {
+      // Occurs for at least one unit test, but test does not fail if return
+      // here. This check for "server" can be removed if tests are fixed.
+      console.log(
+        `No server found for identity with email ${userIdentity.email} and ` +
+          `smtpServerKey ${userIdentity.smtpServerKey}`
+      );
+      return;
+    }
     if (password) {
       server.password = password;
     }
     let runningUrl = this._getRunningUri(server);
-    server.wrappedJSObject.withClient(client => {
+    await server.wrappedJSObject.withClient(client => {
       deliveryListener?.OnStartRunningUrl(runningUrl, 0);
       let fresh = true;
       client.onidle = () => {
         // onidle can occur multiple times, but we should only init sending
         // when sending a new message(fresh is true) or when a new connection
         // replaces the original connection due to error 4xx response
         // (client.isRetry is true).
         if (!fresh && !client.isRetry) {
