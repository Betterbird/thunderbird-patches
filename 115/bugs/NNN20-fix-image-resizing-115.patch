# HG changeset patch
# User Martin Giger <martin@humanoids.be>
# Date 1731507723 -3600
# Node ID 3c3ca8ea292bc24fb9d9f16e34113be42d3a87bf
# Parent  9d46f18de9b3d3c1d10d01adc37fb98f58f0ba46
This patch is the result of folding three patches and rebasing to 115:

Bug 1875325 - Fix image overflow handling in message reader. r=aleca

Differential Revision: https://phabricator.services.mozilla.com/D215811
* * *
Bug 1917278 - Disable shrinktofit for images inside links. r=aleca

Differential Revision: https://phabricator.services.mozilla.com/D225430
* * *
NNN20 - Fix image resizing regressions by alta88@fixall.com:
https://github.com/Betterbird/thunderbird-patches/blob/main/128/bugs/NNN20-fix-image-resizing.patch

diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -50,14 +50,27 @@ function messagePaneOnResize() {
   if (doc?.URL.startsWith("http") || !doc?.images) {
     return;
   }
 
-  for (let img of doc.images) {
-    img.toggleAttribute(
-      "overflowing",
-      img.clientWidth - doc.body.offsetWidth >= 0 &&
-        (img.clientWidth <= img.naturalWidth || !img.naturalWidth)
-    );
+  for (const img of doc.querySelectorAll(
+    "img:is([shrinktofit],[overflowing])"
+  )) {
+    if (!img.complete) {
+      continue;
+    }
+
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
+    if (img.hasAttribute("shrinktofit")) {
+      // Determine if the image could be enlarged.
+      img.toggleAttribute("overflowing", isOverflowing);
+    } else {
+      // Handle zoomed images that may no longer be overflowing after a resize.
+      img.toggleAttribute("overflowing", isOverflowing);
+      img.setAttribute("shrinktofit", "true");
+    }
   }
 }
 
 function onHeaderSplitterAction(event) {
diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -963,14 +963,18 @@ var messageProgressListener = {
             break;
           }
         }
 
-        img.addEventListener("load", function (event) {
-          if (this.clientWidth > this.parentNode.clientWidth) {
-            img.setAttribute("overflowing", "true");
-            img.setAttribute("shrinktofit", "true");
-          }
-        });
+        img.addEventListener(
+          "load",
+          function () {
+            if (this.clientWidth > this.parentNode.clientWidth) {
+              img.setAttribute("overflowing", "true");
+              img.setAttribute("shrinktofit", "true");
+            }
+          },
+          { once: true }
+        );
       }
     }
 
     OnMsgParsed(url);
@@ -4304,20 +4308,44 @@ function OnMsgParsed(aUrl) {
       linkNode.href = messageURI.specIgnoringRef + linkNode.hash;
     }
   }
 
+  const stylesReadyPromise = new Promise(resolve => {
+    if (doc.readyState === "complete") {
+      resolve();
+      return;
+    }
+    browser.contentWindow.addEventListener("load", resolve, {
+      once: true,
+    });
+  });
+
+  const applyOverflowingToImg = async img => {
+    img.setAttribute("shrinktofit", "true");
+    if (!img.complete) {
+      await new Promise(resolve => {
+        img.addEventListener("load", resolve, { once: true });
+      });
+    }
+    await stylesReadyPromise;
+
+    // An image is overflowing iff its naturalWidth is larger than the
+    // messagepane viewport AND its naturalWidth (unconstrained) is greater
+    // than its displayed width. The naturalWidth should always be available
+    // due to await for the load to complete. Also in messagePaneOnResize().
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
+    img.toggleAttribute("overflowing", isOverflowing);
+  };
+
   // Scale any overflowing images, exclude http content.
   let imgs = doc && !doc.URL.startsWith("http") ? doc.images : [];
   for (let img of imgs) {
-    if (
-      img.clientWidth - doc.body.offsetWidth >= 0 &&
-      (img.clientWidth <= img.naturalWidth || !img.naturalWidth)
-    ) {
-      img.setAttribute("overflowing", "true");
-    }
-
-    // This is the default case for images when a message is loaded.
-    img.setAttribute("shrinktofit", "true");
+    // Any overflowing image must be click zoomable. An overflowing link image
+    // will have the url displayed on hover and can be opened via contextmenu.
+    applyOverflowingToImg(img);
   }
 }
 
 function OnMsgLoaded(aUrl) {
diff --git a/mail/test/browser/message-reader/browser.ini b/mail/test/browser/message-reader/browser.ini
--- a/mail/test/browser/message-reader/browser.ini
+++ b/mail/test/browser/message-reader/browser.ini
@@ -14,5 +14,6 @@ support-files = data/**
 [browser_androidMMS.js]
 [browser_bug594646.js]
 [browser_convertToEventOrTask.js]
 [browser_detectCharset.js]
+[browser_imageOverflow.js]
 [browser_printing.js]
diff --git a/mail/test/browser/message-reader/browser_imageOverflow.js b/mail/test/browser/message-reader/browser_imageOverflow.js
new file mode 100644
--- /dev/null
+++ b/mail/test/browser/message-reader/browser_imageOverflow.js
@@ -0,0 +1,226 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { open_message_from_file, get_about_message } =
+  ChromeUtils.importESModule(
+    "resource://testing-common/mail/FolderDisplayHelpers.sys.mjs"
+  );
+
+let aboutMessage;
+let msgc;
+
+add_setup(async () => {
+  Services.prefs.setBoolPref("mail.inline_attachments", true);
+  const file = new FileUtils.File(
+    getTestFilePath("data/Image sizing test.eml")
+  );
+  msgc = await open_message_from_file(file);
+
+  if (window.screen.availWidth > msgc.outerWidth && msgc.outerWidth < 500) {
+    const resizePromise = BrowserTestUtils.waitForEvent(msgc, "resize");
+    msgc.resizeTo(Math.min(window.screen.availWidth, 550), msgc.outerHeight);
+    await resizePromise;
+    await TestUtils.waitForTick();
+  }
+
+  aboutMessage = get_about_message(msgc);
+
+  registerCleanupFunction(async () => {
+    await BrowserTestUtils.closeWindow(msgc);
+    Services.prefs.clearUserPref("mail.inline_attachments");
+  });
+});
+
+add_task(async function test_imageOverflow() {
+  const msgDoc =
+    aboutMessage.document.getElementById("messagepane").contentDocument;
+
+  const messageDisplayWidth = msgDoc.body.clientWidth;
+  Assert.less(
+    messageDisplayWidth,
+    5000,
+    "The message display needs to be less than 5000px wide"
+  );
+
+  await TestUtils.waitForCondition(() =>
+    Array.from(msgDoc.querySelectorAll("img")).every(img => img.complete)
+  );
+
+  Assert.equal(msgDoc.body.scrollWidth, messageDisplayWidth, "No scrollbars");
+
+  const imageIds = [];
+
+  for (const image of msgDoc.querySelectorAll("img")) {
+    imageIds.push(image);
+    const imageId = imageIds.indexOf(image);
+    Assert.lessOrEqual(
+      image.clientWidth,
+      messageDisplayWidth,
+      `Image ${imageId} should be resized to fit into the message display`
+    );
+    const isInLink = image.closest("[href]");
+    Assert.equal(
+      image.hasAttribute("shrinktofit"),
+      !isInLink,
+      `Image ${imageId} should have correct shrinktofit attribute state`
+    );
+    if (image.naturalWidth > messageDisplayWidth && !isInLink) {
+      Assert.ok(
+        image.hasAttribute("overflowing"),
+        `Image ${imageId} should be marked as overflowing`
+      );
+    } else {
+      Assert.ok(
+        !image.hasAttribute("overflowing"),
+        `Image ${imageId} should not be marked as overflowing`
+      );
+    }
+  }
+
+  msgDoc.defaultView.scrollBy({
+    top: 5000,
+    behavior: "instant",
+  });
+
+  const overflowingImages = msgDoc.querySelectorAll("img[overflowing]");
+  Assert.equal(
+    overflowingImages.length,
+    2,
+    "Should have two overflowing images"
+  );
+
+  for (const image of overflowingImages) {
+    info(`Overflow behavior test for image ${imageIds.indexOf(image)}`);
+    EventUtils.synthesizeMouse(image, 1, 1, {}, msgDoc.defaultView);
+    await BrowserTestUtils.waitForMutationCondition(
+      image,
+      {
+        attributeFilter: ["shrinktofit"],
+      },
+      () => !image.hasAttribute("shrinktofit")
+    );
+
+    Assert.ok(
+      image.hasAttribute("overflowing"),
+      "Click should keep overflowing attribute"
+    );
+    Assert.equal(
+      image.clientWidth,
+      image.naturalWidth,
+      "Image should occupy its full width"
+    );
+    Assert.equal(
+      image.clientHeight,
+      image.naturalHeight,
+      "Image should occupy its normal height"
+    );
+    Assert.greater(
+      msgDoc.body.scrollWidth,
+      messageDisplayWidth,
+      "Should have a scrolling overflow"
+    );
+
+    EventUtils.synthesizeMouse(image, 1, 1, {}, msgDoc.defaultView);
+    await BrowserTestUtils.waitForMutationCondition(
+      image,
+      {
+        attributeFilter: ["shrinktofit"],
+      },
+      () => image.hasAttribute("shrinktofit")
+    );
+
+    Assert.ok(
+      image.hasAttribute("overflowing"),
+      "Click should keep overflowing attribute"
+    );
+    Assert.equal(
+      image.clientWidth,
+      messageDisplayWidth,
+      "Image should occupy all available space without horizontal overflow"
+    );
+    Assert.less(
+      image.clientHeight,
+      image.naturalHeight,
+      "Image height should naturally shrink"
+    );
+    Assert.equal(
+      msgDoc.body.scrollWidth,
+      messageDisplayWidth,
+      "Should have no scrolling overflow"
+    );
+  }
+
+  msgDoc.defaultView.scrollTo({
+    top: 0,
+    behavior: "instant",
+  });
+});
+
+add_task(async function test_imageUnderflow() {
+  const msgDoc =
+    aboutMessage.document.getElementById("messagepane").contentDocument;
+
+  const initialWidth = msgc.outerWidth;
+
+  if (initialWidth > 350) {
+    const resizePromise = BrowserTestUtils.waitForEvent(msgc, "resize");
+    msgc.resizeTo(350, msgc.outerHeight);
+    await resizePromise;
+    await TestUtils.waitForTick();
+  }
+
+  const messageDisplayWidth = msgDoc.body.clientWidth;
+  Assert.less(
+    messageDisplayWidth,
+    400,
+    "The message display needs to be less than 400px wide"
+  );
+
+  await TestUtils.waitForCondition(() =>
+    Array.from(msgDoc.querySelectorAll("img")).every(img => img.complete)
+  );
+
+  Assert.equal(msgDoc.body.scrollWidth, messageDisplayWidth, "No scrollbars");
+
+  msgDoc.defaultView.scrollBy({
+    top: 5000,
+    behavior: "instant",
+  });
+
+  const image = msgDoc.getElementById("stretched");
+
+  EventUtils.synthesizeMouse(image, 1, 1, {}, msgDoc.defaultView);
+  await BrowserTestUtils.waitForMutationCondition(
+    image,
+    {
+      attributeFilter: ["shrinktofit"],
+    },
+    () => !image.hasAttribute("shrinktofit")
+  );
+  info("Zoomed on the image");
+
+  msgc.resizeTo(450, msgc.outerHeight);
+  info("Resizing window...");
+
+  await BrowserTestUtils.waitForMutationCondition(
+    image,
+    {
+      attributeFilter: ["shrinktofit"],
+    },
+    () => image.hasAttribute("shrinktofit")
+  );
+
+  Assert.ok(
+    !image.hasAttribute("overflowing"),
+    "Image should no longer be overflowing"
+  );
+
+  msgc.resizeTo(initialWidth, msgc.outerHeight);
+  msgDoc.defaultView.scrollTo({
+    top: 0,
+    behavior: "instant",
+  });
+}).skip(window.screen.availWidth < 450); // Need space to show the entire element
diff --git a/mail/test/browser/message-reader/data/Image sizing test.eml b/mail/test/browser/message-reader/data/Image sizing test.eml
new file mode 100644
--- /dev/null
+++ b/mail/test/browser/message-reader/data/Image sizing test.eml	
@@ -0,0 +1,117 @@
+Content-Type: multipart/mixed; boundary="------------UiZbVg1oKjs0D10f7pt76MRm"
+Message-ID: <54fd483e-e65e-4dbb-9d75-063906300436@example.com>
+Date: Thu, 4 Jul 2024 19:28:23 +0200
+MIME-Version: 1.0
+User-Agent: Thunderbird Daily
+Content-Language: en-US
+To: test@example.com
+From: Image Test <imagetest@example.com>
+Subject: Image sizing test
+
+This is a multi-part message in MIME format.
+--------------UiZbVg1oKjs0D10f7pt76MRm
+Content-Type: multipart/related;
+ boundary="------------2wxAK7EB6xhF55w8q3jayJAH"
+
+--------------2wxAK7EB6xhF55w8q3jayJAH
+Content-Type: text/html; charset=UTF-8
+Content-Transfer-Encoding: 7bit
+
+<!DOCTYPE html>
+<html>
+  <head>
+
+    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
+    <title>Image sizing test</title>
+  </head>
+  <body>
+    <div style="height: 5000px">
+      Vertical padding to make sure the images are below the fold.
+    </div>
+    <p>An inline image:</p>
+    <img src="cid:part1.4u939f0L.9JKhIMXF@example.com" width="5000"
+        height="16" alt="">
+    <p>A stretched image:</p>
+    <img src="cid:part2.vmSs2Orn.F295w1yW@example.com" alt=""
+      width="5000" height="16" id="stretched">
+
+    <p>Image inside a link:</p>
+    <a href="https://example.com">
+      <img src="cid:part1.4u939f0L.9JKhIMXF@example.com" width="14"
+        height="14" alt="">
+    </a>
+  </body>
+</html>
+--------------2wxAK7EB6xhF55w8q3jayJAH
+Content-Type: image/png; name="wideInline.png"
+Content-Disposition: inline; filename="wideInline.png"
+Content-Id: <part1.4u939f0L.9JKhIMXF@example.com>
+Content-Transfer-Encoding: base64
+
+iVBORw0KGgoAAAANSUhEUgAAE4gAAAAQCAIAAAB1+QLhAAABfWlDQ1BJQ0MgcHJvZmlsZQAA
+KJF9kT1IQlEYhp97LYwoJHKwaLiDNdVSEY1mgQQGYgVaDd2fNMF7lXuVFsegVWjoZ8lqaGmu
+taE1CIJ+IJobmopaQm4cFZTIvuU8vOd7P873HpArWd10OkJgWgU7HgkrieSK4n3FSwd9BBhQ
+dSc/E4tFaVtf90jivBsTs9r3/Vm9xoajg6QAIT1vF0BaB6a2CnnB+4Bf31QNkM6BUTuRXAHp
+Uehand8Ep2ssi5l+eyk+C7IfUNItrLWwvmmbIE8CQcO0DJATdTYElwSb2aLeeKfYsGfDWl4U
+OjBEhHkWiKGgUSRDlgJjZLBQcIgTIdzGP1jzxyiikSWDjsIcOUzUmh/xB7+zdVIT4/VJPWHo
+fHHdj2Hw7kK17Lrfx65bPQHPM1xZTX+uAtOf4Ck3teAR+Lbh4rqpaXtwuQOBp7xqqzXJA8ip
+FLyfQW8S+m+he7WeW+Oe0wdYKkH0Bg4OYSQNvrU2e3e15vZvTyO/H14Icp4xZljzAAAACXBI
+WXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH6AcEERknKG+tPAAAABl0RVh0Q29tbWVudABDcmVh
+dGVkIHdpdGggR0lNUFeBDhcAAAEkSURBVHja7dtBEQAgDMCwgn9BcwcKOAwkEvrvak4AAAAA
+AAAAAAAAAAAAAPCzJQAAAAAAAAAAAAAAAAAAIGMqAAAAAAAAAAAAAAAAAAAZUwEAAAAAAAAA
+AAAAAAAAyJgKAAAAAAAAAAAAAAAAAEDGVAAAAAAAAAAAAAAAAAAAMqYCAAAAAAAAAAAAAAAA
+AJAxFQAAAAAAAAAAAAAAAACAjKkAAAAAAAAAAAAAAAAAAJAxFQAAAAAAAAAAAAAAAACAjKkA
+AAAAAAAAAAAAAAAAAGRMBQAAAAAAAAAAAAAAAAAgYyoAAAAAAAAAAAAAAAAAABlTAQAAAAAA
+AAAAAAAAAADImAoAAAAAAAAAAAAAAAAAQMZUAAAAAAAAAAAAAAAAAAB4uWXtAdcN96SqAAAA
+AElFTkSuQmCC
+--------------2wxAK7EB6xhF55w8q3jayJAH
+Content-Type: image/png; name="inline.png"
+Content-Disposition: inline; filename="inline.png"
+Content-Id: <part2.vmSs2Orn.F295w1yW@example.com>
+Content-Transfer-Encoding: base64
+
+iVBORw0KGgoAAAANSUhEUgAAAZAAAAAQCAYAAAA4eCmgAAAABmJLR0QA/wD/AP+gvaeTAAAA
+CXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH6AcWEAkgBxvf7QAAAEtJREFUeNrt1TEBAAAE
+AEH0D6QdBSz2uwi/fEbPBAA8lQQAGAgABgKAgQBgIABgIAAYCAAGAoCBAGAgAGAgABgIAAYC
+gIEAYCAAcFnwQgLWPcAPQAAAAABJRU5ErkJggg==
+
+--------------2wxAK7EB6xhF55w8q3jayJAH--
+--------------UiZbVg1oKjs0D10f7pt76MRm
+Content-Type: image/png; name="wide.png"
+Content-Disposition: attachment; filename="wide.png"
+Content-Transfer-Encoding: base64
+
+iVBORw0KGgoAAAANSUhEUgAAE4gAAAAQCAIAAAB1+QLhAAABfWlDQ1BJQ0MgcHJvZmlsZQAA
+KJF9kT1IQlEYhp97LYwoJHKwaLiDNdVSEY1mgQQGYgVaDd2fNMF7lXuVFsegVWjoZ8lqaGmu
+taE1CIJ+IJobmopaQm4cFZTIvuU8vOd7P873HpArWd10OkJgWgU7HgkrieSK4n3FSwd9BBhQ
+dSc/E4tFaVtf90jivBsTs9r3/Vm9xoajg6QAIT1vF0BaB6a2CnnB+4Bf31QNkM6BUTuRXAHp
+Uehand8Ep2ssi5l+eyk+C7IfUNItrLWwvmmbIE8CQcO0DJATdTYElwSb2aLeeKfYsGfDWl4U
+OjBEhHkWiKGgUSRDlgJjZLBQcIgTIdzGP1jzxyiikSWDjsIcOUzUmh/xB7+zdVIT4/VJPWHo
+fHHdj2Hw7kK17Lrfx65bPQHPM1xZTX+uAtOf4Ck3teAR+Lbh4rqpaXtwuQOBp7xqqzXJA8ip
+FLyfQW8S+m+he7WeW+Oe0wdYKkH0Bg4OYSQNvrU2e3e15vZvTyO/H14Icp4xZljzAAAACXBI
+WXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH6AcEERkUl7/MKgAAABl0RVh0Q29tbWVudABDcmVh
+dGVkIHdpdGggR0lNUFeBDhcAAAEiSURBVHja7dtBEQAgDMCwDv+eQcEOA4mE/js3AAAAAAAA
+AAAAAAAAAAD4OxIAAAAAAAAAAAAAAAAAAJAxFQAAAAAAAAAAAAAAAACAjKkAAAAAAAAAAAAA
+AAAAAGRMBQAAAAAAAAAAAAAAAAAgYyoAAAAAAAAAAAAAAAAAABlTAQAAAAAAAAAAAAAAAADI
+mAoAAAAAAAAAAAAAAAAAQMZUAAAAAAAAAAAAAAAAAADImAoAAAAAAAAAAAAAAAAAQMZUAAAA
+AAAAAAAAAAAAAAAypgIAAAAAAAAAAAAAAAAAkDEVAAAAAAAAAAAAAAAAAICMqQAAAAAAAAAA
+AAAAAAAAZEwFAAAAAAAAAAAAAAAAACBjKgAAAAAAAAAAAAAAAAAAbB5iXQEfve3cIwAAAABJ
+RU5ErkJggg==
+--------------UiZbVg1oKjs0D10f7pt76MRm
+Content-Type: image/png; name="tiny.png"
+Content-Disposition: attachment; filename="tiny.png"
+Content-Transfer-Encoding: base64
+
+iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAIAAACQkWg2AAABfWlDQ1BJQ0MgcHJvZmlsZQAA
+KJF9kT1IQlEYhp97LYwoJHKwaLiDNdVSEY1mgQQGYgVaDd2fNMF7lXuVFsegVWjoZ8lqaGmu
+taE1CIJ+IJobmopaQm4cFZTIvuU8vOd7P873HpArWd10OkJgWgU7HgkrieSK4n3FSwd9BBhQ
+dSc/E4tFaVtf90jivBsTs9r3/Vm9xoajg6QAIT1vF0BaB6a2CnnB+4Bf31QNkM6BUTuRXAHp
+Uehand8Ep2ssi5l+eyk+C7IfUNItrLWwvmmbIE8CQcO0DJATdTYElwSb2aLeeKfYsGfDWl4U
+OjBEhHkWiKGgUSRDlgJjZLBQcIgTIdzGP1jzxyiikSWDjsIcOUzUmh/xB7+zdVIT4/VJPWHo
+fHHdj2Hw7kK17Lrfx65bPQHPM1xZTX+uAtOf4Ck3teAR+Lbh4rqpaXtwuQOBp7xqqzXJA8ip
+FLyfQW8S+m+he7WeW+Oe0wdYKkH0Bg4OYSQNvrU2e3e15vZvTyO/H14Icp4xZljzAAAACXBI
+WXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH6AcEERg7JXXAMgAAABl0RVh0Q29tbWVudABDcmVh
+dGVkIHdpdGggR0lNUFeBDhcAAAAWSURBVCjPY/zPQBpgYhjVMKph2GoAAEAuAR+xkMJNAAAA
+AElFTkSuQmCC
+
+--------------UiZbVg1oKjs0D10f7pt76MRm--
diff --git a/mail/themes/shared/mail/messageBody.css b/mail/themes/shared/mail/messageBody.css
--- a/mail/themes/shared/mail/messageBody.css
+++ b/mail/themes/shared/mail/messageBody.css
@@ -81,23 +81,26 @@ mailattachcount {
 }
 
 /* ::::: images ::::: */
 
-img[overflowing]:not([shrinktofit]) {
-  cursor: zoom-out;
+img {
   width: auto !important;
-}
+  /* Always keep the aspect ratio. */
+  height: auto !important;
+
+  &[shrinktofit] {
+    /* Fit the viewport .*/
+    max-width: 100% !important;
 
-img[overflowing][shrinktofit] {
-  cursor: zoom-in;
-  max-width: 100% !important;
-  height: auto !important;
-}
+    &[overflowing] {
+      cursor: zoom-in;
+    }
+  }
 
-@media print {
-  img[shrinktofit] {
-    max-width: 100% !important;
-    height: auto !important;
+  &[overflowing]:not([shrinktofit]) {
+    cursor: zoom-out;
+    /* Unbound the sizing of the image so it is displayed at full size. */
+    max-width: none !important;
   }
 }
 
 .moz-attached-image-container {
