# HG changeset patch
# User Martin Giger <martin@humanoids.be>
# Date 1731971858 -3600
# Node ID 3c3ca8ea292bc24fb9d9f16e34113be42d3a87bf
# Parent  9d46f18de9b3d3c1d10d01adc37fb98f58f0ba46
This patch is the result of folding three patches and rebasing to 115:

Bug 1875325 - Fix image overflow handling in message reader. r=aleca

Differential Revision: https://phabricator.services.mozilla.com/D215811
* * *
Bug 1917278 - Disable shrinktofit for images inside links. r=aleca

Differential Revision: https://phabricator.services.mozilla.com/D225430
* * *
NNN20 - Fix image resizing regressions by alta88@fixall.com:
https://github.com/Betterbird/thunderbird-patches/blob/main/128/bugs/NNN20-fix-image-resizing.patch

diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -50,14 +50,27 @@ function messagePaneOnResize() {
   if (doc?.URL.startsWith("http") || !doc?.images) {
     return;
   }
 
-  for (let img of doc.images) {
-    img.toggleAttribute(
-      "overflowing",
-      img.clientWidth - doc.body.offsetWidth >= 0 &&
-        (img.clientWidth <= img.naturalWidth || !img.naturalWidth)
-    );
+  for (const img of doc.querySelectorAll(
+    "img:is([shrinktofit],[overflowing])"
+  )) {
+    if (!img.complete) {
+      continue;
+    }
+
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
+    if (img.hasAttribute("shrinktofit")) {
+      // Determine if the image could be enlarged.
+      img.toggleAttribute("overflowing", isOverflowing);
+    } else {
+      // Handle zoomed images that may no longer be overflowing after a resize.
+      img.toggleAttribute("overflowing", isOverflowing);
+      img.setAttribute("shrinktofit", "true");
+    }
   }
 }
 
 function onHeaderSplitterAction(event) {
diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -963,14 +963,18 @@ var messageProgressListener = {
             break;
           }
         }
 
-        img.addEventListener("load", function (event) {
-          if (this.clientWidth > this.parentNode.clientWidth) {
-            img.setAttribute("overflowing", "true");
-            img.setAttribute("shrinktofit", "true");
-          }
-        });
+        img.addEventListener(
+          "load",
+          function () {
+            if (this.clientWidth > this.parentNode.clientWidth) {
+              img.setAttribute("overflowing", "true");
+              img.setAttribute("shrinktofit", "true");
+            }
+          },
+          { once: true }
+        );
       }
     }
 
     OnMsgParsed(url);
@@ -4304,20 +4308,44 @@ function OnMsgParsed(aUrl) {
       linkNode.href = messageURI.specIgnoringRef + linkNode.hash;
     }
   }
 
+  const stylesReadyPromise = new Promise(resolve => {
+    if (doc.readyState === "complete") {
+      resolve();
+      return;
+    }
+    browser.contentWindow.addEventListener("load", resolve, {
+      once: true,
+    });
+  });
+
+  const applyOverflowingToImg = async img => {
+    img.setAttribute("shrinktofit", "true");
+    if (!img.complete) {
+      await new Promise(resolve => {
+        img.addEventListener("load", resolve, { once: true });
+      });
+    }
+    await stylesReadyPromise;
+
+    // An image is overflowing iff its naturalWidth is larger than the
+    // messagepane viewport AND its naturalWidth (unconstrained) is greater
+    // than its displayed width. The naturalWidth should always be available
+    // due to await for the load to complete. Also in messagePaneOnResize().
+    const isOverflowing =
+      doc.body.clientWidth < img.naturalWidth &&
+      img.naturalWidth > img.clientWidth;
+
+    img.toggleAttribute("overflowing", isOverflowing);
+  };
+
   // Scale any overflowing images, exclude http content.
   let imgs = doc && !doc.URL.startsWith("http") ? doc.images : [];
   for (let img of imgs) {
-    if (
-      img.clientWidth - doc.body.offsetWidth >= 0 &&
-      (img.clientWidth <= img.naturalWidth || !img.naturalWidth)
-    ) {
-      img.setAttribute("overflowing", "true");
-    }
-
-    // This is the default case for images when a message is loaded.
-    img.setAttribute("shrinktofit", "true");
+    // Any overflowing image must be click zoomable. An overflowing link image
+    // will have the url displayed on hover and can be opened via contextmenu.
+    applyOverflowingToImg(img);
   }
 }
 
 function OnMsgLoaded(aUrl) {
diff --git a/mail/themes/shared/mail/messageBody.css b/mail/themes/shared/mail/messageBody.css
--- a/mail/themes/shared/mail/messageBody.css
+++ b/mail/themes/shared/mail/messageBody.css
@@ -81,24 +81,27 @@ mailattachcount {
 }
 
 /* ::::: images ::::: */
 
-img[overflowing]:not([shrinktofit]) {
-  cursor: zoom-out;
-  width: auto !important;
-}
-
-img[overflowing][shrinktofit] {
-  cursor: zoom-in;
-  max-width: 100% !important;
+img {
+  /* Always keep the aspect ratio. */
   height: auto !important;
 }
 
-@media print {
-  img[shrinktofit] {
-    max-width: 100% !important;
-    height: auto !important;
-  }
+img[shrinktofit] {
+  /* Fit the viewport .*/
+  max-width: 100% !important;
+}
+
+img[shrinktofit][overflowing] {
+  cursor: zoom-in;
+}
+
+img[overflowing]:not([shrinktofit]) {
+  cursor: zoom-out;
+  /* Unbound the sizing of the image so it is displayed at full size. */
+  width: auto !important;
+  max-width: none !important;
 }
 
 .moz-attached-image-container {
   text-align: center;
