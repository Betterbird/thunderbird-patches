# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1699375668 -3600
# Parent  ac6963564728e33402d7262b81453d1be74ba136
Bug 1835548 - Fix counts of collapsed server rows at startup.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -762,16 +762,18 @@ var folderPane = {
       name: "all",
       active: false,
       canBeCompact: false,
 
       initServer(server) {
         let serverRow = folderPane._createServerRow(this.name, server);
         folderPane._insertInServerOrder(this.containerList, serverRow);
         folderPane._addSubFolders(server.rootFolder, serverRow, this.name);
+        serverRow.updateUnreadMessageCount();
+        serverRow.updateTotalMessageCount();
       },
 
       addFolder(parentFolder, childFolder) {
         FolderTreeProperties.setIsExpanded(childFolder.URI, this.name, true);
         if (
           childFolder.server.hidden ||
           folderPane.getRowForFolder(childFolder, this.name)
         ) {
@@ -1115,22 +1117,24 @@ var folderPane = {
             let folderRow = folderPane._createFolderRow(this.name, childFolder);
             serverRow.insertChildInOrder(folderRow);
             folderPane._addSubFolders(childFolder, folderRow, this.name);
             return;
           }
         }
 
         // Nothing special about this folder. Add it to the end of the list.
-        let folderRow = folderPane._addFolderAndAncestors(
+        let { folderRow, parentRow } = folderPane._addFolderAndAncestors(
           this.containerList,
           childFolder,
           this.name
         );
         folderPane._addSubFolders(childFolder, folderRow, this.name);
+        parentRow.updateUnreadMessageCount();
+        parentRow.updateTotalMessageCount();
       },
 
       removeFolder(parentFolder, childFolder) {
         let childRow = folderPane.getRowForFolder(childFolder, this.name);
         if (!childRow) {
           return;
         }
         let parentRow = childRow.parentNode.closest("li");
@@ -1226,21 +1230,23 @@ var folderPane = {
             this.name,
             folder,
             "both"
           );
           folderPane._insertInServerOrder(this.containerList, folderRow);
           return;
         }
 
-        folderPane._addFolderAndAncestors(
+        let parentRow = folderPane._addFolderAndAncestors(
           this.containerList,
           folder,
           this.name
-        );
+        ).parentRow;
+        parentRow.updateUnreadMessageCount();
+        parentRow.updateTotalMessageCount();
       },
 
       removeFolder(parentFolder, childFolder) {
         folderPane._removeFolderAndAncestors(
           childFolder,
           this.name,
           this._unreadFilter
         );
@@ -1307,21 +1313,23 @@ var folderPane = {
         if (folderPane._isCompact) {
           folderPane._insertInServerOrder(
             this.containerList,
             folderPane._createFolderRow(this.name, folder, "both")
           );
           return;
         }
 
-        folderPane._addFolderAndAncestors(
+        let parentRow = folderPane._addFolderAndAncestors(
           this.containerList,
           folder,
           this.name
-        );
+        ).parentRow;
+        parentRow.updateUnreadMessageCount();
+        parentRow.updateTotalMessageCount();
       },
 
       removeFolder(parentFolder, childFolder) {
         folderPane._removeFolderAndAncestors(
           childFolder,
           this.name,
           this._favoriteFilter
         );
@@ -2153,33 +2161,33 @@ var folderPane = {
    * @param {HTMLUListElement} containerList - The list to add folders to.
    * @param {nsIMsgFolder} folder
    * @param {string} modeName - The name of the mode this row belongs to.
    * @returns {FolderTreeRow}
    */
   _addFolderAndAncestors(containerList, folder, modeName) {
     let folderRow = folderPane.getRowForFolder(folder, modeName);
     if (folderRow) {
-      return folderRow;
+      return { folderRow, parentRow: folderRow };
     }
 
     if (folder.isServer) {
       let serverRow = folderPane._createServerRow(modeName, folder.server);
       this._insertInServerOrder(containerList, serverRow);
-      return serverRow;
+      return { folderRow: serverRow, parentRow: serverRow };
     }
 
     let parentRow = this._addFolderAndAncestors(
       containerList,
       folderPane._getNonGmailParent(folder),
       modeName
-    );
+    ).parentRow;
     folderRow = folderPane._createFolderRow(modeName, folder);
     parentRow.insertChildInOrder(folderRow);
-    return folderRow;
+    return { folderRow, parentRow };
   },
 
   /**
    * @callback folderFilterCallback
    * @param {FolderTreeRow} row
    * @returns {boolean} - True if the folder should have a row in the tree.
    */
   /**
