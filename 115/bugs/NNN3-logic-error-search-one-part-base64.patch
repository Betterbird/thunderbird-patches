# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1701884271 -3600
# Parent  00b6cdd8104e2a4351c6b2960118963d53df7653
Bug NNN3 - Fix logic error in searching one-part base64 messages.

diff --git a/mailnews/search/src/nsMsgBodyHandler.cpp b/mailnews/search/src/nsMsgBodyHandler.cpp
--- a/mailnews/search/src/nsMsgBodyHandler.cpp
+++ b/mailnews/search/src/nsMsgBodyHandler.cpp
@@ -109,23 +109,21 @@ int32_t nsMsgBodyHandler::GetNextLine(ns
 
     if (length < 0) break;  // eof in
 
     outLength = ApplyTransformations(nextLine, length, eatThisLine, buf);
   }
 
   if (outLength < 0) return -1;  // eof out
 
-  // For non-multipart messages, the entire message minus headers is encoded
-  // ApplyTransformations can only decode a part
+  // For non-multipart messages, the entire message minus headers is encoded.
   if (!m_isMultipart && m_base64part) {
     Base64Decode(buf);
+    outLength = buf.Length();
     m_base64part = false;
-    // And reapply our transformations...
-    outLength = ApplyTransformations(buf, buf.Length(), eatThisLine, buf);
   }
 
   // Process aggregated HTML.
   if (!m_isMultipart && m_partIsHtml) {
     StripHtml(buf);
     outLength = buf.Length();
   }
 
@@ -270,19 +268,16 @@ int32_t nsMsgBodyHandler::ApplyTransform
   if (matchedBoundary) {
     if (m_base64part && m_partIsText) {
       Base64Decode(buf);
       // Work on the parsed string
       if (!buf.Length()) {
         NS_WARNING("Trying to transform an empty buffer");
         eatThisLine = true;
       } else {
-        // It is wrong to call ApplyTransformations() here since this will
-        // lead to the buffer being doubled-up at |buf.Append(line);|
-        // below. ApplyTransformations(buf, buf.Length(), eatThisLine, buf);
         // Avoid spurious failures
         eatThisLine = false;
       }
     } else if (!m_partIsHtml) {
       buf.Truncate();
       eatThisLine = true;  // We have no content...
     }
 
