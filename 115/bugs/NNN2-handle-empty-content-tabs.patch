# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1701195028 -3600
# Parent  766ce66eb12bc52a059aa41fa012a589d06237ec
Bug NNN2 - Various tweaks to suppress opening of empty content tabs.

diff --git a/mail/base/content/specialTabs.js b/mail/base/content/specialTabs.js
--- a/mail/base/content/specialTabs.js
+++ b/mail/base/content/specialTabs.js
@@ -784,17 +784,18 @@ var specialTabs = {
      * @param {Function} [aArgs.onLoad] - A function that takes an Event and a
      *     DOMNode. It is called when the content page is done loading. The
      *     first argument is the load event, and the second argument is the
      *     xul:browser that holds the page. You can access the inner tab's
      *     window object by accessing the second parameter's contentWindow
      *     property.
      */
     openTab(aTab, aArgs) {
-      if (!("url" in aArgs)) {
+      // "url" may be in `aArgs`, but with value null.
+      if (!aArgs.url) {
         throw new Error("url must be specified");
       }
 
       // First clone the page and set up the basics.
       let clone = document
         .getElementById("contentTab")
         .firstElementChild.cloneNode(true);
 
@@ -976,16 +977,21 @@ var specialTabs = {
       let tab = aTabmail.openTab("contentTab", {
         background: true,
         duplicate: aPersistedState.duplicate,
         linkHandler: aPersistedState.linkHandler,
         url: aPersistedState.tabURI,
         userContextId: aPersistedState.userContextId,
       });
 
+      if (!tab) {
+        console.error("tab wasn't restored");
+        return;
+      }
+
       if (aPersistedState.tabURI == "about:addons") {
         // Also in `openAddonsMgr` in mailCore.js.
         tab.browser.droppedLinkHandler = event =>
           tab.browser.contentWindow.gDragDrop.onDrop(event);
       }
     },
   },
 
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -1369,27 +1369,39 @@ var { UIFontSize } = ChromeUtils.import(
 
       // if we no longer know about the mode, we can't restore the tab
       let mode = this.tabModes[aState.mode];
       if (!mode) {
         this.unrestoredTabs.push(aState);
         return false;
       }
 
+      // Hack to not restore empty content tabs. If we let the restoration go
+      // ahead, it results in a broken tab that can't be closed any more
+      // because due to the missing URL it wasn't properly initialised.
+      // To not drill down the rabbit hole and fix closing of broken tabs,
+      // it's better not to create them in the first place.
+      if (aState.mode == "contentTab" && !aState.state?.tabURI) {
+        console.error("Skipping empty content tab");
+        this.unrestoredTabs.push(aState);
+        return false;
+      }
+
       let restoreFunc = mode.restoreTab || mode.tabType.restoreTab;
       if (!restoreFunc) {
         return false;
       }
 
       // normalize the state to have an ext attribute if it does not.
       if (!("ext" in aState)) {
         aState.ext = {};
       }
 
       this._restoringTabState = aState;
+      // The following call should check for errors since tab restoration may fail.
       restoreFunc.call(mode.tabType, this, aState.state);
       this._restoringTabState = null;
 
       return true;
     }
 
     /**
      * Attempts to restore tabs persisted from a prior call to
