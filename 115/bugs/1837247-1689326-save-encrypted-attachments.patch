# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1697360127 -7200
# Parent  3c230057522a3258a7cecc3bc01953ef9ac0e636
Bug 1837247 and bug 1689326 - Introduce MimeDecryptHandler 'pass through' for saving encrypted attachments.

Based on work by the pEp Project referenced in https://bugzilla.mozilla.org/show_bug.cgi?id=1689326#c4

diff --git a/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm b/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
--- a/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
+++ b/mail/extensions/openpgp/content/modules/mimeDecrypt.jsm
@@ -216,16 +216,23 @@ MimeDecryptHandler.prototype = {
     this.base64Cache = "";
     this.outQueue = "";
     this.statusStr = "";
     this.headerMode = 0;
     this.decryptedHeaders = {};
     this.xferEncoding = ENCODING_DEFAULT;
     this.boundary = lazy.EnigmailMime.getBoundary(this.mimeSvc.contentType);
 
+    // "Pass through" mode for saving encrypted attachments to a file.
+    this.passThrough = 
+      this.uri && /[?&]filename=.*\.eml(&|$)/.test(this.uri.spec);
+      // The original pEp solution also had the following which doesn't appear
+      // to be necessary any more:
+      // && !this.uri.spec.includes("type=application/x-message-display");
+
     let now = Date.now();
     let timeoutReached =
       EnigmailSingletons.lastMessageDecryptTime &&
       now - EnigmailSingletons.lastMessageDecryptTime > 10000;
     if (timeoutReached || !this.isReloadingLastMessage()) {
       EnigmailSingletons.clearLastDecryptedMessage();
       EnigmailSingletons.lastMessageDecryptTime = now;
     }
@@ -276,16 +283,20 @@ MimeDecryptHandler.prototype = {
     // get data from libmime
     if (!this.initOk) {
       return;
     }
     this.inStream.init(stream);
 
     if (count > 0) {
       var data = this.inStream.read(count);
+      if (this.passThrough) {
+        this.cacheData(data);
+        return;
+      }
 
       if (this.mimePartCount == 0 && this.dataIsBase64 === null) {
         // try to determine if this could be a base64 encoded message part
         this.dataIsBase64 = this.isBase64Encoding(data);
       }
 
       if (!this.dataIsBase64) {
         if (data.search(/[\r\n][^\r\n]+[\r\n]/) >= 0) {
@@ -405,16 +416,22 @@ MimeDecryptHandler.prototype = {
       return;
     }
 
     let url = {};
     let currMsg = lazy.EnigmailURIs.msgIdentificationFromUrl(this.uri);
 
     this.backgroundJob = false;
 
+    if (this.passThrough) {
+      // This is a save operation of a message/rfc822 attachment. Just return the original text.
+      this.returnData(mimeSvc, this.outQueue);
+      return;
+    }
+
     if (this.uri) {
       // return if not decrypting currently displayed message (except if
       // printing, replying, etc)
 
       this.backgroundJob =
         this.uri.spec.search(/[&?]header=(print|quotebody)/) >= 0;
 
       try {
@@ -861,17 +878,19 @@ MimeDecryptHandler.prototype = {
       return;
     }
 
     if (this.decryptedHeaders && "subject" in this.decryptedHeaders) {
       try {
         let msgDbHdr = this.uri.QueryInterface(
           Ci.nsIMsgMessageUrl
         ).messageHeader;
-        msgDbHdr.subject = this.decryptedHeaders.subject;
+        if (msgDbHdr) {
+          msgDbHdr.subject = this.decryptedHeaders.subject;
+        }
       } catch (x) {
         console.debug(x);
       }
     }
   },
 
   extractEncryptedHeaders() {
     let r = lazy.EnigmailMime.extractProtectedHeaders(this.decryptedData);
diff --git a/mail/modules/AttachmentInfo.sys.mjs b/mail/modules/AttachmentInfo.sys.mjs
--- a/mail/modules/AttachmentInfo.sys.mjs
+++ b/mail/modules/AttachmentInfo.sys.mjs
@@ -193,18 +193,16 @@ export class AttachmentInfo {
             });
             tabmail.ownerGlobal.focus();
             return;
           }
           // If no tabmail, open PDF same as other attachments.
         }
       }
 
-      // Just use the old method for handling messages, it works.
-
       let { name, url } = this;
 
       let sourceURI = Services.io.newURI(url);
       async function saveToFile(path, isTmp = false) {
         let buffer = await new Promise((resolve, reject) => {
           lazy.NetUtil.asyncFetch(
             {
               uri: sourceURI,
