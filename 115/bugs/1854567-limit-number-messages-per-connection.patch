# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1696492842 -7200
# Parent  8e963395b8714dee7e028731683f09d0129ad173
Bug 1854567 - Optionally limit the number of messages sent per connection.

Some ideas in this patch from Magnus Melin in https://phabricator.services.mozilla.com/D189676

diff --git a/mailnews/compose/src/SmtpClient.jsm b/mailnews/compose/src/SmtpClient.jsm
--- a/mailnews/compose/src/SmtpClient.jsm
+++ b/mailnews/compose/src/SmtpClient.jsm
@@ -39,16 +39,21 @@ var { MailStringUtils } = ChromeUtils.im
 var { SmtpAuthenticator } = ChromeUtils.import(
   "resource:///modules/MailAuthenticator.jsm"
 );
 var { MsgUtils } = ChromeUtils.import(
   "resource:///modules/MimeMessageUtils.jsm"
 );
 
 class SmtpClient {
+
+  // Number of messages sent with this client and max. number it can send.
+  messagesSent = 0;
+  maxMessagesPerConnection = 0;
+
   /**
    * Creates a connection object to a SMTP server and allows to send mail through it.
    * Call `connect` method to inititate the actual connection, the constructor only
    * defines the properties but does not actually connect.
    *
    * @class
    *
    * @param {nsISmtpServer} server - The associated nsISmtpServer instance.
@@ -125,16 +130,20 @@ class SmtpClient {
       this.socket = new TCPSocket(hostname, port, {
         binaryType: "arraybuffer",
         useSecureTransport: this._secureTransport,
       });
 
       this.socket.onerror = this._onError;
       this.socket.onopen = this._onOpen;
     }
+    this.messagesSent++;
+    this.logger.debug(
+      `Connected to send message #${this.messagesSent} (limit: ${this.maxMessagesPerConnection})`
+    );
     this._freed = false;
   }
 
   /**
    * Sends QUIT
    */
   quit() {
     this._authenticating = false;
@@ -500,16 +509,17 @@ class SmtpClient {
   }
 
   /**
    * Indicates that the socket has been closed
    */
   _onClose = () => {
     this.logger.debug("Socket closed.");
     this._free();
+    this.messagesSent = 0;
     if (this._authenticating) {
       // In some cases, socket is closed for invalid username/password.
       this._onAuthFailed({ data: "Socket closed." });
     }
   };
 
   /**
    * This is not a socket data handler but the handler for data emitted by the parser,
diff --git a/mailnews/compose/src/SmtpServer.jsm b/mailnews/compose/src/SmtpServer.jsm
--- a/mailnews/compose/src/SmtpServer.jsm
+++ b/mailnews/compose/src/SmtpServer.jsm
@@ -466,16 +466,20 @@ class SmtpServer {
       return client;
     }
     if (
       this._freeConnections.length + this._busyConnections.length <
       this.maximumConnectionsNumber
     ) {
       // Create a new client if the pool is not full.
       client = new lazy.SmtpClient(this);
+      client.maxMessagesPerConnection = this._getIntPrefWithDefault(
+        "max_messages_per_connection",
+        0
+      );
       this._busyConnections.push(client);
       return client;
     }
     // Wait until a connection is available.
     await new Promise(resolve => this._connectionWaitingQueue.push(resolve));
     return this._getNextClient();
   }
   /**
@@ -483,16 +487,26 @@ class SmtpServer {
    *
    * @param {Function} handler - A callback function to take a SmtpClient
    *   instance, and do some actions.
    */
   async withClient(handler) {
     let client = await this._getNextClient();
     client.onFree = () => {
       this._busyConnections = this._busyConnections.filter(c => c != client);
-      this._freeConnections.push(client);
-      // Resovle the first waiting in queue.
-      this._connectionWaitingQueue.shift()?.();
+      if (
+        client.maxMessagesPerConnection <= 0 ||
+        client.messagesSent < client.maxMessagesPerConnection
+      ) {
+        this._freeConnections.push(client);
+        // Resolve the first waiting in queue.
+        this._connectionWaitingQueue.shift()?.();
+      } else {
+        client.logger.debug(
+          `Sent #${client.messagesSent} messages (limit: ${client.maxMessagesPerConnection}), quitting.`
+        );
+        client.quit();
+      }
     };
     handler(client);
     client.connect();
   }
 }
diff --git a/mailnews/mailnews.js b/mailnews/mailnews.js
--- a/mailnews/mailnews.js
+++ b/mailnews/mailnews.js
@@ -524,16 +524,19 @@ pref("mail.server.default.clientid", "")
 pref("mail.smtpserver.default.clientid", "");
 
 // This is not to be enabled by default until the prerequisite
 // changes are completed. See here for details:
 //  https://bugzilla.mozilla.org/show_bug.cgi?id=1565379
 pref("mail.server.default.clientidEnabled", false);
 pref("mail.smtpserver.default.clientidEnabled", false);
 pref("mail.smtpserver.default.max_cached_connections", 3);
+// Some servers don't like too many messages on the same connection.
+// In this case, set the pref to a value greater than 0.
+pref("mail.smtpserver.default.max_messages_per_connection", 0);
 
 pref("mail.smtpservers", "");
 pref("mail.accountmanager.accounts", "");
 
 // Last used account key value
 pref("mail.account.lastKey", 0);
 
 pref("mail.server.default.port", -1);
