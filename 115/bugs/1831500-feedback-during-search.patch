# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1686701801 -7200
# Parent  082e08875d6179ae5f9b9e82041bb9a3c623ecde
Bug 1831500 - Reinstate feedback during search.
* * *
Backout of bug 1830550 (rev. 037ea96d7379) to re-establish matches/nomatches

diff --git a/mail/base/content/FilterListDialog.js b/mail/base/content/FilterListDialog.js
--- a/mail/base/content/FilterListDialog.js
+++ b/mail/base/content/FilterListDialog.js
@@ -1098,17 +1098,22 @@ function updateCountBox() {
   let len = gFilterListbox.itemCount;
 
   if (len == sum) {
     // "N items"
     countBox.value = PluralForm.get(
       len,
       gFilterBundle.getString("filterCountItems")
     ).replace("#1", len);
+    countBox.removeAttribute("filterActive");
     return;
   }
 
   // "N of M"
   countBox.value = gFilterBundle.getFormattedString(
     "filterCountVisibleOfTotal",
     [len, sum]
   );
+  countBox.setAttribute(
+    "filterActive",
+    len == 0 && sum > 0 ? "nomatches" : "matches"
+  );
 }
diff --git a/mail/base/content/mailCommon.js b/mail/base/content/mailCommon.js
--- a/mail/base/content/mailCommon.js
+++ b/mail/base/content/mailCommon.js
@@ -847,17 +847,33 @@ var dbViewWrapperListener = {
   },
   get shouldDeferMessageDisplayUntilAfterServerConnect() {
     return false;
   },
   shouldMarkMessagesReadOnLeavingFolder(msgFolder) {
     return false;
   },
   onFolderLoading(isFolderLoading) {},
-  onSearching(isSearching) {},
+  onSearching(isSearching) {
+    if (isSearching) {
+      // Set the "searching" attribute on the threadPane.
+      window.quickFilterBar?.reflectFiltererResults();
+    }
+    let tabmail = top.document.getElementById("tabmail");
+    let tab = tabmail?.currentTabInfo;
+    if (tab) {
+      let searchBundle = Services.strings.createBundle(
+        "chrome://messenger/locale/search.properties"
+      );
+      tabmail.setTabThinking(
+        tab,
+        isSearching && searchBundle.GetStringFromName("searchingMessage")
+      );
+    }
+  },
   onCreatedView() {
     if (window.threadTree) {
       window.threadPane.setTreeView(gViewWrapper.dbView);
 
       if (
         gViewWrapper.sortImpliesTemporalOrdering &&
         gViewWrapper.isSortedAscending
       ) {
@@ -892,16 +908,25 @@ var dbViewWrapperListener = {
     // Try to restore what was selected. Keep the saved selection (if there is
     // one) until we have all of the messages.
     window.threadPane?.restoreSelection(all);
 
     if (all) {
       window.threadTree?.invalidate();
     }
     window.quickFilterBar?.onMessagesChanged();
+
+    let tabmail = top.document.getElementById("tabmail");
+    let tab = tabmail?.currentTabInfo;
+    if (tab) {
+      tabmail.setTabThinking(
+        tab,
+        false
+      );
+    }
   },
   onMailViewChanged() {},
   onSortChanged() {
     window.threadTree?.invalidate();
   },
   onMessagesRemoved() {
     window.quickFilterBar?.onMessagesChanged();
 
diff --git a/mail/base/content/quickFilterBar.js b/mail/base/content/quickFilterBar.js
--- a/mail/base/content/quickFilterBar.js
+++ b/mail/base/content/quickFilterBar.js
@@ -330,19 +330,23 @@ var quickFilterBar = {
     this.domNode.hidden = !this.filterer.visible;
   },
 
   /**
    * Update the UI to reflect the state of the folderDisplay in terms of
    *  filtering.  This is expected to be called by |reflectFiltererState| and
    *  when something happens event-wise in terms of search.
    *
-   * We can have one of two states:
+   * We can have one of four states:
    * - No filter is active; no attributes exposed for CSS to do anything.
    * - A filter is active and we are still searching; filterActive=searching.
+   * - A filter is active, completed searching, and we have results;
+   *   filterActive=matches.
+   * - A filter is active, completed searching, and we have no results;
+   *   filterActive=nomatches.
    */
   reflectFiltererResults() {
     let threadPane = document.getElementById("threadTree");
 
     // bail early if the view is in the process of being created
     if (!gDBView) {
       return;
     }
@@ -351,19 +355,33 @@ var quickFilterBar = {
     if (!gViewWrapper.search || !gViewWrapper.search.userTerms) {
       threadPane.removeAttribute("filterActive");
       this.domNode.removeAttribute("filterActive");
     } else if (gViewWrapper.searching) {
       // filter active, still searching
       // Do not set this immediately; wait a bit and then only set this if we
       //  still are in this same state (and we are still the active tab...)
       setTimeout(() => {
-        threadPane.setAttribute("filterActive", "searching");
-        this.domNode.setAttribute("filterActive", "searching");
+        // Check status again, otherwise we'll set "searching" when
+        // the search is already over.
+        if (gViewWrapper.searching) {
+          threadPane.setAttribute("filterActive", "searching");
+          this.domNode.setAttribute("filterActive", "searching");
+        }
       }, 500);
+    } else if (gDBView.numMsgsInView) {
+      // filter completed, results
+      // some matches
+      threadPane.setAttribute("filterActive", "matches");
+      this.domNode.setAttribute("filterActive", "matches");
+    } else {
+      // filter completed, no results
+      // no matches! :(
+      threadPane.setAttribute("filterActive", "nomatches");
+      this.domNode.setAttribute("filterActive", "nomatches");
     }
   },
 
   // ----------------------
   // Event Handling Support
 
   /**
    * Retrieve the current filter state value (presumably an object) for mutation
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -1774,16 +1774,17 @@ var { UIFontSize } = ChromeUtils.import(
     _setActiveThinkingState(aThinkingState) {
       if (aThinkingState) {
         statusFeedback.showProgress(0);
         if (typeof aThinkingState == "string") {
           statusFeedback.showStatusString(aThinkingState);
         }
       } else {
         statusFeedback.showProgress(0);
+        statusFeedback.showStatusString("");
       }
     }
 
     setTabThinking(aTabNodeOrInfo, aThinking) {
       let [iTab, tab, tabNode] = this._getTabContextForTabbyThing(
         aTabNodeOrInfo,
         false
       );
diff --git a/mail/themes/shared/mail/filterDialog.css b/mail/themes/shared/mail/filterDialog.css
--- a/mail/themes/shared/mail/filterDialog.css
+++ b/mail/themes/shared/mail/filterDialog.css
@@ -82,16 +82,24 @@ checkbox:not([label]) .checkbox-label-bo
 .ruleactionitem {
   min-width: 20em;
 }
 
 .ruleaction-type {
   min-width: 15em;
 }
 
+#countBox[filterActive="matches"] {
+  color: #4e9a06;
+}
+
+#countBox[filterActive="nomatches"] {
+  color: #c00;
+}
+
 #statusbar {
   height: 1.8em;
   padding: 2px 4px;
 }
 
 toolbarbutton[is="toolbarbutton-menu-button"] {
   appearance: none;
   min-height: 24px;
diff --git a/mail/themes/shared/mail/quickFilterBar.css b/mail/themes/shared/mail/quickFilterBar.css
--- a/mail/themes/shared/mail/quickFilterBar.css
+++ b/mail/themes/shared/mail/quickFilterBar.css
@@ -37,20 +37,25 @@
 
 #qfd-dropdown {
   background-image: var(--icon-filter);
   display: none;
 }
 
 #qfb-results-label {
   margin: 3px;
+  color: var(--color-green-60);
   text-align: end;
   align-self: center;
 }
 
+#quick-filter-bar[filterActive="nomatches"] #qfb-results-label {
+  color: var(--color-red-50);
+}
+
 #qfb-qs-textbox {
   flex: 1;
   height: unset;
   margin: 3px;
   padding-block: 3px;
   max-width: 450px;
 }
 
@@ -166,19 +171,50 @@
 #quick-filter-bar-filter-text-bar > .button-group > .button {
   min-width: 0;
 }
 
 #qfb-upsell-line-one {
   font-weight: bold;
 }
 
-/*#threadTree[filterActive] {
+#threadTree[filterActive="matches"] > .tree-table {
+  background: repeating-linear-gradient(-45deg,
+                                        var(--color-gray-10),
+                                        var(--color-gray-10) 5px,
+                                        white 5px,
+                                        white 10px);
+}
+@media (prefers-color-scheme: dark) {
+  #threadTree[filterActive="matches"] > .tree-table {
+    background: repeating-linear-gradient(-45deg,
+                                          var(--color-gray-90),
+                                          var(--color-gray-90) 5px,
+                                          black 5px,
+                                          black 10px);
+  }
+}
+
+#threadTree[filterActive="nomatches"] {
+  background: repeating-linear-gradient(-45deg,
+                                        var(--color-red-10),
+                                        var(--color-red-10) 5px,
+                                        white 5px,
+                                        white 10px);
+}
+@media (prefers-color-scheme: dark) {
+  #threadTree[filterActive="nomatches"] {
+    background: repeating-linear-gradient(-45deg,
+                                          var(--color-red-90),
+                                          var(--color-red-90) 5px,
+                                          black 5px,
+                                          black 10px);
+  }
+}
+
+#threadTree[filterActive="searching"] > .tree-table {
   background-repeat: no-repeat;
-  background-position: center;
+  background-position: center 40px;
   -moz-context-properties: fill, fill-opacity;
   fill: currentColor;
   fill-opacity: .3;
+  background-image: url("chrome://messenger/skin/icons/search-spinner.svg");
 }
-
-#threadTree[filterActive="searching"] {
-  background-image: url("chrome://messenger/skin/icons/search-spinner.svg");
-}*/
