# HG changeset patch
# User Gene Smith <gds@chartertn.net>
# Date 1707950951 -3600
# Node ID 0b057d91cb178981447c6785b25bf1bd33d61a07
# Parent  cae282c397e9d29a06781f5b9a0804b07bc43e80
Bug 1865598 - Yahoo imap fix for filtering and new message detection. r=mkmelin

This is caused by a fairly recent change by yahoo that returns UID
fetch items with highest sequence/UID first instead of last. Most (all?)
other server types return fetches with lowest seq/UID first.
The changes in nsMsgDatabase.cpp/nsMsgDBFolder.cpp  independently fix the new
 message detection.
The changes in nsImapMailFolder.cpp independently fix the filtering.

Differential Revision: https://phabricator.services.mozilla.com/D197470

diff --git a/mailnews/base/src/nsMsgDBFolder.cpp b/mailnews/base/src/nsMsgDBFolder.cpp
--- a/mailnews/base/src/nsMsgDBFolder.cpp
+++ b/mailnews/base/src/nsMsgDBFolder.cpp
@@ -678,20 +678,25 @@ nsresult nsMsgDBFolder::ReadDBFolderInfo
           SetUserSortOrderInCache(mSortOrder, false);
         }
 
         // These should be put in IMAP folder only.
         // folderInfo->GetImapTotalPendingMessages(&mNumPendingTotalMessages);
         // folderInfo->GetImapUnreadPendingMessages(&mNumPendingUnreadMessages);
 
         if (db) {
+          // Except for the sort, this is a noop. But this seems to be the only
+          // place that new keys are detected and, without the sort, new
+          // messages are not detected for yahoo (returns imap UIDs highest
+          // first unlike other imap server types).
           bool hasnew;
           nsresult rv;
           rv = db->HasNew(&hasnew);
-          if (NS_FAILED(rv)) return rv;
+          NS_ENSURE_SUCCESS(rv, rv);
+          if (hasnew) db->SortNewKeysIfNeeded();
         }
         if (weOpenedDB) CloseDBIfFolderNotOpen(false);
       }
     } else {
       // we tried to open DB but failed - don't keep trying.
       // If a DB is created, we will call this method with force == TRUE,
       // and read from the db that way.
       mInitializedFromCache = true;
@@ -1119,25 +1124,26 @@ NS_IMETHODIMP nsMsgDBFolder::OnHdrFlagsC
     if (!(aNewFlags & nsMsgMessageFlags::New))
       CheckWithNewMessagesStatus(false);
   }
 
   return NS_OK;
 }
 
 nsresult nsMsgDBFolder::CheckWithNewMessagesStatus(bool messageAdded) {
-  bool hasNewMessages;
   if (messageAdded)
     SetHasNewMessages(true);
   else  // message modified or deleted
   {
     if (mDatabase) {
+      bool hasNewMessages;
       nsresult rv = mDatabase->HasNew(&hasNewMessages);
       NS_ENSURE_SUCCESS(rv, rv);
       SetHasNewMessages(hasNewMessages);
+      if (hasNewMessages) mDatabase->SortNewKeysIfNeeded();
     }
   }
 
   return NS_OK;
 }
 
 // 3.  When a message gets deleted, we need to see if it was new
 //     When we lose a new message we need to check if there are still new
diff --git a/mailnews/db/msgdb/public/nsIMsgDatabase.idl b/mailnews/db/msgdb/public/nsIMsgDatabase.idl
--- a/mailnews/db/msgdb/public/nsIMsgDatabase.idl
+++ b/mailnews/db/msgdb/public/nsIMsgDatabase.idl
@@ -409,16 +409,17 @@ interface nsIMsgDatabase : nsIDBChangeAn
   // true, we'll call nsIMsgFolder::DeleteMessages to delete the messages.
   // Otherwise, we'll just delete them from the db.
   void applyRetentionSettings(in nsIMsgRetentionSettings aMsgRetentionSettings,
                               in boolean aDeleteViaFolder);
 
   attribute nsIMsgDownloadSettings msgDownloadSettings;
 
   boolean hasNew();
+  void sortNewKeysIfNeeded();
   void clearNewList(in boolean notify);
   void addToNewList(in nsMsgKey key);
 
   // Used mainly to force the timestamp of a local mail folder db to
   // match the time stamp of the corresponding berkeley mail folder,
   // but also useful to tell the summary to mark itself invalid
   // Also, if a local folder is being reparsed, summary will be invalid
   // until the reparsing is done.
diff --git a/mailnews/db/msgdb/src/nsMsgDatabase.cpp b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
--- a/mailnews/db/msgdb/src/nsMsgDatabase.cpp
+++ b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
@@ -2393,19 +2393,28 @@ NS_IMETHODIMP nsMsgDatabase::MarkAllRead
   rv = m_dbFolderInfo->GetNumUnreadMessages(&numUnreadMessages);
   if (NS_SUCCEEDED(rv))
     m_dbFolderInfo->ChangeNumUnreadMessages(-numUnreadMessages);
   // caller will Commit the db, so no need to do it here.
   return rv;
 }
 
 NS_IMETHODIMP nsMsgDatabase::AddToNewList(nsMsgKey key) {
-  // we add new keys in increasing order...
-  if (m_newSet.IsEmpty() || (m_newSet[m_newSet.Length() - 1] < key))
+  // Typically, we add new keys in increasing order...
+  // Most servers provide the keys (for imap, keys are UIDs) in increasing
+  // (ascending) order, so if the new key is larger than the last key stored
+  // in the array, we append it. But some servers (e.g. yahoo) return the keys
+  // in reverse order so we still add them to the array if the key is not
+  // already there. Before using the array, the keys must be sorted in ascending
+  // order so that all new messages are marked properly (with orange dot) when
+  // first displayed. See SortNewKeysIfNeeded().
+  if (m_newSet.IsEmpty() || key > m_newSet[m_newSet.Length() - 1] ||
+      !m_newSet.Contains(key)) {
     m_newSet.AppendElement(key);
+  }
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgDatabase::ClearNewList(bool notify /* = FALSE */) {
   if (notify && !m_newSet.IsEmpty())  // need to update view
   {
     nsTArray<nsMsgKey> saveNewSet;
     // clear m_newSet so that the code that's listening to the key change
@@ -2434,16 +2443,29 @@ NS_IMETHODIMP nsMsgDatabase::ClearNewLis
 
 NS_IMETHODIMP nsMsgDatabase::HasNew(bool* _retval) {
   if (!_retval) return NS_ERROR_NULL_POINTER;
 
   *_retval = (m_newSet.Length() > 0);
   return NS_OK;
 }
 
+/**
+ * Ensure the keys for new messages are in ascending order (lowest first).
+ * Sorting is needed only for servers that return keys in descending order and
+ * when there is more than 1 new key in the "new" array. See AddToNewList().
+ */
+NS_IMETHODIMP nsMsgDatabase::SortNewKeysIfNeeded() {
+  size_t hiIdx = m_newSet.Length() - 1;
+  if (hiIdx > 0 && m_newSet.ElementAt(hiIdx - 1) > m_newSet.ElementAt(hiIdx)) {
+    m_newSet.Sort();
+  }
+  return NS_OK;
+}
+
 NS_IMETHODIMP nsMsgDatabase::GetFirstNew(nsMsgKey* result) {
   bool hasnew;
   nsresult rv = HasNew(&hasnew);
   if (NS_FAILED(rv)) return rv;
   *result = (hasnew) ? m_newSet.ElementAt(0) : nsMsgKey_None;
   return NS_OK;
 }
 
diff --git a/mailnews/imap/src/nsImapMailFolder.cpp b/mailnews/imap/src/nsImapMailFolder.cpp
--- a/mailnews/imap/src/nsImapMailFolder.cpp
+++ b/mailnews/imap/src/nsImapMailFolder.cpp
@@ -213,16 +213,17 @@ NS_IMETHODIMP nsMsgQuota::SetLimit(uint6
 
 //
 //  nsImapMailFolder
 //
 nsImapMailFolder::nsImapMailFolder()
     : m_initialized(false),
       m_haveDiscoveredAllFolders(false),
       m_curMsgUid(0),
+      m_previousHighestUid(0),
       m_nextMessageByteLength(0),
       m_urlRunning(false),
       m_verifiedAsOnlineFolder(false),
       m_explicitlyVerify(false),
       m_folderIsNamespace(false),
       m_folderNeedsSubscribing(false),
       m_folderNeedsAdded(false),
       m_folderNeedsACLListed(true),
@@ -2888,22 +2889,51 @@ nsresult nsImapMailFolder::NormalEndHead
 
   newMsgHdr->SetMessageKey(m_curMsgUid);
   TweakHeaderFlags(aProtocol, newMsgHdr);
   uint32_t messageSize;
   if (NS_SUCCEEDED(newMsgHdr->GetMessageSize(&messageSize)))
     mFolderSize += messageSize;
   m_msgMovedByFilter = false;
 
-  nsMsgKey highestUID = 0;
+  nsMsgKey highestUid = 0;
   nsCOMPtr<nsIDBFolderInfo> dbFolderInfo;
   if (mDatabase) mDatabase->GetDBFolderInfo(getter_AddRefs(dbFolderInfo));
-  if (dbFolderInfo)
+  if (dbFolderInfo) {
     dbFolderInfo->GetUint32Property(kHighestRecordedUIDPropertyName, 0,
-                                    &highestUID);
+                                    &highestUid);
+    MOZ_LOG(IMAP_CS, mozilla::LogLevel::Debug,
+            ("NormalEndHeaderParseStream(): got stored highest UID=%" PRIu32
+             " for folder=%s",
+             highestUid, m_onlineFolderName.get()));
+    if (m_curMsgUid > highestUid) {
+      // Most imap servers fetch UIDs in increasing/ascending order so only
+      // this "if" branch will occur. Servers that fetch in descending order
+      // (e.g., Yahoo) will take this branch the on the first header fetch and
+      // then take the "else" branch for any remaining headers using the saved
+      // previous highest UID.
+      m_previousHighestUid = highestUid;
+      MOZ_LOG(IMAP_CS, mozilla::LogLevel::Debug,
+              ("NormalEndHeaderParseStream(): store new highest UID=%" PRIu32
+               " for folder=%s",
+               m_curMsgUid, m_onlineFolderName.get()));
+      dbFolderInfo->SetUint32Property(kHighestRecordedUIDPropertyName,
+                                      m_curMsgUid);
+    } else {
+      // Some imap servers fetch UIDs in descending order, e.g., Yahoo.
+      // This only occurs if more than one header for new messages are fetched
+      // and the UID for this header is smaller than the saved previous UID.
+      highestUid = m_previousHighestUid;
+      MOZ_LOG(
+          IMAP_CS, mozilla::LogLevel::Debug,
+          ("NormalEndHeaderParseStream(): (descending) got highest UID=%" PRIu32
+           " for folder=%s",
+           highestUid, m_onlineFolderName.get()));
+    }
+  }
 
   // If this is the inbox, try to apply filters. Otherwise, test the inherited
   // folder property "applyIncomingFilters" (which defaults to empty). If this
   // inherited property has the string value "true", then apply filters even
   // if this is not the Inbox folder.
   if (mFlags & nsMsgFolderFlags::Inbox || m_applyIncomingFilters) {
     // Use highwater to determine whether to filter?
     bool filterOnHighwater = false;
@@ -2913,17 +2943,17 @@ nsresult nsImapMailFolder::NormalEndHead
       prefBranch->GetBoolPref("mail.imap.filter_on_new", &filterOnHighwater);
 
     uint32_t msgFlags;
     newMsgHdr->GetFlags(&msgFlags);
 
     // clang-format off
     bool doFilter = filterOnHighwater
       // Filter on largest UUID and not deleted.
-      ? m_curMsgUid > highestUID && !(msgFlags & nsMsgMessageFlags::IMAPDeleted)
+      ? m_curMsgUid > highestUid && !(msgFlags & nsMsgMessageFlags::IMAPDeleted)
       // Filter on unread and not deleted.
       : !(msgFlags & (nsMsgMessageFlags::Read | nsMsgMessageFlags::IMAPDeleted));
     // clang-format on
 
     if (doFilter)
       MOZ_LOG(FILTERLOGMODULE, LogLevel::Info,
               ("(Imap) New message parsed, and filters will be run on it"));
     else
@@ -3007,27 +3037,16 @@ nsresult nsImapMailFolder::NormalEndHead
       notifier->NotifyMsgKeyChanged(pseudoKey, newMsgHdr);
       m_pseudoHdrs.Remove(newMessageId);
     }
     mDatabase->AddNewHdrToDB(newMsgHdr, true);
     if (notifier) notifier->NotifyMsgAdded(newMsgHdr);
     // mark the header as not yet reported classified
     OrProcessingFlags(m_curMsgUid, nsMsgProcessingFlags::NotReportedClassified);
   }
-  // adjust highestRecordedUID
-  if (dbFolderInfo) {
-    if (m_curMsgUid > highestUID) {
-      MOZ_LOG(IMAP_CS, mozilla::LogLevel::Debug,
-              ("NormalEndHeaderParseStream(): Store new highest UID=%" PRIu32
-               " for folder=%s",
-               m_curMsgUid, m_onlineFolderName.get()));
-      dbFolderInfo->SetUint32Property(kHighestRecordedUIDPropertyName,
-                                      m_curMsgUid);
-    }
-  }
 
   if (m_isGmailServer) {
     nsCOMPtr<nsIImapFlagAndUidState> flagState;
     aProtocol->GetFlagAndUidState(getter_AddRefs(flagState));
     nsCString msgIDValue;
     nsCString threadIDValue;
     nsCString labelsValue;
     flagState->GetCustomAttribute(m_curMsgUid, "X-GM-MSGID"_ns, msgIDValue);
diff --git a/mailnews/imap/src/nsImapMailFolder.h b/mailnews/imap/src/nsImapMailFolder.h
--- a/mailnews/imap/src/nsImapMailFolder.h
+++ b/mailnews/imap/src/nsImapMailFolder.h
@@ -504,16 +504,17 @@ class nsImapMailFolder : public nsMsgDBF
   RefPtr<nsImapMoveCoalescer>
       m_moveCoalescer;  // strictly owned by the nsImapMailFolder
   nsTArray<RefPtr<nsIMsgDBHdr>> m_junkMessagesToMarkAsRead;
   /// list of keys to be moved to the junk folder
   nsTArray<nsMsgKey> mSpamKeysToMove;
   /// the junk destination folder
   nsCOMPtr<nsIMsgFolder> mSpamFolder;
   nsMsgKey m_curMsgUid;
+  nsMsgKey m_previousHighestUid;
   uint32_t m_uidValidity;
 
   // These three vars are used to store counts from STATUS or SELECT command
   // They include deleted messages, so they can differ from the generic
   // folder total and unread counts.
   int32_t m_numServerRecentMessages;
   int32_t m_numServerUnseenMessages;
   int32_t m_numServerTotalMessages;
