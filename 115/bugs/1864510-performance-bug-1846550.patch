# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1700045577 -3600
# Parent  3fac1437d228357653e1e5947dbcd2e48911573a
Bug 1864510 - rework nsMsgDBFolder::{Get|Set}UserSortOrder() to fix performance regression from bug 1846550.

diff --git a/mailnews/base/src/nsMsgDBFolder.cpp b/mailnews/base/src/nsMsgDBFolder.cpp
--- a/mailnews/base/src/nsMsgDBFolder.cpp
+++ b/mailnews/base/src/nsMsgDBFolder.cpp
@@ -590,17 +590,17 @@ void nsMsgDBFolder::UpdateNewMessages() 
   }
 }
 
 // helper function that gets the cache element that corresponds to the passed in
 // file spec. This could be static, or could live in another class - it's not
 // specific to the current nsMsgDBFolder. If it lived at a higher level, we
 // could cache the account manager and folder cache.
 nsresult nsMsgDBFolder::GetFolderCacheElemFromFile(
-    nsIFile* file, nsIMsgFolderCacheElement** cacheElement) {
+    nsIFile* file, nsIMsgFolderCacheElement** cacheElement, bool create) {
   nsresult result;
   NS_ENSURE_ARG_POINTER(file);
   NS_ENSURE_ARG_POINTER(cacheElement);
   nsCOMPtr<nsIMsgFolderCache> folderCache;
 #ifdef DEBUG_bienvenu1
   bool exists;
   NS_ASSERTION(NS_SUCCEEDED(fileSpec->Exists(&exists)) && exists,
                "whoops, file doesn't exist, mac will break");
@@ -609,17 +609,17 @@ nsresult nsMsgDBFolder::GetFolderCacheEl
       do_GetService("@mozilla.org/messenger/account-manager;1", &result);
   if (NS_SUCCEEDED(result)) {
     result = accountMgr->GetFolderCache(getter_AddRefs(folderCache));
     if (NS_SUCCEEDED(result) && folderCache) {
       nsCString persistentPath;
       result = file->GetPersistentDescriptor(persistentPath);
       NS_ENSURE_SUCCESS(result, result);
       result =
-          folderCache->GetCacheElement(persistentPath, false, cacheElement);
+          folderCache->GetCacheElement(persistentPath, create, cacheElement);
     }
   }
   return result;
 }
 
 nsresult nsMsgDBFolder::ReadDBFolderInfo(bool force) {
   // Since it turns out to be pretty expensive to open and close
   // the DBs all the time, if we have to open it once, get everything
@@ -665,17 +665,23 @@ nsresult nsMsgDBFolder::ReadDBFolderInfo
         folderInfo->GetNumMessages(&mNumTotalMessages);
         folderInfo->GetNumUnreadMessages(&mNumUnreadMessages);
         folderInfo->GetExpungedBytes(&mExpungedBytes);
 
         nsCString utf8Name;
         folderInfo->GetFolderName(utf8Name);
         if (!utf8Name.IsEmpty()) CopyUTF8toUTF16(utf8Name, mName);
 
+        // We should only ever get the sort order from the folder cache.
+        // If we're opening the database anyway, possibly because
+        // folderCache.json was deleted, we read the sort order "just in case".
         folderInfo->GetFolderSortOrder(&mSortOrder);
+        if (mSortOrder != static_cast<uint32_t>(nsIMsgFolder::NO_SORT_VALUE)) {
+          SetUserSortOrderInCache(mSortOrder, false);
+        }
 
         // These should be put in IMAP folder only.
         // folderInfo->GetImapTotalPendingMessages(&mNumPendingTotalMessages);
         // folderInfo->GetImapUnreadPendingMessages(&mNumPendingUnreadMessages);
 
         if (db) {
           bool hasnew;
           nsresult rv;
@@ -5047,35 +5053,64 @@ NS_IMETHODIMP nsMsgDBFolder::CloseDBIfFo
       !(mFlags & (nsMsgFolderFlags::Trash | nsMsgFolderFlags::Inbox |
                   nsMsgFolderFlags::Queue))) {
     if (aForceClosed && mDatabase) mDatabase->ForceClosed();
     SetMsgDatabase(nullptr);
   }
   return NS_OK;
 }
 
+void nsMsgDBFolder::SetUserSortOrderInCache(uint32_t order, bool overwrite) {
+  nsCOMPtr<nsIFile> dbPath;
+  GetFolderCacheKey(getter_AddRefs(dbPath));
+  if (dbPath) {
+    nsCOMPtr<nsIMsgFolderCacheElement> cacheElement;
+    GetFolderCacheElemFromFile(dbPath, getter_AddRefs(cacheElement), true);
+    if (cacheElement) {
+      uint32_t dummy;
+      if (overwrite ||
+          NS_FAILED(cacheElement->GetCachedUInt32("folderSortOrder", &dummy))) {
+        cacheElement->SetCachedUInt32("folderSortOrder", order);
+      }
+    }
+  }
+}
+
 NS_IMETHODIMP nsMsgDBFolder::SetUserSortOrder(uint32_t order) {
   if (order != mSortOrder) {
+    SetUserSortOrderInCache(order, true);
     nsCOMPtr<nsIMsgDatabase> db;
     nsCOMPtr<nsIDBFolderInfo> folderInfo;
     nsresult rv =
         GetDBFolderInfoAndDB(getter_AddRefs(folderInfo), getter_AddRefs(db));
-    if (NS_SUCCEEDED(rv) && folderInfo) {
+    if (NS_SUCCEEDED(rv)) {
       folderInfo->SetFolderSortOrder(mSortOrder = order);
-      if (db) db->Commit(nsMsgDBCommitType::kLargeCommit);
+      // Committing the db also commits the cache.
+      db->Commit(nsMsgDBCommitType::kLargeCommit);
     }
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgDBFolder::GetUserSortOrder(uint32_t* order) {
-  NS_ENSURE_ARG_POINTER(order);
-  ReadDBFolderInfo(true);
-  *order = mSortOrder;
-  return NS_OK;
+  nsCOMPtr<nsIFile> dbPath;
+  nsresult rv = GetFolderCacheKey(getter_AddRefs(dbPath));
+  if (dbPath) {
+    nsCOMPtr<nsIMsgFolderCacheElement> cacheElement;
+    rv = GetFolderCacheElemFromFile(dbPath, getter_AddRefs(cacheElement));
+    if (cacheElement)  // try to get from cache
+      rv = cacheElement->GetCachedUInt32("folderSortOrder", order);
+    if (NS_FAILED(rv)) {
+      // Don't open DB for missing order property, if it's not there,
+      // it was never set.
+      *order = static_cast<uint32_t>(nsIMsgFolder::NO_SORT_VALUE);
+      return NS_OK;
+    }
+  }
+  return rv;
 }
 
 NS_IMETHODIMP nsMsgDBFolder::SetSortOrder(int32_t order) {
   return SetUserSortOrder(static_cast<uint32_t>(order));
 }
 
 NS_IMETHODIMP nsMsgDBFolder::GetSortOrder(int32_t* order) {
   NS_ENSURE_ARG_POINTER(order);
diff --git a/mailnews/base/src/nsMsgDBFolder.h b/mailnews/base/src/nsMsgDBFolder.h
--- a/mailnews/base/src/nsMsgDBFolder.h
+++ b/mailnews/base/src/nsMsgDBFolder.h
@@ -120,16 +120,17 @@ class nsMsgDBFolder : public nsSupportsW
   virtual ~nsMsgDBFolder();
 
   virtual nsresult CreateBaseMessageURI(const nsACString& aURI);
 
   void compressQuotesInMsgSnippet(const nsString& aMessageText,
                                   nsAString& aCompressedQuotesStr);
   void decodeMsgSnippet(const nsACString& aEncodingType, bool aIsComplete,
                         nsCString& aMsgSnippet);
+  void SetUserSortOrderInCache(uint32_t order, bool overwrite);
 
   // helper routine to parse the URI and update member variables
   nsresult parseURI(bool needServer = false);
   nsresult GetBaseStringBundle(nsIStringBundle** aBundle);
   nsresult GetStringFromBundle(const char* msgName, nsString& aResult);
   nsresult ThrowConfirmationPrompt(nsIMsgWindow* msgWindow,
                                    const nsAString& confirmString,
                                    bool* confirmed);
@@ -155,17 +156,18 @@ class nsMsgDBFolder : public nsSupportsW
   nsresult CheckWithNewMessagesStatus(bool messageAdded);
   void UpdateNewMessages();
   nsresult OnHdrAddedOrDeleted(nsIMsgDBHdr* hdrChanged, bool added);
   nsresult CreateFileForDB(const nsAString& userLeafName, nsIFile* baseDir,
                            nsIFile** dbFile);
 
   nsresult GetFolderCacheKey(nsIFile** aFile);
   nsresult GetFolderCacheElemFromFile(nsIFile* file,
-                                      nsIMsgFolderCacheElement** cacheElement);
+                                      nsIMsgFolderCacheElement** cacheElement,
+                                      bool create = false);
   nsresult AddDirectorySeparator(nsIFile* path);
   nsresult CheckIfFolderExists(const nsAString& newFolderName,
                                nsIMsgFolder* parentFolder,
                                nsIMsgWindow* msgWindow);
   bool ConfirmAutoFolderRename(nsIMsgWindow* aMsgWindow,
                                const nsString& aOldName,
                                const nsString& aNewName);
 
