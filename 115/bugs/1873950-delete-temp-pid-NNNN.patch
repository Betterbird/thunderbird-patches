# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1704973741 -3600
# Parent  e9a5907766da64823d23071de64d4c19328ef7c3
Bug 1873950 - Delete pid-NNNN directory for temporary files on exit.

Bonus fix: Fix `nsMsgCreateTempFile()` so it cleans up after itself and remove second copy of the function.

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -131,16 +131,17 @@ var gCloseWindowAfterSave;
 var gSavedSendNowKey;
 var gContextMenu;
 var gLastFocusElement = null;
 var gLoadingComplete = false;
 
 var gAttachmentBucket;
 var gAttachmentCounter;
 var gRecentFiles;
+var gTempDirsToDelete = [];
 /**
  * typedef {Object} FocusArea
  *
  * @property {Element} root - The root of a given area of the UI.
  * @property {moveFocusWithin} focus - A method to move the focus within the
  *   root.
  */
 /**
@@ -6066,16 +6067,22 @@ function ComposeUnload() {
   if (msgWindow) {
     msgWindow.closeWindow();
   }
 
   ReleaseGlobalVariables();
 
   top.controllers.removeController(SecurityController);
 
+  for (let dir of gTempDirsToDelete) {
+    if (dir.exists()) {
+      dir.remove(true);
+    }
+  }
+
   // This destroys the window for us.
   MsgComposeCloseWindow();
 }
 
 function onEncryptionChoice(value) {
   switch (value) {
     case "OpenPGP":
       if (isPgpConfigured()) {
@@ -8314,27 +8321,26 @@ function FileToAttachment(file) {
 }
 
 async function messageAttachmentToFile(attachment) {
   let pathTempDir = PathUtils.join(
     PathUtils.tempDir,
     "pid-" + Services.appinfo.processID
   );
   await IOUtils.makeDirectory(pathTempDir, { permissions: 0o700 });
+  let tempDir = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
+  tempDir.initWithPath(pathTempDir);
   let pathTempFile = await IOUtils.createUniqueFile(
     pathTempDir,
     attachment.name.replaceAll(/[/:*?\"<>|]/g, "_"),
     0o600
   );
   let tempFile = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
   tempFile.initWithPath(pathTempFile);
-  let extAppLauncher = Cc[
-    "@mozilla.org/uriloader/external-helper-app-service;1"
-  ].getService(Ci.nsPIExternalAppLauncher);
-  extAppLauncher.deleteTemporaryFileOnExit(tempFile);
+  gTempDirsToDelete.push(tempDir);
 
   let service = MailServices.messageServiceFromURI(attachment.url);
   let bytes = await new Promise((resolve, reject) => {
     let streamlistener = {
       _data: [],
       _stream: null,
       onDataAvailable(aRequest, aInputStream, aOffset, aCount) {
         if (!this._stream) {
@@ -8452,20 +8458,17 @@ async function AddAttachments(aAttachmen
       let uniqueTmpFile = await IOUtils.getFile(uniquePath);
       let tempFile = gMessenger.saveAttachmentToFolder(
         attachment.contentType,
         attachment.url,
         encodeURIComponent(uniqueTmpFile.leafName),
         attachment.msgUri,
         tempDir
       );
-      let extAppLauncher = Cc[
-        "@mozilla.org/uriloader/external-helper-app-service;1"
-      ].getService(Ci.nsPIExternalAppLauncher);
-      extAppLauncher.deleteTemporaryFileOnExit(tempFile);
+      gTempDirsToDelete.push(tempDir);
       // Store the original mailbox:// url in contentLocation.
       attachment.contentLocation = attachment.url;
       attachment.url = Services.io.newFileURI(tempFile).spec;
     }
 
     let item = gAttachmentBucket.appendItem(attachment);
     addedAttachments.push(attachment);
 
diff --git a/mailnews/compose/src/nsMsgCompUtils.cpp b/mailnews/compose/src/nsMsgCompUtils.cpp
--- a/mailnews/compose/src/nsMsgCompUtils.cpp
+++ b/mailnews/compose/src/nsMsgCompUtils.cpp
@@ -94,21 +94,26 @@ nsMsgCompUtils::DetectCharset(const nsAC
 // Create a file for the a unique temp file
 // on the local machine. Caller must free memory
 //
 nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile) {
   if ((!tFileName) || (!*tFileName)) tFileName = "nsmail.tmp";
 
   nsresult rv =
       GetSpecialDirectoryWithFileName(NS_OS_TEMP_DIR, tFileName, tFile);
-
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = (*tFile)->CreateUnique(nsIFile::NORMAL_FILE_TYPE, 00600);
-  if (NS_FAILED(rv)) NS_RELEASE(*tFile);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsCOMPtr<nsPIExternalAppLauncher> appLauncher =
+      do_GetService(NS_EXTERNALHELPERAPPSERVICE_CONTRACTID);
+  if (appLauncher) {
+    appLauncher->DeleteTemporaryFileOnExit(*tFile);
+  }
 
   return rv;
 }
 
 // This is the value a caller will Get if they don't Set first (like MDN
 // sending a return receipt), so init to the default value of the
 // mail.strictly_mime_headers preference.
 static bool mime_headers_use_quoted_printable_p = true;
diff --git a/mailnews/compose/src/nsMsgCompUtils.h b/mailnews/compose/src/nsMsgCompUtils.h
--- a/mailnews/compose/src/nsMsgCompUtils.h
+++ b/mailnews/compose/src/nsMsgCompUtils.h
@@ -42,17 +42,16 @@ already_AddRefed<nsIArray> GetEmbeddedOb
 
 PR_BEGIN_EXTERN_C
 
 //
 // Create a file spec or file name using the name passed
 // in as a template
 //
 nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
-char* nsMsgCreateTempFileName(const char* tFileName);
 
 //
 // Various utilities for building parts of MIME encoded
 // messages during message composition
 //
 
 nsresult mime_sanity_check_fields_recipients(const char* to, const char* cc,
                                              const char* bcc,
diff --git a/mailnews/mime/src/mimedrft.cpp b/mailnews/mime/src/mimedrft.cpp
--- a/mailnews/mime/src/mimedrft.cpp
+++ b/mailnews/mime/src/mimedrft.cpp
@@ -37,16 +37,17 @@
 #include "nsIMsgCompFields.h"
 #include "nsIMsgComposeService.h"
 #include "nsMsgAttachmentData.h"
 #include "nsMsgI18N.h"
 #include "nsNativeCharsetUtils.h"
 #include "nsDirectoryServiceDefs.h"
 #include "nsIMsgMessageService.h"
 #include "nsMsgUtils.h"
+#include "../../compose/src/nsMsgCompUtils.h"
 #include "nsCExternalHandlerService.h"
 #include "nsIMIMEService.h"
 #include "nsIMsgAccountManager.h"
 #include "modmimee.h"  // for MimeConverterOutputCallback
 #include "mozilla/dom/Promise.h"
 #include "mozilla/mailnews/MimeHeaderParser.h"
 
 using namespace mozilla::mailnews;
@@ -90,48 +91,16 @@ mime_draft_data::mime_draft_data()
       messageBody(nullptr),
       curAttachment(nullptr),
       decoder_data(nullptr),
       mailcharset(nullptr),
       forwardInline(false),
       forwardInlineFilter(false),
       overrideComposeFormat(false),
       autodetectCharset(false) {}
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-// THIS SHOULD ALL MOVE TO ANOTHER FILE AFTER LANDING!
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-
-// safe filename for all OSes
-#define SAFE_TMP_FILENAME "nsmime.tmp"
-
-//
-// Create a file for the a unique temp file
-// on the local machine. Caller must free memory
-//
-nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile) {
-  if (!tFileName || !*tFileName) tFileName = SAFE_TMP_FILENAME;
-
-  nsresult rv =
-      GetSpecialDirectoryWithFileName(NS_OS_TEMP_DIR, tFileName, tFile);
-
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  rv = (*tFile)->CreateUnique(nsIFile::NORMAL_FILE_TYPE, 00600);
-  if (NS_FAILED(rv)) NS_RELEASE(*tFile);
-
-  return rv;
-}
-
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-// END OF - THIS SHOULD ALL MOVE TO ANOTHER FILE AFTER LANDING!
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
 
 typedef enum {
   nsMsg_RETURN_RECEIPT_BOOL_HEADER_MASK = 0,
   nsMsg_ENCRYPTED_BOOL_HEADER_MASK,
   nsMsg_SIGNED_BOOL_HEADER_MASK,
   nsMsg_UUENCODE_BINARY_BOOL_HEADER_MASK,
   nsMsg_ATTACH_VCARD_BOOL_HEADER_MASK,
   nsMsg_LAST_BOOL_HEADER_MASK  // last boolean header mask; must be the last one
diff --git a/mailnews/mime/src/mimemrel.cpp b/mailnews/mime/src/mimemrel.cpp
--- a/mailnews/mime/src/mimemrel.cpp
+++ b/mailnews/mime/src/mimemrel.cpp
@@ -105,24 +105,19 @@
 #include "plstr.h"
 #include "mimemoz2.h"
 #include "nsString.h"
 #include "msgCore.h"
 #include "nsMimeStringResources.h"
 #include "nsMimeTypes.h"
 #include "mimebuf.h"
 #include "nsMsgUtils.h"
+#include "../../compose/src/nsMsgCompUtils.h"
 #include <ctype.h>
 
-//
-// External Defines...
-//
-
-extern nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
-
 #define MIME_SUPERCLASS mimeMultipartClass
 MimeDefClass(MimeMultipartRelated, MimeMultipartRelatedClass,
              mimeMultipartRelatedClass, &MIME_SUPERCLASS);
 
 class MimeHashValue {
  public:
   MimeHashValue(MimeObject* obj, char* url) {
     m_obj = obj;
diff --git a/mailnews/mime/src/mimepbuf.cpp b/mailnews/mime/src/mimepbuf.cpp
--- a/mailnews/mime/src/mimepbuf.cpp
+++ b/mailnews/mime/src/mimepbuf.cpp
@@ -6,20 +6,17 @@
 #include "mimepbuf.h"
 #include "mimemoz2.h"
 #include "prmem.h"
 #include "prio.h"
 #include "plstr.h"
 #include "nsMimeStringResources.h"
 #include "nsNetUtil.h"
 #include "nsMsgUtils.h"
-//
-// External Defines...
-//
-extern nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
+#include "../../compose/src/nsMsgCompUtils.h"
 
 /* See mimepbuf.h for a description of the mission of this file.
 
    Implementation:
 
      When asked to buffer an object, we first try to malloc() a buffer to
    hold the upcoming part.  First we try to allocate a 50k buffer, and
    then back off by 5k until we are able to complete the allocation,
