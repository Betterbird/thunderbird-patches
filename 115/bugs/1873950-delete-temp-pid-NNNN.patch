# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1709828458 -3600
# Parent  e99019c4542809caee0db8a5c1dfe18c687b9980
Bug 1873950 - Delete pid-NNNN directory for temporary files on exit.

Bonus fix: Fix `nsMsgCreateTempFile()` so it cleans up after itself and remove second copy of the function.

diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -135,8 +135,9 @@ var gLoadingComplete = false;
 
 var gAttachmentBucket;
 var gAttachmentCounter;
 var gRecentFiles;
+var gTempDirsToDelete = [];
 /**
  * typedef {Object} FocusArea
  *
  * @property {Element} root - The root of a given area of the UI.
@@ -6070,8 +6071,14 @@ function ComposeUnload() {
   ReleaseGlobalVariables();
 
   top.controllers.removeController(SecurityController);
 
+  for (let dir of gTempDirsToDelete) {
+    if (dir.exists()) {
+      dir.remove(true);
+    }
+  }
+
   // This destroys the window for us.
   MsgComposeCloseWindow();
 }
 
@@ -8318,19 +8325,18 @@ async function messageAttachmentToFile(a
     PathUtils.tempDir,
     "pid-" + Services.appinfo.processID
   );
   await IOUtils.makeDirectory(pathTempDir, { permissions: 0o700 });
+  let tempDir = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
+  tempDir.initWithPath(pathTempDir);
   let pathTempFile = await IOUtils.createUniqueFile(
     pathTempDir,
     attachment.name.replaceAll(/[/:*?\"<>|]/g, "_"),
     0o600
   );
   let tempFile = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
   tempFile.initWithPath(pathTempFile);
-  let extAppLauncher = Cc[
-    "@mozilla.org/uriloader/external-helper-app-service;1"
-  ].getService(Ci.nsPIExternalAppLauncher);
-  extAppLauncher.deleteTemporaryFileOnExit(tempFile);
+  gTempDirsToDelete.push(tempDir);
 
   let service = MailServices.messageServiceFromURI(attachment.url);
   let bytes = await new Promise((resolve, reject) => {
     let streamlistener = {
@@ -8456,12 +8462,9 @@ async function AddAttachments(aAttachmen
         encodeURIComponent(uniqueTmpFile.leafName),
         attachment.msgUri,
         tempDir
       );
-      let extAppLauncher = Cc[
-        "@mozilla.org/uriloader/external-helper-app-service;1"
-      ].getService(Ci.nsPIExternalAppLauncher);
-      extAppLauncher.deleteTemporaryFileOnExit(tempFile);
+      gTempDirsToDelete.push(tempDir);
       // Store the original mailbox:// url in contentLocation.
       attachment.contentLocation = attachment.url;
       attachment.url = Services.io.newFileURI(tempFile).spec;
     }
diff --git a/mailnews/compose/src/nsMsgCompUtils.cpp b/mailnews/compose/src/nsMsgCompUtils.cpp
--- a/mailnews/compose/src/nsMsgCompUtils.cpp
+++ b/mailnews/compose/src/nsMsgCompUtils.cpp
@@ -98,13 +98,18 @@ nsresult nsMsgCreateTempFile(const char*
   if ((!tFileName) || (!*tFileName)) tFileName = "nsmail.tmp";
 
   nsresult rv =
       GetSpecialDirectoryWithFileName(NS_OS_TEMP_DIR, tFileName, tFile);
-
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = (*tFile)->CreateUnique(nsIFile::NORMAL_FILE_TYPE, 00600);
-  if (NS_FAILED(rv)) NS_RELEASE(*tFile);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsCOMPtr<nsPIExternalAppLauncher> appLauncher =
+      do_GetService(NS_EXTERNALHELPERAPPSERVICE_CONTRACTID);
+  if (appLauncher) {
+    appLauncher->DeleteTemporaryFileOnExit(*tFile);
+  }
 
   return rv;
 }
 
diff --git a/mailnews/compose/src/nsMsgCompUtils.h b/mailnews/compose/src/nsMsgCompUtils.h
--- a/mailnews/compose/src/nsMsgCompUtils.h
+++ b/mailnews/compose/src/nsMsgCompUtils.h
@@ -46,9 +46,8 @@ PR_BEGIN_EXTERN_C
 // Create a file spec or file name using the name passed
 // in as a template
 //
 nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
-char* nsMsgCreateTempFileName(const char* tFileName);
 
 //
 // Various utilities for building parts of MIME encoded
 // messages during message composition
diff --git a/mailnews/mime/src/mimedrft.cpp b/mailnews/mime/src/mimedrft.cpp
--- a/mailnews/mime/src/mimedrft.cpp
+++ b/mailnews/mime/src/mimedrft.cpp
@@ -41,8 +41,9 @@
 #include "nsNativeCharsetUtils.h"
 #include "nsDirectoryServiceDefs.h"
 #include "nsIMsgMessageService.h"
 #include "nsMsgUtils.h"
+#include "../../compose/src/nsMsgCompUtils.h"
 #include "nsCExternalHandlerService.h"
 #include "nsIMIMEService.h"
 #include "nsIMsgAccountManager.h"
 #include "modmimee.h"  // for MimeConverterOutputCallback
@@ -94,40 +95,8 @@ mime_draft_data::mime_draft_data()
       forwardInline(false),
       forwardInlineFilter(false),
       overrideComposeFormat(false),
       autodetectCharset(false) {}
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-// THIS SHOULD ALL MOVE TO ANOTHER FILE AFTER LANDING!
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-
-// safe filename for all OSes
-#define SAFE_TMP_FILENAME "nsmime.tmp"
-
-//
-// Create a file for the a unique temp file
-// on the local machine. Caller must free memory
-//
-nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile) {
-  if (!tFileName || !*tFileName) tFileName = SAFE_TMP_FILENAME;
-
-  nsresult rv =
-      GetSpecialDirectoryWithFileName(NS_OS_TEMP_DIR, tFileName, tFile);
-
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  rv = (*tFile)->CreateUnique(nsIFile::NORMAL_FILE_TYPE, 00600);
-  if (NS_FAILED(rv)) NS_RELEASE(*tFile);
-
-  return rv;
-}
-
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
-// END OF - THIS SHOULD ALL MOVE TO ANOTHER FILE AFTER LANDING!
-////////////////////////////////////////////////////////////////////////////////////
-////////////////////////////////////////////////////////////////////////////////////
 
 typedef enum {
   nsMsg_RETURN_RECEIPT_BOOL_HEADER_MASK = 0,
   nsMsg_ENCRYPTED_BOOL_HEADER_MASK,
diff --git a/mailnews/mime/src/mimemrel.cpp b/mailnews/mime/src/mimemrel.cpp
--- a/mailnews/mime/src/mimemrel.cpp
+++ b/mailnews/mime/src/mimemrel.cpp
@@ -109,16 +109,11 @@
 #include "nsMimeStringResources.h"
 #include "nsMimeTypes.h"
 #include "mimebuf.h"
 #include "nsMsgUtils.h"
+#include "../../compose/src/nsMsgCompUtils.h"
 #include <ctype.h>
 
-//
-// External Defines...
-//
-
-extern nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
-
 #define MIME_SUPERCLASS mimeMultipartClass
 MimeDefClass(MimeMultipartRelated, MimeMultipartRelatedClass,
              mimeMultipartRelatedClass, &MIME_SUPERCLASS);
 
diff --git a/mailnews/mime/src/mimepbuf.cpp b/mailnews/mime/src/mimepbuf.cpp
--- a/mailnews/mime/src/mimepbuf.cpp
+++ b/mailnews/mime/src/mimepbuf.cpp
@@ -10,12 +10,9 @@
 #include "plstr.h"
 #include "nsMimeStringResources.h"
 #include "nsNetUtil.h"
 #include "nsMsgUtils.h"
-//
-// External Defines...
-//
-extern nsresult nsMsgCreateTempFile(const char* tFileName, nsIFile** tFile);
+#include "../../compose/src/nsMsgCompUtils.h"
 
 /* See mimepbuf.h for a description of the mission of this file.
 
    Implementation:
