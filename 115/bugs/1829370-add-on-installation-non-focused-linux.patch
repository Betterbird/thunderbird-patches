# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1704296027 -3600
# Parent  5048c9e80a147e24d9993646e2c71713e1b3138f
Bug 1829370 - On Linux, allow add-on installation even from non-focused notification panel as a workaround also for ChromeOS.

diff --git a/mail/modules/ExtensionsUI.jsm b/mail/modules/ExtensionsUI.jsm
--- a/mail/modules/ExtensionsUI.jsm
+++ b/mail/modules/ExtensionsUI.jsm
@@ -69,16 +69,19 @@ var PopupNotifications = {
     return getTopWindow().PopupNotifications.remove(notification, isCancel);
   },
 
   show(browser, id, message, anchorID, mainAction, secondaryActions, options) {
     let notifications = getTopWindow().PopupNotifications;
     if (options.popupIconURL == "chrome://browser/content/extension.svg") {
       options.popupIconURL = DEFAULT_EXTENSION_ICON;
     }
+    if (id == "addon-webext-permissions") {
+      Services.prefs.setBoolPref("extensions.install_in_progress", true);
+    }
     return notifications.show(
       browser,
       id,
       message,
       anchorID,
       mainAction,
       secondaryActions,
       options
diff --git a/mail/modules/GlobalPopupNotifications.jsm b/mail/modules/GlobalPopupNotifications.jsm
--- a/mail/modules/GlobalPopupNotifications.jsm
+++ b/mail/modules/GlobalPopupNotifications.jsm
@@ -4,16 +4,19 @@
 
 /** This file is a semi-fork of PopupNotifications.jsm */
 
 var EXPORTED_SYMBOLS = ["PopupNotifications"];
 
 const { PromiseUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/PromiseUtils.sys.mjs"
 );
+var { AppConstants } = ChromeUtils.importESModule(
+  "resource://gre/modules/AppConstants.sys.mjs"
+);
 
 const NOTIFICATION_EVENT_DISMISSED = "dismissed";
 const NOTIFICATION_EVENT_REMOVED = "removed";
 const NOTIFICATION_EVENT_SHOWING = "showing";
 const NOTIFICATION_EVENT_SHOWN = "shown";
 const NOTIFICATION_EVENT_SWAPPING = "swapping";
 
 const ICON_SELECTOR = ".notification-anchor-icon";
@@ -1469,16 +1472,22 @@ PopupNotifications.prototype = {
     if (event.target.localName == "button") {
       return;
     }
     let notificationEl = getNotificationFromElement(event.target);
     this._setNotificationUIState(notificationEl);
   },
 
   _onButtonEvent(event, type, source = "button", notificationEl = null) {
+    let extensionInstall = Services.prefs.getBoolPref(
+      "extensions.install_in_progress",
+      undefined
+    );
+    Services.prefs.deleteBranch("extensions.install_in_progress");
+
     if (!notificationEl) {
       notificationEl = getNotificationFromElement(event.target);
     }
 
     if (!notificationEl) {
       throw new Error(
         "PopupNotifications._onButtonEvent: couldn't find notification element"
       );
@@ -1518,17 +1527,22 @@ PopupNotifications.prototype = {
 
     if (type == "buttoncommand" || type == "secondarybuttoncommand") {
       if (Services.focus.activeWindow != this.window) {
         Services.console.logStringMessage(
           "PopupNotifications._onButtonEvent: " +
             "Button click happened before the window was focused"
         );
         this.window.focus();
-        return;
+        if (AppConstants.platform != "linux" || !extensionInstall) {
+          Services.console.logStringMessage(
+            "PopupNotifications._onButtonEvent: Returning."
+          );
+          return;
+        }
       }
 
       let timeSinceShown =
         this.window.performance.now() - notification.timeShown;
       if (timeSinceShown < this.buttonDelay) {
         Services.console.logStringMessage(
           "PopupNotifications._onButtonEvent: " +
             "Button click happened before the security delay: " +
