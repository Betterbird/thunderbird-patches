# HG changeset patch
# User Magnus Melin <mkmelin+mozilla@iki.fi>
# Date 1704221622 -3600
# Parent  c2e9b8cc11336e2a7751cfb8a530421e35076194
Bug 1872632 - Use IDN service directly when finding server.

diff --git a/mailnews/base/src/nsMsgAccountManager.cpp b/mailnews/base/src/nsMsgAccountManager.cpp
--- a/mailnews/base/src/nsMsgAccountManager.cpp
+++ b/mailnews/base/src/nsMsgAccountManager.cpp
@@ -137,23 +137,16 @@ nsMsgAccountManager::~nsMsgAccountManage
   }
 }
 
 nsresult nsMsgAccountManager::Init() {
   if (!XRE_IsParentProcess()) {
     return NS_ERROR_NOT_AVAILABLE;
   }
 
-  // Make sure URI->GetDisplayHost can be used in the expected way
-  // for FindServerByURI.
-  if (mozilla::Preferences::GetBool("network.IDN_show_punycode")) {
-    mozilla::Preferences::SetBool("network.IDN_show_punycode", false);
-  }
-  mozilla::Preferences::Lock("network.IDN_show_punycode");
-
   nsresult rv;
 
   m_prefs = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsCOMPtr<nsIObserverService> observerService =
       mozilla::services::GetObserverService();
   if (observerService) {
@@ -1827,20 +1820,20 @@ nsMsgAccountManager::FindServerByURI(nsI
   nsAutoCString username;
   nsAutoCString escapedUsername;
   rv = aURI->GetUserPass(escapedUsername);
   if (NS_SUCCEEDED(rv) && !escapedUsername.IsEmpty())
     MsgUnescapeString(escapedUsername, 0, username);
 
   nsAutoCString hostname;
   nsAutoCString escapedHostname;
-  // Use GetDisplayHost() as GetHost() would give non-ascii as punycode.
-  rv = aURI->GetDisplayHost(escapedHostname);
-  if (NS_SUCCEEDED(rv) && !escapedHostname.IsEmpty())
+  rv = aURI->GetHost(escapedHostname);
+  if (NS_SUCCEEDED(rv) && !escapedHostname.IsEmpty()) {
     MsgUnescapeString(escapedHostname, 0, hostname);
+  }
 
   nsAutoCString type;
   rv = aURI->GetScheme(type);
   if (NS_SUCCEEDED(rv) && !type.IsEmpty()) {
     // Remove "-message" from the scheme in case we get called with
     // "imap-message", "mailbox-message", or friends.
     if (StringEndsWith(type, "-message"_ns)) type.SetLength(type.Length() - 8);
     // now modify type if pop or news
@@ -1860,36 +1853,39 @@ nsMsgAccountManager::FindServerByURI(nsI
     // Set the port to zero if we got a -1 (use default)
     if (NS_SUCCEEDED(rv) && (port == -1)) port = 0;
   }
 
   return findServerInternal(username, hostname, type, port, aResult);
 }
 
 nsresult nsMsgAccountManager::findServerInternal(
-    const nsACString& username, const nsACString& hostname,
+    const nsACString& username, const nsACString& serverHostname,
     const nsACString& type, int32_t port, nsIMsgIncomingServer** aResult) {
   if ((m_lastFindServerUserName.Equals(username)) &&
-      (m_lastFindServerHostName.Equals(hostname)) &&
+      (m_lastFindServerHostName.Equals(serverHostname)) &&
       (m_lastFindServerType.Equals(type)) && (m_lastFindServerPort == port) &&
       m_lastFindServerResult) {
     NS_ADDREF(*aResult = m_lastFindServerResult);
     return NS_OK;
   }
 
+  nsresult rv;
+  nsCString hostname;
   nsCOMPtr<nsIIDNService> idnService =
       do_GetService("@mozilla.org/network/idn-service;1");
+  rv = idnService->Normalize(serverHostname, hostname);
+  NS_ENSURE_SUCCESS(rv, rv);
 
   for (auto iter = m_incomingServers.Iter(); !iter.Done(); iter.Next()) {
     // Find matching server by user+host+type+port.
     nsCOMPtr<nsIMsgIncomingServer>& server = iter.Data();
 
     if (!server) continue;
 
-    nsresult rv;
     nsCString thisHostname;
     rv = server->GetHostName(thisHostname);
     if (NS_FAILED(rv)) continue;
 
     rv = idnService->Normalize(thisHostname, thisHostname);
     if (NS_FAILED(rv)) continue;
 
     // If the hostname was a IP with trailing dot, that dot gets removed
