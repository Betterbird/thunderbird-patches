# HG changeset patch
# User Geoff Lankow <geoff@darktrojan.net>
# Date 1700590873 -3600
# Node ID a414e0a65bbe88b9ec94bdff7aea0789ad1d6186
# Parent  7916e29d780bd09df8cabb2a006bf91a3f544a01
Bug 1846127 - Fix applying columns or view to a root folder and its descendants. r=mkmelin

The root folder has no message database, so it would throw an exception and the rest of the operation would fail.

Setting the column states worked in 102 because that used `folder.setStringProperty` which avoided the error.
Now we write directly to the database, which also doesn't write to the folder cache. We never used the value from the cache anyway.

Differential Revision: https://phabricator.services.mozilla.com/D194029

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -5514,16 +5514,19 @@ var threadPane = {
 
     /**
      * Update the columnStates property of the folder database and forget the
      * reference to prevent memory bloat.
      *
      * @param {nsIMsgFolder} folder - The message folder.
      */
     const commitColumnsState = folder => {
+      if (folder.isServer) {
+        return;
+      }
       // Check if the destination folder we're trying to update matches the same
       // special state of the folder we're getting the column state from.
       const colStateString =
         isOutgoing(folder) == currentFolderIsOutgoing
           ? columStateString
           : swappedColumnStateString;
 
       folder.msgDatabase.dBFolderInfo.setCharProperty(
@@ -5588,16 +5591,19 @@ var threadPane = {
 
     /**
      * Update the view state flags of the folder database and forget the
      * reference to prevent memory bloat.
      *
      * @param {nsIMsgFolder} folder - The message folder.
      */
     const commitViewState = folder => {
+      if (folder.isServer) {
+        return;
+      }
       folder.msgDatabase.dBFolderInfo.viewFlags = viewFlags;
       folder.msgDatabase.dBFolderInfo.sortType = sortType;
       folder.msgDatabase.dBFolderInfo.sortOrder = sortOrder;
       // Null out to avoid memory bloat.
       folder.msgDatabase = null;
     };
 
     if (!useChildren) {
diff --git a/mailnews/base/src/nsMsgThreadedDBView.cpp b/mailnews/base/src/nsMsgThreadedDBView.cpp
--- a/mailnews/base/src/nsMsgThreadedDBView.cpp
+++ b/mailnews/base/src/nsMsgThreadedDBView.cpp
@@ -266,16 +266,17 @@ nsMsgThreadedDBView::Sort(nsMsgViewSortT
                           nsMsgViewSortOrderValue sortOrder) {
   nsresult rv;
 
   int32_t rowCountBeforeSort = GetSize();
 
   if (!rowCountBeforeSort) {
     // Still need to setup our flags even when no articles - bug 98183.
     m_sortType = sortType;
+    m_sortOrder = sortOrder;
     if (sortType == nsMsgViewSortType::byThread &&
         !(m_viewFlags & nsMsgViewFlagsType::kThreadedDisplay)) {
       SetViewFlags(m_viewFlags | nsMsgViewFlagsType::kThreadedDisplay);
     }
 
     SaveSortInfo(sortType, sortOrder);
     return NS_OK;
   }
