# HG changeset patch
# User Kai Engert <kaie@kuix.de>
# Date 1716592681 -7200
# Node ID 764e4cd547ad8c1e5286d7ce7d2ff3ebf043901c
# Parent  8cad3184f1230e50ed693a00bd89b4210166e125
Bug 1898832 - With external GnuPG config, never use inner ASCII armor for signature, and fall back to GPGME decoding when seeing BAD_FORMAT error. r=mkmelin

diff --git a/mail/extensions/openpgp/content/modules/GPGME.jsm b/mail/extensions/openpgp/content/modules/GPGME.jsm
--- a/mail/extensions/openpgp/content/modules/GPGME.jsm
+++ b/mail/extensions/openpgp/content/modules/GPGME.jsm
@@ -278,16 +278,17 @@ var GPGME = {
     let result = null;
     //args.sender must be keyId
     let keyId = args.sender.replace(/^0x/, "").toUpperCase();
 
     let ctx = new GPGMELib.gpgme_ctx_t();
     if (GPGMELib.gpgme_new(ctx.address())) {
       throw new Error("gpgme_new failed");
     }
+    GPGMELib.gpgme_set_armor(ctx, 0);
     let keyHandle = new GPGMELib.gpgme_key_t();
     if (!GPGMELib.gpgme_get_key(ctx, keyId, keyHandle.address(), 1)) {
       if (!GPGMELib.gpgme_signers_add(ctx, keyHandle)) {
         var tmp_array = lazy.ctypes.char.array()(plaintext);
         let data_plaintext = new GPGMELib.gpgme_data_t();
 
         // The tmp_array will have one additional byte to store the
         // trailing null character, we don't want to sign it, thus -1.
diff --git a/mail/extensions/openpgp/content/modules/RNP.jsm b/mail/extensions/openpgp/content/modules/RNP.jsm
--- a/mail/extensions/openpgp/content/modules/RNP.jsm
+++ b/mail/extensions/openpgp/content/modules/RNP.jsm
@@ -1842,16 +1842,28 @@ var RNP = {
         rnpCannotDecrypt = true;
         useDecodedData = false;
         processSignature = false;
         queryAllEncryptionRecipients = true;
         result.statusFlags |=
           lazy.EnigmailConstants.DECRYPTION_FAILED |
           lazy.EnigmailConstants.NO_SECKEY;
         break;
+      case RNPLib.RNP_ERROR_BAD_FORMAT:
+        if (Services.prefs.getBoolPref("mail.openpgp.allow_external_gnupg")) {
+          // Same handling as RNP_ERROR_DECRYPT_FAILED, to allow
+          // handling of some corrupt messages, see bug 1898832.
+          rnpCannotDecrypt = true;
+          useDecodedData = false;
+          processSignature = false;
+          queryAllEncryptionRecipients = true;
+          result.statusFlags |= lazy.EnigmailConstants.DECRYPTION_FAILED;
+          break;
+        }
+      // else: fall through to default processing
       default:
         useDecodedData = false;
         processSignature = false;
         console.debug(
           "rnp_op_verify_execute returned unexpected: " + result.exitCode
         );
         break;
     }

