# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1705785651 -3600
# Parent  ae64e5f6a97829600249bae722bd978e1eeca20a
Feature: Tab title persist and restore, further tweaks.

diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -17,22 +17,16 @@ XPCOMUtils.defineLazyModuleGetters(this,
 });
 
 /**
  * Tabs for displaying mail folders and messages.
  */
 var mailTabType = {
   name: "mailTab",
   perTabPanel: "vbox",
-  get loadingTabString() {
-    delete this.loadingTabString;
-    return (this.loadingTabString = document
-      .getElementById("bundle_messenger")
-      .getString("loadingTab"));
-  },
   _cloneTemplate(template, tab, onDOMContentLoaded, onLoad) {
     let tabmail = document.getElementById("tabmail");
 
     let clone = document.getElementById(template).content.cloneNode(true);
     let browser = clone.querySelector("browser");
     browser.id = `${tab.mode.name}Browser${tab.mode._nextId}`;
     browser.addEventListener(
       "DOMTitleChanged",
@@ -70,17 +64,17 @@ var mailTabType = {
       event => {
         if (!tab.closed) {
           onLoad(event.target.ownerGlobal);
         }
       },
       { capture: true, once: true }
     );
 
-    tab.title = this.loadingTabString;
+    tab.title = "";
     tab.panel.id = `${tab.mode.name}${tab.mode._nextId}`;
     tab.panel.appendChild(clone);
     // `chromeBrowser` refers to the outermost browser in the tab, i.e. the
     // browser displaying about:3pane or about:message.
     tab.chromeBrowser = browser;
     tab.mode._nextId++;
   },
 
@@ -207,16 +201,18 @@ var mailTabType = {
         // Note that tabs are persisted in session.json.
         // For the first tab we just ignore the persisted value.
         if (persistedState.firstTab) {
           let startup = Services.prefs.getStringPref(
             "mail.tabs.firstTab.startupURI",
             ""
           );
           if (startup) {
+            // The persisted title can be wrong, so don't use it.
+            persistedState.title = "";
             let f = MailUtils.getExistingFolder(startup);
             if (f) {
               persistedState.folderURI = f.URI;
             }
           }
         }
         if (!persistedState.firstTab) {
           tabmail.openTab("mail3PaneTab", persistedState);
@@ -241,18 +237,20 @@ var mailTabType = {
                 );
               }
             } catch (ex) {
               console.error(ex);
             }
           }
 
           // Restore the last title immediately for firstTab.
-          tabmail.tabInfo[0].title = restoreState.state?.title ?? "";
-          tabmail.setTabTitle(tabmail.tabInfo[0]);
+          if (restoreState.state?.title) {
+            tabmail.tabInfo[0].title = restoreState.state.title;
+            tabmail.setTabTitle(tabmail.tabInfo[0]);
+          }
         }
 
         let { chromeBrowser, closed } = tabmail.tabInfo[0];
         if (
           chromeBrowser.contentDocument.readyState == "complete" &&
           chromeBrowser.currentURI.spec == "about:3pane"
         ) {
           chromeBrowser.contentWindow.restoreState(persistedState);
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -1302,21 +1302,25 @@ var { UIFontSize } = ChromeUtils.import(
         tabState = persistFunc.call(tab.mode.tabType, tab);
       } catch (ex) {
         // Report this so that our unit testing framework sees this
         // error and (extension) developers likewise can see when their
         // extensions are ill-behaved.
         console.error(ex);
       }
 
+      if (!tabState) {
+        return null;
+      }
       // Persist the last title for snappy startup restore.
-      if (!tabState) {
-        tabState = {};
+      // Don't persist for calendar, etc. to avoid persisting
+      // stale localizations.
+      if (!["calendar", "tasks", "chat"].includes(tab.mode.type)) {
+        tabState.title = tab.title;
       }
-      tabState.title = tab.title;
 
       let ext = {};
       for (let tabMonitor of this.tabMonitors) {
         try {
           if ("onTabPersist" in tabMonitor) {
             let monState = tabMonitor.onTabPersist(tab);
             if (monState !== null) {
               ext[tabMonitor.monitorName] = monState;
