# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1705526918 -3600
# Parent  10984b2e74876396ff6d9f5d834d10dedcc3a601
Feature: Bug 1831667: Re-establish total and unread/selected counts.
* * *
Feature: Bug 1831667: Re-establish total and unread/selected counts, take 2
* * *
Feature: Bug 1831667: Re-establish counts, also show row count if different.
* * *
Feature: Bug 1831667: Re-establish counts, also show row count if different, take 2.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -2500,16 +2500,17 @@ var folderPane = {
 
       // Update the row itself.
       row.updateUnreadMessageCount();
     });
 
     if (this._modes.unread.active && !folder.server.hidden) {
       this._modes.unread.changeUnreadCount(folder, newValue);
     }
+    threadPaneHeader.updateStatusBar();
   },
 
   /**
    * Called when a folder's total count changes, to update the UI.
    *
    * @param {nsIMsgFolder} folder
    * @param {integer} newValue
    */
@@ -2524,16 +2525,17 @@ var folderPane = {
           break;
         }
         collapsedAncestor = next;
       }
 
       // Update the row itself.
       row.updateTotalMessageCount();
     });
+    threadPaneHeader.updateStatusBar();
   },
 
   /**
    * Called when a server's `prettyName` changes, to update the UI.
    *
    * @param {nsIMsgFolder} folder
    * @param {string} name
    */
@@ -4212,16 +4214,23 @@ var threadPaneHeader = {
    * @type {?HTMLButtonElement}
    */
   displayButton: null,
   /**
    * If the header area is hidden.
    * @type {boolean}
    */
   isHidden: false,
+  /**
+   * Variables to keep track of the status bar counts.
+   */
+  msgBundle: null,
+  unreadElement: null,
+  totalElement: null,
+  countsElement: null,
 
   init() {
     this.isHidden =
       Services.xulStore.getValue(XULSTORE_URL, "threadPaneHeader", "hidden") ===
       "true";
     this.bar = document.getElementById("threadPaneHeaderBar");
     this.bar.hidden = this.isHidden;
 
@@ -4235,16 +4244,22 @@ var threadPaneHeader = {
     window.addEventListener("qfbtoggle", this);
     this.onQuickFilterToggle();
 
     this.displayButton = document.getElementById("threadPaneDisplayButton");
     this.displayContext = document.getElementById("threadPaneDisplayContext");
     this.displayButton.addEventListener("click", event => {
       this.displayContext.openPopup(event.target, { triggerEvent: event });
     });
+
+    this.msgBundle = top.document.getElementById("bundle_messenger");
+    this.unreadElement = top.document.getElementById("unreadMessageCount");
+    this.totalElement = top.document.getElementById("totalMessageCount");
+    this.countsElement = top.document.getElementById("messageCounts");
+    this.updateStatusBar();
   },
 
   uninit() {
     window.removeEventListener("qfbtoggle", this);
   },
 
   handleEvent(event) {
     switch (event.type) {
@@ -4358,16 +4373,17 @@ var threadPaneHeader = {
   },
 
   /**
    * Update the header data when the selected folder changes.
    */
   onFolderSelected() {
     // Bail out if the pane is hidden as we don't need to update anything.
     if (this.isHidden) {
+      this.updateStatusBar();
       return;
     }
 
     // Hide any potential stale data if we don't have a folder.
     if (!gFolder && !gDBView && !gViewWrapper?.isSynthetic) {
       this.folderName.hidden = true;
       this.folderCount.hidden = true;
       this.selectedCount.hidden = true;
@@ -4380,16 +4396,18 @@ var threadPaneHeader = {
     document.l10n.setAttributes(
       this.folderCount,
       "thread-pane-folder-message-count",
       { count: gFolder?.getTotalMessages(false) || gDBView?.rowCount || 0 }
     );
 
     this.folderName.hidden = false;
     this.folderCount.hidden = false;
+    // Spin the event loop to give view creation a breather.
+    setTimeout(() => this.updateStatusBar());
   },
 
   /**
    * Update the total message count in the header if the value changed for the
    * currently selected folder.
    *
    * @param {nsIMsgFolder} folder - The folder updating the count.
    * @param {integer} newValue
@@ -4399,16 +4417,55 @@ var threadPaneHeader = {
       return;
     }
 
     document.l10n.setAttributes(
       this.folderCount,
       "thread-pane-folder-message-count",
       { count: newValue }
     );
+    this.updateStatusBar();
+  },
+
+  updateStatusBar() {
+    if (!this.countsElement) {
+      return;
+    }
+    // Not updating if we're not viewing the current folder.
+    if (
+      !gFolder ||
+      top.window.document.getElementById("tabmail")?.currentAbout3Pane
+        ?.gFolder != gFolder
+    ) {
+      return;
+    }
+    // Note that `gDBView?.numMsgsInView` is usually the same as
+    // `gFolder?.getTotalMessages(false)` but for quick filter views
+    // the former is equal to the number of search hits.
+    let rowCount = gDBView?.rowCount;
+    let count = gFolder?.getTotalMessages(false) || rowCount;
+    if (count === undefined) {
+      // Too early to show, let's get out of here.
+      return;
+    }
+    let unread = gFolder?.getNumUnread(false) || 0;
+    let selected = gDBView?.numSelected || 0;
+
+    let numUnread =
+      selected > 1
+        ? this.msgBundle.getFormattedString("selectedMsgStatus", [selected])
+        : this.msgBundle.getFormattedString("unreadMsgStatus", [unread]);
+    // The view may have less rows than the folder if threads are ignored or collapsed.
+    if (rowCount && rowCount != count) {
+      count = `${rowCount} / ${count}`;
+    }
+    let numTotal = this.msgBundle.getFormattedString("totalMsgStatus", [count]);
+    this.unreadElement.setAttribute("value", numUnread);
+    this.totalElement.setAttribute("value", numTotal);
+    this.countsElement.hidden = false;
   },
 
   /**
    * Count the number of currently selected messages and update the selected
    * message count indicator.
    */
   updateSelectedCount() {
     // Bail out if the pane is hidden as we don't need to update anything.
@@ -4622,16 +4679,17 @@ var threadPane = {
         break;
       case "expanded":
       case "collapsed":
         if (event.detail == threadTree.selectedIndex) {
           // The selected index hasn't changed, but a collapsed row represents
           // multiple messages, so for our purposes the selection has changed.
           threadTree.dispatchEvent(new CustomEvent("select"));
         }
+        threadPaneHeader.updateStatusBar();
         break;
       case "scroll":
         if (this.isFirstScroll) {
           this.isFirstScroll = false;
           break;
         }
         this.scrollDetected = true;
         break;
@@ -4741,16 +4799,17 @@ var threadPane = {
    */
   _onSelect(event) {
     if (!paneLayout.messagePaneVisible.isCollapsed && gDBView) {
       // If someone selects while the results of a QFB search are aggregated,
       // we need to save the selection since at the end of the search it is restored.
       this.saveSelection();
 
       messagePane.clearWebPage();
+      threadPaneHeader.updateStatusBar();
       switch (gDBView.numSelected) {
         case 0:
           messagePane.clearMessage();
           messagePane.clearMessages();
           threadPaneHeader.selectedCount.hidden = true;
           break;
         case 1:
           if (
@@ -6815,16 +6874,17 @@ var sortController = {
         break;
       default:
         if (event.target.value in Ci.nsMsgViewSortType) {
           this.sortThreadPane(event.target.value);
           threadPane.restoreSortIndicator();
         }
         break;
     }
+    threadPaneHeader.updateStatusBar();
   },
   sortByThread() {
     threadPane.updateListRole(false);
     gViewWrapper.showThreaded = true;
     this.sortThreadPane("byDate");
   },
   sortThreadPane(sortName) {
     let sortType = Ci.nsMsgViewSortType[sortName];
@@ -7055,26 +7115,28 @@ commandController.registerCallback(
 
 commandController.registerCallback(
   "cmd_expandAllThreads",
   () => {
     threadPane.saveSelection();
     gViewWrapper.dbView.doCommand(Ci.nsMsgViewCommandType.expandAll);
     gViewWrapper._threadExpandAll = true;
     threadPane.restoreSelection();
+    threadPaneHeader.updateStatusBar();
   },
   () => !!gViewWrapper?.dbView
 );
 commandController.registerCallback(
   "cmd_collapseAllThreads",
   () => {
     threadPane.saveSelection();
     gViewWrapper.dbView.doCommand(Ci.nsMsgViewCommandType.collapseAll);
     gViewWrapper._threadExpandAll = false;
     threadPane.restoreSelection({ expand: false });
+    threadPaneHeader.updateStatusBar();
   },
   () => !!gViewWrapper?.dbView
 );
 
 function SwitchView(command) {
   // when switching thread views, we might be coming out of quick search
   // or a message view.
   // first set view picker to all
diff --git a/mail/base/content/mailCommon.js b/mail/base/content/mailCommon.js
--- a/mail/base/content/mailCommon.js
+++ b/mail/base/content/mailCommon.js
@@ -1038,16 +1038,17 @@ var dbViewWrapperListener = {
   onMessagesLoaded(all) {
     if (!window.threadPane) {
       return;
     }
 
     // There is no persisted thread last expanded state for synthetic views.
     if (all && !gViewWrapper.isSynthetic) {
       window.threadPane.restoreThreadState();
+      window.threadPaneHeader.updateStatusBar();
     }
 
     // Try to restore what was selected. Keep the saved selection (if there is
     // one) until we have all of the messages. This will also reveal selected
     // messages in collapsed threads.
     window.threadPane.restoreSelection({ discard: all });
 
     if (all || gViewWrapper.search.hasSearchTerms) {
diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -279,16 +279,19 @@ var mailTabType = {
             ) {
               chromeBrowser.contentWindow.restoreState(persistedState);
             }
           },
           { capture: true, once: true }
         );
       },
       showTab(tab) {
+        if (tab.chromeBrowser.currentURI.spec == "about:3pane") {
+          tab.chromeBrowser.contentWindow?.threadPaneHeader?.updateStatusBar();
+        }
         if (
           tab.chromeBrowser.currentURI.spec != "about:3pane" ||
           tab.chromeBrowser.contentDocument.readyState != "complete"
         ) {
           return;
         }
 
         // Update telemetry when switching to a 3-pane tab. The telemetry
diff --git a/mail/base/content/messenger.js b/mail/base/content/messenger.js
--- a/mail/base/content/messenger.js
+++ b/mail/base/content/messenger.js
@@ -172,16 +172,31 @@ function verifyOpenAccountHubTab() {
     Services.prefs.clearUserPref("mail.provider.suppress_dialog_on_startup");
     loadPostAccountWizard();
     return;
   }
 
   openAccountSetupTab();
 }
 
+/**
+ * For non-folder based tabs, message counts don't apply.
+ * Therefore hide the counts for those tabs.
+ */
+var statusMessageCountsMonitor = {
+  onTabTitleChanged() {},
+  onTabSwitched(aTab, aOldTab) {
+    if (aTab.mode.name == "mail3PaneTab" || aTab.mode.name == "glodaSearch") {
+      top.document.getElementById("messageCounts").hidden = false;
+    } else {
+      top.document.getElementById("messageCounts").hidden = true;
+    }
+  },
+};
+
 let _resolveDelayedStartup;
 var delayedStartupPromise = new Promise(resolve => {
   _resolveDelayedStartup = resolve;
 });
 
 var gMailInit = {
   onBeforeInitialXULLayout() {
     // Set a sane starting width/height for all resolutions on new profiles.
@@ -261,16 +276,17 @@ var gMailInit = {
     //  specialTabs.openSpecialTabsOnStartup below.
     let tabmail = document.getElementById("tabmail");
     if (tabmail) {
       // mailTabType is defined in mailTabs.js
       tabmail.registerTabType(mailTabType);
       // glodaFacetTab* in glodaFacetTab.js
       tabmail.registerTabType(glodaFacetTabType);
       tabmail.registerTabMonitor(GlodaSearchBoxTabMonitor);
+      tabmail.registerTabMonitor(statusMessageCountsMonitor);
       tabmail.openFirstTab();
     }
 
     // This also registers the contentTabType ("contentTab")
     specialTabs.openSpecialTabsOnStartup();
     tabmail.registerTabType(addressBookTabType);
     tabmail.registerTabType(preferencesTabType);
     // provisionerCheckoutTabType is defined in provisionerCheckout.js
diff --git a/mail/base/content/messenger.xhtml b/mail/base/content/messenger.xhtml
--- a/mail/base/content/messenger.xhtml
+++ b/mail/base/content/messenger.xhtml
@@ -655,16 +655,20 @@
     <hbox role="status" aria-live="off" flex="1">
 #include mainStatusbar.inc.xhtml
       <hbox id="calendar-invitations-panel" class="statusbarpanel" hidden="true">
         <label id="calendar-invitations-label"
                class="text-link"
                onclick="openInvitationsDialog()"
                onkeypress="if (event.key == 'Enter') { openInvitationsDialog(); }"/>
       </hbox>
+      <hbox id="messageCounts">
+        <label id="unreadMessageCount" class="statusbarpanel"/>
+        <label id="totalMessageCount" class="statusbarpanel"/>
+      </hbox>
     </hbox>
 #include ../../../calendar/base/content/calendar-status-bar.inc.xhtml
   </hbox>
 </vbox><!-- Closing #messengerBody. -->
 
 #include tabDialogs.inc.xhtml
 #include ../../components/accountcreation/templates/accountHubTemplate.inc.xhtml
 </html:body>
diff --git a/mail/locales/en-US/chrome/messenger/messenger.properties b/mail/locales/en-US/chrome/messenger/messenger.properties
--- a/mail/locales/en-US/chrome/messenger/messenger.properties
+++ b/mail/locales/en-US/chrome/messenger/messenger.properties
@@ -149,16 +149,20 @@ getMsgButtonTooltip.listSeparator=,\u002
 documentDone=
 documentLoading=Loading Message…
 
 # LOCALIZATION NOTE (autosyncProgress): Do not translate the word "%1$S" or "%2$S" below.
 # Place the word %1$S in your translation where the name of the comma separated folders should appear.
 # Place the word %2$S in your translation where the name of the comma separated accounts should appear.
 autosyncProgress=Synchronizing messages in %1$S from %2$S…
 
+unreadMsgStatus=Unread: %S
+selectedMsgStatus=Selected: %S
+totalMsgStatus=Total: %S
+
 # localized folder names
 
 localFolders=Local Folders
 
 # LOCALIZATION NOTE (inboxFolderName): OK to translate all foldernames, bugzilla #57440 & bugzilla #23625 fixed
 inboxFolderName=Inbox
 trashFolderName=Trash
 sentFolderName=Sent
