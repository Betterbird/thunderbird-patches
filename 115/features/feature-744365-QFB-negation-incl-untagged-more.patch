# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1711137285 -3600
# Parent  2e3067791459f1bc054d4b04cde6e50c45886476
Implement negation for QuickFilterBar filter and text filter buttons - Part 2:

Make the term that yields untagged messages the first tag-related term instead of the last. Add debugging output.
* * *
Authored by Alta88: Fix UX and prevent unnecessary searches in tags negation mode.
* * *
Implement negation for QuickFilterBar filter and text filter buttons, prevent clicks while previous click hasn't been processed.

diff --git a/mail/modules/QuickFilterManager.jsm b/mail/modules/QuickFilterManager.jsm
--- a/mail/modules/QuickFilterManager.jsm
+++ b/mail/modules/QuickFilterManager.jsm
@@ -540,10 +540,43 @@ var QuickFilterManager = {
       } catch (ex) {
         console.error(ex);
       }
     }
+    this.dumpTerms(searchTerms);
     return searchTerms.length ? [searchTerms, listeners] : [null, listeners];
   },
+
+  dumpTerms(aTerms) {
+    let condition = "";
+    for (let term of aTerms) {
+      if (condition) {
+        condition += " ";
+      }
+      if (term.matchAll) {
+        condition = "ALL";
+        break;
+      }
+      condition += term.booleanAnd ? "AND " : "OR ";
+      if (term.beginsGrouping == 0) {
+        condition += "(";
+      } else {
+        for (let i = 0; i < term.beginsGrouping; i++) {
+          condition += "[";
+        }
+      }
+      condition += term.termAsString;
+      if (term.endsGrouping == 0) {
+        condition += ")";
+      } else {
+        for (let i = 0; i < term.endsGrouping; i++) {
+          condition += "]";
+        }
+      }
+    }
+    if (condition) {
+      console.info("Condition:", condition);
+    }
+  },
 };
 
 /**
  * Meta-filter, just handles whether or not things are sticky.
@@ -664,12 +697,8 @@ var TagFacetingFilter = {
     // it's the simple case if the value is just a boolean
     if (typeof aFilterValue != "object") {
       return true;
     }
-    // Not a simple case.
-    if (aFilterValue.inverted) {
-      return false;
-    }
     // but also if the object contains no non-null values
     let simpleCase = true;
     for (let key in aFilterValue.tags) {
       let value = aFilterValue.tags[key];
@@ -694,10 +723,12 @@ var TagFacetingFilter = {
     }
 
     let term, value;
 
+    let isSimple = this.isSimple(aFilterValue);
+
     // Just the true/false case - in both we want all the tags.
-    if (this.isSimple(aFilterValue)) {
+    if (isSimple && !aFilterValue.inverted) {
       term = aTermCreator.createTerm();
       term.attrib = Ci.nsMsgSearchAttrib.Keywords;
       value = term.value;
       value.str = "";
@@ -719,8 +750,39 @@ var TagFacetingFilter = {
       term = null;
 
       let excludeTerms = [];
 
+      // This is what we do, for example:
+      // [OR/Any] has(tag1) hasNo(tag2) has(tag3) hasNo(tag4)
+      // becomes:
+      // AND[Contains,tag1), OR(Contains,tag3],
+      // AND[DoesntContain,tag2), AND(DoesntContain,tag4]
+      // where [] denote groups.
+      // To do so, we collect the "hasNo" tags in `excludeTerms` and append
+      // them at the end. If there is no "has", we need to prepend an empty term.
+      //
+      // Things get tricky when we want to show untagged messages.
+      if (aFilterValue.inverted) {
+        // In case there are no "has" and "hasNo" selections, we can just add
+        // AND(IsEmpty,) to the list of existing terms.
+        // Otherwise, we add AND[IsEmpty,) to begin a group, we make sure
+        // that the next group goes in with OR and that the overall group is
+        // closed at the end.
+        term = aTermCreator.createTerm();
+        term.beginsGrouping = isSimple ? 0 : 1;
+        term.attrib = Ci.nsMsgSearchAttrib.Keywords;
+        value = term.value;
+        value.str = "";
+        term.value = value;
+        term.op = Ci.nsMsgSearchOp.IsEmpty;
+        term.booleanAnd = true;
+        term.endsGrouping = 0;
+        aTerms.push(term);
+        if (isSimple) {
+          return null;
+        }
+      }
+
       let mode = aFilterValue.mode;
       for (let key in aFilterValue.tags) {
         let shouldFilter = aFilterValue.tags[key];
         if (shouldFilter !== null) {
@@ -731,11 +793,15 @@ var TagFacetingFilter = {
           value.str = key;
           term.value = value;
           if (shouldFilter) {
             term.op = Ci.nsMsgSearchOp.Contains;
-            // AND for the group. Inside the group we also want AND if the
-            // mode is set to "All of".
-            term.booleanAnd = firstIncludeClause || mode === "AND";
+            // AND for the group unless we prepended "untagged".
+            // Inside the group we also want AND if the mode is set to "All of".
+            if (firstIncludeClause) {
+              term.booleanAnd = !aFilterValue.inverted;
+            } else {
+              term.booleanAnd = mode === "AND";
+            }
             term.beginsGrouping = firstIncludeClause ? 1 : 0;
             aTerms.push(term);
             firstIncludeClause = false;
             lastIncludeTerm = term;
@@ -765,9 +831,17 @@ var TagFacetingFilter = {
           value = term.value;
           value.str = "";
           term.value = value;
           term.op = Ci.nsMsgSearchOp.IsntEmpty;
-          term.booleanAnd = true;
+          term.booleanAnd = !aFilterValue.inverted;
+          if (aFilterValue.inverted) {
+            // Move the `beginsGrouping` from the first exclude term to here so we get:
+            // AND [tag,is empty,) OR [tag,isn't empty,)
+            //                        AND (tag,doesn't contain,$label1)
+            //                        AND (tag,doesn't contain,$label2]]
+            term.beginsGrouping = 1;
+            excludeTerms[0].beginsGrouping = 0;
+          }
           aTerms.push(term);
         }
 
         // (extend in the exclusions)
@@ -775,21 +849,11 @@ var TagFacetingFilter = {
         aTerms.push.apply(aTerms, excludeTerms);
       }
 
       if (aFilterValue.inverted) {
-        // Show untagged, in addition to any tag button checked state combination.
-        term = aTermCreator.createTerm();
-        term.beginsGrouping = !firstIncludeClause || !firstExcludeClause ? 1 : 0;
-        term.attrib = Ci.nsMsgSearchAttrib.Keywords;
-        value = term.value;
-        value.str = "";
-        term.value = value;
-        term.op = Ci.nsMsgSearchOp.IsEmpty;
-        // OR with any other tag terms in that group, but AND to combine with
-        // other filters.
-        term.booleanAnd = !(!firstIncludeClause || !firstExcludeClause);
-        term.endsGrouping = !firstIncludeClause || !firstExcludeClause ? 1 : 0;
-        aTerms.push(term);
+        // Whatever term that got pushed last needs to close the additional
+        // group we opened.
+        aTerms[aTerms.length - 1].endsGrouping++;
       }
     }
     return null;
   },
@@ -902,12 +966,8 @@ var TagFacetingFilter = {
         aFilterValue === false || aFilterValue?.inverted === true;
     }
     if (aFilterValue != null && typeof aFilterValue == "object") {
       this._populateTagBar(aFilterValue, aDocument, aMuxer);
-      const hasSelectedTag = Object.entries(aFilterValue.tags).some(
-        tag => tag[1] !== null
-      );
-      aDocument.getElementById("qfb-boolean-mode").disabled = !hasSelectedTag;
     }
 
     aDocument
       .getElementById("threadTree")
@@ -935,21 +995,60 @@ var TagFacetingFilter = {
     } else {
       aState.mode = qbm.value;
     }
 
+    function countTags() {
+      // When the tag filter is inverted, we only allow either selection or
+      // inversion of tag buttons.
+      // If we allowed both, the backend can't correctly process the resulting
+      // expression.
+      let tagsSelected = 0;
+      let tagsInverted = 0;
+      for (const tagKey in keywordMap) {
+        const value = keywordMap[tagKey];
+        if (value === true) {
+          tagsSelected++;
+        } else if (value === false) {
+          tagsInverted++;
+        }
+      }
+      qbm.disabled = !tagsSelected && !tagsInverted;
+      return { tagsSelected, tagsInverted };
+    }
+
     function clickHandler(aEvent) {
+      let { tagsInverted } = countTags();
       let tagKey = this.getAttribute("value");
-      let state = aMuxer.getFilterValueForMutation(TagFacetingFilter.name);
-      state.tags[tagKey] = this.pressed ? true : null;
+      if (keywordMap[tagKey] === null && aState.inverted && tagsInverted) {
+        // We use a delay to clear the button to give feedback that an action
+        // was indeed performed.
+        aDocument.ownerGlobal.setTimeout(() => {
+          this.pressed = false;
+        }, 200);
+        return;
+      }
+      keywordMap[tagKey] = this.pressed ? true : null;
       aMuxer.updateSearch();
     }
 
     function rightClickHandler(aEvent) {
+      let { tagsSelected } = countTags();
       if (aEvent.button == 2) {
         // A |toggle-button| sets up pressed and inverted in the constructor.
         let tagKey = this.getAttribute("value");
-        let state = aMuxer.getFilterValueForMutation(TagFacetingFilter.name);
-        state.tags[tagKey] = !this.pressed ? null : !this.inverted;
+        const tagKeyState = keywordMap[tagKey];
+        if (
+          ((tagKeyState === null && tagsSelected) ||
+            (tagKeyState === true && tagsSelected > 1)) &&
+          aState.inverted
+        ) {
+          aDocument.ownerGlobal.setTimeout(() => {
+            this.pressed = tagKeyState === true;
+            this.inverted = false;
+          }, 200);
+          return;
+        }
+        keywordMap[tagKey] = !this.pressed ? null : !this.inverted;
         aMuxer.updateSearch();
         aEvent.preventDefault();
       }
     }
diff --git a/mailnews/search/public/nsIMsgSearchTerm.idl b/mailnews/search/public/nsIMsgSearchTerm.idl
--- a/mailnews/search/public/nsIMsgSearchTerm.idl
+++ b/mailnews/search/public/nsIMsgSearchTerm.idl
@@ -132,10 +132,10 @@ interface nsIMsgSearchTerm : nsISupports
     boolean matchFolderFlag(in nsIMsgDBHdr msg);
 
     readonly attribute boolean matchAllBeforeDeciding;
 
-    readonly attribute ACString termAsString;
-    boolean matchKeyword(in ACString keyword); // used for tag searches
+    readonly attribute AUTF8String termAsString;
+    boolean matchKeyword(in ACString AUTF8String); // used for tag searches
     attribute boolean matchAll;
     /**
      * Does the message match the custom search term?
      *
