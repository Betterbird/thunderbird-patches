# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1691840469 -7200
# Parent  830291443772cf1f74ac31f054109b3353bb941a
Bug 1739609 - Fix the subject in "Repair Text Encoding". Persist charset for subsequent display.

diff --git a/mail/base/content/aboutMessage.js b/mail/base/content/aboutMessage.js
--- a/mail/base/content/aboutMessage.js
+++ b/mail/base/content/aboutMessage.js
@@ -20,16 +20,17 @@
 var { MailServices } = ChromeUtils.import(
   "resource:///modules/MailServices.jsm"
 );
 var { XPCOMUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/XPCOMUtils.sys.mjs"
 );
 
 XPCOMUtils.defineLazyModuleGetters(this, {
+  jsmime: "resource:///modules/jsmime.jsm",
   UIDensity: "resource:///modules/UIDensity.jsm",
   UIFontSize: "resource:///modules/UIFontSize.jsm",
   NetUtil: "resource://gre/modules/NetUtil.jsm",
 });
 
 const messengerBundle = Services.strings.createBundle(
   "chrome://messenger/locale/messenger.properties"
 );
@@ -59,27 +60,96 @@ function messagePaneOnResize() {
 
 function ReloadMessage() {
   if (!gMessageURI) {
     return;
   }
   displayMessage(gMessageURI, gViewWrapper);
 }
 
-function MailSetCharacterSet() {
+async function MailSetCharacterSet() {
+  // `currentCharacterSet` comes from from msgHdrView.js.
+  currentCharacterSet = null;
+
   let messageService = MailServices.messageServiceFromURI(gMessageURI);
   gMessage = messageService.messageURIToMsgHdr(gMessageURI);
   messageService.loadMessage(
     gMessageURI,
     getMessagePaneBrowser().docShell,
     null,
     null,
     true
   );
   autodetectCharset = true;
+
+  // There is a listener in msgHdrView.js which sets `currentCharacterSet`
+  // but we can't get to it from here.
+  let count = 0;
+  while (count++ < 20 && !currentCharacterSet) {
+    await new Promise(resolve => setTimeout(resolve, 100));
+  }
+  if (!currentCharacterSet) {
+    console.info("No detected character set");
+    return;
+  }
+
+  // Keep the charset for the next time we display the message.
+  gMessage.setStringProperty("overrideCharset", currentCharacterSet);
+
+  // Fix the subject.
+  console.info(`Detected character set "${currentCharacterSet}"`);
+  let subjectBox = document.getElementById("expandedsubjectBox");
+  // The selected message still has the raw header, so get it and decode it.
+  let buffer = new Uint8Array(
+    Array.from(gMessage.rawSubject, c => c.charCodeAt(0))
+  );
+  let subject;
+  let subjectChanged = false;
+  try {
+    // Check whether this is already UTF-8.
+    subject = new TextDecoder("UTF-8", { fatal: true }).decode(buffer);
+  } catch (ex) {
+    try {
+      subject = new TextDecoder(currentCharacterSet, {
+        fatal: true,
+      }).decode(buffer);
+      subjectChanged = true;
+    } catch (ex) {
+      console.error(
+        `Failed to decode subject with charset ${currentCharacterSet}`
+      );
+      return;
+    }
+  }
+  if (subjectChanged) {
+    gMessage.subject = subject;
+
+    // Update the subject in the header pane, thread pane,
+    // tab or window title for messages opened in a tab or stand-alone window.
+    let subjectDisplay = jsmime.headerparser.decodeRFC2047Words(
+      subject,
+      "utf-8"
+    );
+    subjectBox.headerValue = subjectDisplay;
+
+    let threadTree = window.parent?.threadTree;
+    let index = gDBView?.selection?.currentIndex;
+    if (index >= 0 && threadTree) {
+      threadTree.invalidateRow(index);
+    }
+
+    let tab = top.document.getElementById("tabmail")?.currentTabInfo;
+    if (tab) {
+      if (!tab.first) {
+        tab.tabNode.label = subjectDisplay;
+      }
+    } else {
+      document.title = subjectDisplay;
+    }
+  }
 }
 
 window.addEventListener("DOMContentLoaded", event => {
   if (event.target != document) {
     return;
   }
 
   UIDensity.registerWindow(window);
diff --git a/mailnews/base/public/nsIMsgHdr.idl b/mailnews/base/public/nsIMsgHdr.idl
--- a/mailnews/base/public/nsIMsgHdr.idl
+++ b/mailnews/base/public/nsIMsgHdr.idl
@@ -71,16 +71,17 @@ interface nsIMsgDBHdr : nsISupports
     /* common headers */
     attribute PRTime date;
     readonly attribute unsigned long dateInSeconds;
     attribute string messageId;
     attribute string ccList;
     attribute string bccList;
     attribute string author;
     attribute AUTF8String subject;
+    readonly attribute string rawSubject;
     attribute string recipients;
 
     /* anything below here still has to be fixed */
     void setReferences(in AUTF8String references);
     readonly attribute unsigned short numReferences;
     AUTF8String getStringReference(in long refNum);
 
     readonly attribute AString mime2DecodedAuthor;
diff --git a/mailnews/db/msgdb/src/nsMsgHdr.cpp b/mailnews/db/msgdb/src/nsMsgHdr.cpp
--- a/mailnews/db/msgdb/src/nsMsgHdr.cpp
+++ b/mailnews/db/msgdb/src/nsMsgHdr.cpp
@@ -448,16 +448,21 @@ NS_IMETHODIMP nsMsgHdr::GetAuthor(char**
                                        resultAuthor);
 }
 
 NS_IMETHODIMP nsMsgHdr::GetSubject(nsACString& resultSubject) {
   return m_mdb->RowCellColumnToCharPtr(GetMDBRow(), m_mdb->m_subjectColumnToken,
                                        getter_Copies(resultSubject));
 }
 
+NS_IMETHODIMP nsMsgHdr::GetRawSubject(char** resultSubject) {
+  return m_mdb->RowCellColumnToCharPtr(GetMDBRow(), m_mdb->m_subjectColumnToken,
+                                       resultSubject);
+}
+
 NS_IMETHODIMP nsMsgHdr::GetRecipients(char** resultRecipients) {
   return m_mdb->RowCellColumnToCharPtr(
       GetMDBRow(), m_mdb->m_recipientsColumnToken, resultRecipients);
 }
 
 NS_IMETHODIMP nsMsgHdr::GetCcList(char** resultCCList) {
   return m_mdb->RowCellColumnToCharPtr(GetMDBRow(), m_mdb->m_ccListColumnToken,
                                        resultCCList);
diff --git a/mailnews/local/src/nsMsgFileHdr.cpp b/mailnews/local/src/nsMsgFileHdr.cpp
--- a/mailnews/local/src/nsMsgFileHdr.cpp
+++ b/mailnews/local/src/nsMsgFileHdr.cpp
@@ -278,16 +278,24 @@ NS_IMETHODIMP nsMsgFileHdr::SetAuthor(co
 NS_IMETHODIMP nsMsgFileHdr::GetSubject(nsACString& aSubject) {
   nsresult rv = ReadFile();
   NS_ENSURE_SUCCESS(rv, rv);
 
   aSubject = mSubject;
   return NS_OK;
 }
 
+NS_IMETHODIMP nsMsgFileHdr::GetRawSubject(char** aSubject) {
+  nsresult rv = ReadFile();
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  *aSubject = ToNewCString(mSubject);
+  return NS_OK;
+}
+
 NS_IMETHODIMP nsMsgFileHdr::SetSubject(const nsACString& aSubject) {
   mSubject = aSubject;
   bool strippedRE = NS_MsgStripRE(mSubject, mSubject);
   nsCOMPtr<nsIMimeConverter> mimeConverter =
       do_GetService("@mozilla.org/messenger/mimeconverter;1");
   mimeConverter->DecodeMimeHeader(mSubject.get(), "UTF-8", false, true,
                                   mDecodedSubject);
   if (strippedRE) {
diff --git a/mailnews/mime/src/nsStreamConverter.cpp b/mailnews/mime/src/nsStreamConverter.cpp
--- a/mailnews/mime/src/nsStreamConverter.cpp
+++ b/mailnews/mime/src/nsStreamConverter.cpp
@@ -120,17 +120,36 @@ nsresult bridge_new_new_uri(void* bridge
               nsCString charset;
               rv = nntpURL->GetCharset(charset);
               if (NS_SUCCEEDED(rv)) {
                 *default_charset = ToNewCString(charset);
               } else {
                 *default_charset = strdup("UTF-8");
               }
             } else {
-              *default_charset = strdup("UTF-8");
+              // Let's see whether the user repaired this before.
+              nsCOMPtr<nsIMsgMessageUrl> msgUrl(do_QueryInterface(aURI));
+              *default_charset = nullptr;
+              if (msgUrl) {
+                nsCOMPtr<nsIMsgDBHdr> hdr;
+                msgUrl->GetMessageHeader(getter_AddRefs(hdr));
+                if (hdr) {
+                  nsCString charset;
+                  rv = hdr->GetStringProperty("overrideCharset", charset);
+                  if (NS_SUCCEEDED(rv) && !charset.IsEmpty()) {
+                    *default_charset = ToNewCString(charset);
+                  }
+                }
+              }
+              if (*default_charset && **default_charset) {
+                // Pretend that we're repeating the override from last time.
+                *override_charset = true;
+              } else {
+                *default_charset = strdup("UTF-8");
+              }
             }
           }
         }
         nsAutoCString urlString;
         if (NS_SUCCEEDED(aURI->GetSpec(urlString))) {
           if (!urlString.IsEmpty()) {
             free(*url_name);
             *url_name = ToNewCString(urlString);
