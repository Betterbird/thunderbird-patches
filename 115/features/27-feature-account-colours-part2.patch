# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1702722188 -3600
# Parent  5d2d043c6c29129f33270cfb80a0065230c0f1c7
Feature: Account colours, part 2: Message list.
* * *
Introduce pref mail.threadpane.full_row_color to allow full row color.

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -361,16 +361,18 @@ pref("mail.warn_on_shift_delete", true);
 // at least this percentage of the thread pane visible above / below the
 // selected message.
 pref("mail.threadpane.padding.top_percent", 10);
 pref("mail.threadpane.padding.bottom_percent", 10);
 
 // Use correspondents column instead of from/recipient columns.
 pref("mail.threadpane.use_correspondents", true);
 
+pref("mail.threadpane.full_row_color", false);
+
 // To allow images to be inserted into a composition with an auth prompt, we
 // need the following two.
 pref("network.auth.subresource-img-cross-origin-http-auth-allow", true);
 pref("network.auth.non-web-content-triggered-resources-http-auth-allow", true);
 
 // 0=as attachment 2=default forward as inline with attachments
 pref("mail.forward_message_mode", 2);
 
diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -773,16 +773,18 @@ var folderPane = {
   _initialized: false,
 
   /**
    * If the local folders should be hidden.
    * @type {boolean}
    */
   _hideLocalFolders: false,
 
+  _serverColorMap: null,
+
   _modes: {
     all: {
       name: "all",
       active: false,
       canBeCompact: false,
 
       initServer(server) {
         let serverRow = folderPane._createServerRow(this.name, server);
@@ -2619,16 +2621,22 @@ var folderPane = {
           }
         }
       } else if (row.id.startsWith("recent-")) {
         row.style.backgroundColor = color;
       } else if (f.isServer) {
         row.style.backgroundColor = color;
       }
     }
+
+    // Take care of cached values.
+    if (this._serverColorMap) {
+      this._serverColorMap.delete(folder.server.key);
+    }
+    threadTree.invalidate();
   },
 
   /**
    * Update the UI widget to reflect the real folder size when the "FolderSize"
    * property changes.
    *
    * @param {nsIMsgFolder} folder
    */
@@ -4648,22 +4656,28 @@ var threadPane = {
    * @type {boolean}
    */
   isFirstScroll: true,
 
   columns: getDefaultColumns(gFolder),
 
   cardColumns: getDefaultColumnsForCardsView(gFolder),
 
+  fullRowColor: Services.prefs.getBoolPref(
+    "mail.threadpane.full_row_color",
+    false
+  ),
+
   async init() {
     quickFilterBar.init();
 
     this.setUpTagStyles();
     Services.prefs.addObserver("mailnews.tags.", this);
     Services.prefs.addObserver("mail.pane_config.multiline_all", this);
+    Services.prefs.addObserver("mail.threadpane.full_row_color", this);
 
     Services.obs.addObserver(this, "addrbook-displayname-changed");
 
     // Ensure TreeView and its classes are properly defined.
     await customElements.whenDefined("tree-view-table-row");
 
     threadTree = document.getElementById("threadTree");
     this.treeTable = threadTree.table;
@@ -4834,16 +4848,22 @@ var threadPane = {
       if (data == "mail.pane_config.multiline_all") {
         let multiline = Services.prefs.getBoolPref(
           "mail.pane_config.multiline_all",
           false
         );
         customElements.get("thread-row").MULTILINE = multiline;
         this.densityChange();
         threadTree.reset();
+      } else if (data == "mail.threadpane.full_row_color") {
+        this.fullRowColor = Services.prefs.getBoolPref(
+          "mail.threadpane.full_row_color",
+          false
+        );
+        threadTree.reset();
       } else {
         this.setUpTagStyles();
       }
     } else if (topic == "addrbook-displayname-changed") {
       // This runs the when mail.displayname.version preference observer is
       // notified/the mail.displayname.version number has been updated.
       threadTree.invalidate();
     }
@@ -6538,16 +6558,48 @@ var folderListener = {
       // the folder but we are not notified about the descendants.
       for (let f of folder.descendants) {
         folderPane.addFolder(f.parent, f);
       }
     }
   },
 };
 
+function getRGBAcolorForServerKey(key) {
+  // Create the map if we don't have one.
+  if (!folderPane._serverColorMap) {
+    folderPane._serverColorMap = new Map();
+  }
+
+  // Return the rgba if we have it in the map.
+  let rgba = folderPane._serverColorMap.get(key);
+  if (rgba !== undefined) {
+    return rgba;
+  }
+
+  // Determine the rgba and put it into the map.
+  let color = Services.prefs.getCharPref(`mail.server.${key}.color`, "");
+  if (
+    !color ||
+    color == "#000000" ||
+    !color.startsWith("#") ||
+    color.length != 7
+  ) {
+    rgba = "";
+  } else {
+    // Turn #RRGGBB into rgba(rr, gg, bb, tt)
+    let r = parseInt(color.substring(1, 3), 16);
+    let g = parseInt(color.substring(3, 5), 16);
+    let b = parseInt(color.substring(5, 7), 16);
+    rgba = `rgba(${r}, ${g}, ${b}, 0.2)`;
+  }
+  folderPane._serverColorMap.set(key, rgba);
+  return rgba;
+}
+
 /**
  * Custom element for rows in the thread tree.
  */
 customElements.whenDefined("tree-view-table-row").then(() => {
   class ThreadRow extends customElements.get("tree-view-table-row") {
     static ROW_HEIGHT = 0; // Will be set via density.
     static MULTILINE = false;
 
@@ -6587,39 +6639,65 @@ customElements.whenDefined("tree-view-ta
         }
         textColumns.push(column.id);
       }
 
       // XPCOM calls here must be keep to a minimum. Collect all of the
       // required data in one go.
       let threadedDisplay =
         gViewWrapper._viewFlags & Ci.nsMsgViewFlagsType.kThreadedDisplay;
+      let getServerInfo = !gViewWrapper.isSingleFolder;
       let properties = {};
       let threadLevel = {};
       let numChildren = {};
       let hasNextSibling = {};
+      let serverKey = {};
       let cellTexts = this.view.cellDataForColumns(
         index,
         textColumns,
         properties,
         threadLevel,
         threadedDisplay, // no need to get the following two for a non-threaded display
         numChildren,
-        hasNextSibling
+        hasNextSibling,
+        getServerInfo,
+        serverKey
       );
+      const propertiesSet = new Set(properties.value.split(" "));
+      const isDummyRow = propertiesSet.has("dummy");
+
+      let elementToColor;
+      if (threadPane.fullRowColor) {
+        elementToColor = this;
+      } else {
+        // In multi-line mode, don't allow to color the displaced subject column.
+        let selector = ThreadRow.MULTILINE
+          ? "td:not([hidden]):not(.subjectcol-column)"
+          : "td:not([hidden])";
+        elementToColor = this.querySelector(selector);
+      }
+      if (elementToColor) {
+        if (getServerInfo && !isDummyRow) {
+          let color = getRGBAcolorForServerKey(serverKey.value);
+          if (color) {
+            elementToColor.style.backgroundColor = color;
+          } else {
+            elementToColor.style.backgroundColor = "";
+          }
+        } else {
+          elementToColor.style.backgroundColor = "";
+        }
+      }
       this.classList.toggle("singleton", numChildren.value <= 1);
       this.classList.toggle("lastchild", !hasNextSibling.value);
 
       // Collect the various strings and fluent IDs to build the full string for
       // the message row aria-label.
       let ariaLabelPromises = [];
 
-      const propertiesSet = new Set(properties.value.split(" "));
-      const isDummyRow = propertiesSet.has("dummy");
-
       this.dataset.properties = properties.value.trim();
 
       let seenSubjectColumn = false;
       for (let column of threadPane.columns) {
         // Skip this column if it's hidden or it's the "select" column, since
         // the selection state is communicated via the aria-activedescendant.
         if (column.hidden || column.select) {
           continue;
@@ -6846,39 +6924,69 @@ customElements.whenDefined("tree-view-ta
       return super.index;
     }
 
     set index(index) {
       super.index = index;
 
       // XPCOM calls here must be keep to a minimum. Collect all of the
       // required data in one go.
+      let getServerInfo = !gViewWrapper.isSingleFolder;
       let properties = {};
       let threadLevel = {};
       let numChildren = {};
       let hasNextSibling = {};
+      let serverKey = {};
 
       let cellTexts = this.view.cellDataForColumns(
         index,
         threadPane.cardColumns,
         properties,
         threadLevel,
         false,
         numChildren,
-        hasNextSibling
+        hasNextSibling,
+        getServerInfo,
+        serverKey
       );
+      if (threadLevel.value) {
+        properties.value += " thread-children";
+      }
+      const propertiesSet = new Set(properties.value.split(" "));
+      const isDummyRow = propertiesSet.has("dummy");
+
+      if (threadPane.fullRowColor) {
+        if (getServerInfo && !isDummyRow) {
+          let color = getRGBAcolorForServerKey(serverKey.value);
+          if (color) {
+            this.style.backgroundColor = color;
+          } else {
+            this.style.backgroundColor = "";
+          }
+        } else {
+          this.style.backgroundColor = "";
+        }
+      } else {
+        // eslint-disable-next-line no-lonely-if
+        if (getServerInfo && !isDummyRow) {
+          let color = getRGBAcolorForServerKey(serverKey.value);
+          if (color) {
+            this.firstElementChild.style.borderLeft = `5px solid ${color}`;
+          } else {
+            this.firstElementChild.style.borderLeft = "";
+          }
+        } else {
+          this.firstElementChild.style.borderLeft = "";
+        }
+      }
 
       // Collect the various strings and fluent IDs to build the full string for
       // the message row aria-label.
       let ariaLabelPromises = [];
 
-      if (threadLevel.value) {
-        properties.value += " thread-children";
-      }
-      const propertiesSet = new Set(properties.value.split(" "));
       this.dataset.properties = properties.value.trim();
 
       this.subjectLine.textContent = cellTexts[0];
       this.subjectLine.title = cellTexts[0];
       this.senderLine.textContent = cellTexts[1];
       this.dateLine.textContent = cellTexts[2];
       this.tagIcon.title = cellTexts[3];
 
diff --git a/mailnews/base/public/nsIMsgDBView.idl b/mailnews/base/public/nsIMsgDBView.idl
--- a/mailnews/base/public/nsIMsgDBView.idl
+++ b/mailnews/base/public/nsIMsgDBView.idl
@@ -492,26 +492,30 @@ interface nsIMsgDBView : nsISupports
    *
    * @param aRow - Index of the row we want data for.
    * @param aColumnNames - The column names we want cell text for.
    * @param aProperties - The properties of the row.
    * @param aThreadLevel - The thread level of the row.
    * @param aGetChildrenInfo - if false, return dummy values for aNumChildren and aHasNextSibling.
    * @param aNumChildren - The number of children of the row.
    * @param aHasNextSibling - Whether the row has a next sibling.
+   * @param aGetServerInfo - if false, return dummy value for aServerKey.
+   * @param aServerKey - Key of the server belonging to the folder.
    *
    * @returns The cell text for the columns in `aColumnNames`.
    */
   Array<AString> cellDataForColumns(in long aRow,
                                     in Array<AString> aColumnNames,
                                     out AString aProperties,
                                     out long aThreadLevel,
                                     in boolean getChildrenInfo,
                                     out unsigned long aNumChildren,
-                                    out boolean aHasNextSibling);
+                                    out boolean aHasNextSibling,
+                                    in boolean aGetServerInfo,
+                                    out ACString aServerKey);
 };
 
 /* this interface is rapidly morphing from a command updater interface into a more generic
    FE updater interface to handle changes in the view
 */
 
 [scriptable, uuid(ce8f52ee-e742-4b31-8bdd-2b3a8168a117)]
 interface nsIMsgDBViewCommandUpdater : nsISupports
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -2004,17 +2004,18 @@ nsMsgDBView::CellTextForColumn(int32_t a
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::CellDataForColumns(int32_t aRow,
                                 const nsTArray<nsString>& aColumnNames,
                                 nsAString& aProperties, int32_t* aThreadLevel,
                                 bool aGetChildrenInfo, uint32_t* aNumChildren,
-                                bool* aHasNextSibling,
+                                bool* aHasNextSibling, bool aGetServerInfo,
+                                nsACString& aServerKey,
                                 nsTArray<nsString>& _retval) {
   nsresult rv;
   _retval.Clear();
 
   uint32_t count = aColumnNames.Length();
   _retval.SetCapacity(count);
   for (nsString column : aColumnNames) {
     nsString text;
@@ -2044,19 +2045,33 @@ nsMsgDBView::CellDataForColumns(int32_t 
     _retval.Clear();
     return rv;
   }
 
   rv = GetLevel(aRow, aThreadLevel);
   if (NS_FAILED(rv)) {
     _retval.Clear();
     aProperties.Truncate();
-  }
-
-  return rv;
+    return rv;
+  }
+
+  aServerKey.Truncate();
+  if (!aGetServerInfo) return NS_OK;
+
+  nsCOMPtr<nsIMsgDBHdr> msgHdr;
+  rv = GetMsgHdrForViewIndex(aRow, getter_AddRefs(msgHdr));
+  NS_ENSURE_SUCCESS(rv, NS_OK);
+  nsCOMPtr<nsIMsgFolder> folder;
+  msgHdr->GetFolder(getter_AddRefs(folder));
+  if (folder) {
+    nsCOMPtr<nsIMsgIncomingServer> server;
+    folder->GetServer(getter_AddRefs(server));
+    if (server) server->GetKey(aServerKey);
+  }
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::SetTree(mozilla::dom::XULTreeElement* tree) {
   mTree = tree;
   return NS_OK;
 }
 
