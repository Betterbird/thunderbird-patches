# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1702674754 -3600
# Parent  d41b90493e7d4a5c08f8d464a59b541c93ae195b
Feature: Account colours, part 2: Message list.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -774,16 +774,18 @@ var folderPane = {
   _initialized: false,
 
   /**
    * If the local folders should be hidden.
    * @type {boolean}
    */
   _hideLocalFolders: false,
 
+  _serverColorMap: null,
+
   _modes: {
     all: {
       name: "all",
       active: false,
       canBeCompact: false,
 
       initServer(server) {
         let serverRow = folderPane._createServerRow(this.name, server);
@@ -2604,16 +2606,22 @@ var folderPane = {
           }
         }
       } else if (row.id.startsWith("recent-")) {
         row.style.backgroundColor = color;
       } else if (f.isServer) {
         row.style.backgroundColor = color;
       }
     }
+
+    // Take care of cached values.
+    if (this._serverColorMap) {
+      this._serverColorMap.delete(folder.server.key);
+    }
+    threadTree.invalidate();
   },
 
   /**
    * Update the UI widget to reflect the real folder size when the "FolderSize"
    * property changes.
    *
    * @param {nsIMsgFolder} folder
    */
@@ -6614,16 +6622,48 @@ var folderListener = {
       // the folder but we are not notified about the descendants.
       for (let f of folder.descendants) {
         folderPane.addFolder(f.parent, f);
       }
     }
   },
 };
 
+function getRGBAcolorForServerKey(key) {
+  // Create the map if we don't have one.
+  if (!folderPane._serverColorMap) {
+    folderPane._serverColorMap = new Map();
+  }
+
+  // Return the rgba if we have it in the map.
+  let rgba = folderPane._serverColorMap.get(key);
+  if (rgba !== undefined) {
+    return rgba;
+  }
+
+  // Determine the rgba and put it into the map.
+  let color = Services.prefs.getCharPref(`mail.server.${key}.color`, "");
+  if (
+    !color ||
+    color == "#000000" ||
+    !color.startsWith("#") ||
+    color.length != 7
+  ) {
+    rgba = "";
+  } else {
+    // Turn #RRGGBB into rgba(rr, gg, bb, tt)
+    let r = parseInt(color.substring(1, 3), 16);
+    let g = parseInt(color.substring(3, 5), 16);
+    let b = parseInt(color.substring(5, 7), 16);
+    rgba = `rgba(${r}, ${g}, ${b}, 0.2)`;
+  }
+  folderPane._serverColorMap.set(key, rgba);
+  return rgba;
+}
+
 /**
  * Custom element for rows in the thread tree.
  */
 customElements.whenDefined("tree-view-table-row").then(() => {
   class ThreadRow extends customElements.get("tree-view-table-row") {
     static ROW_HEIGHT = 0; // Will be set via density.
     static MULTILINE = false;
 
@@ -6663,29 +6703,44 @@ customElements.whenDefined("tree-view-ta
         }
         textColumns.push(column.id);
       }
 
       // XPCOM calls here must be keep to a minimum. Collect all of the
       // required data in one go.
       let threadedDisplay =
         gViewWrapper._viewFlags & Ci.nsMsgViewFlagsType.kThreadedDisplay;
+      let getServerInfo = !gViewWrapper.isSingleFolder;
       let properties = {};
       let threadLevel = {};
       let numChildren = {};
       let hasNextSibling = {};
+      let serverKey = {};
       let cellTexts = this.view.cellDataForColumns(
         index,
         textColumns,
         properties,
         threadLevel,
         threadedDisplay, // no need to get the following two for a non-threaded display
         numChildren,
-        hasNextSibling
+        hasNextSibling,
+        getServerInfo,
+        serverKey
       );
+      let child = this.querySelector('td:not([hidden])');
+      if (getServerInfo) {
+        let color = getRGBAcolorForServerKey(serverKey.value);
+        if (color) {
+          child.style.backgroundColor = color;
+        } else {
+          child.style.backgroundColor = "";
+        }
+      } else {
+        child.style.backgroundColor = "";
+      }
       this.classList.toggle("singleton", numChildren.value <= 1);
       this.classList.toggle("lastchild", !hasNextSibling.value);
 
       // Collect the various strings and fluent IDs to build the full string for
       // the message row aria-label.
       let ariaLabelPromises = [];
 
       const propertiesSet = new Set(properties.value.split(" "));
@@ -6912,30 +6967,44 @@ customElements.whenDefined("tree-view-ta
       return super.index;
     }
 
     set index(index) {
       super.index = index;
 
       // XPCOM calls here must be keep to a minimum. Collect all of the
       // required data in one go.
+      let getServerInfo = !gViewWrapper.isSingleFolder;
       let properties = {};
       let threadLevel = {};
       let numChildren = {};
       let hasNextSibling = {};
+      let serverKey = {};
 
       let cellTexts = this.view.cellDataForColumns(
         index,
         threadPane.cardColumns,
         properties,
         threadLevel,
         false,
         numChildren,
-        hasNextSibling
+        hasNextSibling,
+        getServerInfo,
+        serverKey
       );
+      if (getServerInfo) {
+        let color = getRGBAcolorForServerKey(serverKey.value);
+        if (color) {
+          this.firstElementChild.style.borderLeft = `5px solid ${color}`;
+        } else {
+          this.firstElementChild.style.borderLeft = "";
+        }
+      } else {
+        this.firstElementChild.style.borderLeft = "";
+      }
 
       // Collect the various strings and fluent IDs to build the full string for
       // the message row aria-label.
       let ariaLabelPromises = [];
 
       if (threadLevel.value) {
         properties.value += " thread-children";
       }
diff --git a/mailnews/base/public/nsIMsgDBView.idl b/mailnews/base/public/nsIMsgDBView.idl
--- a/mailnews/base/public/nsIMsgDBView.idl
+++ b/mailnews/base/public/nsIMsgDBView.idl
@@ -492,26 +492,30 @@ interface nsIMsgDBView : nsISupports
    *
    * @param aRow - Index of the row we want data for.
    * @param aColumnNames - The column names we want cell text for.
    * @param aProperties - The properties of the row.
    * @param aThreadLevel - The thread level of the row.
    * @param aGetChildrenInfo - if false, return dummy values for aNumChildren and aHasNextSibling.
    * @param aNumChildren - The number of children of the row.
    * @param aHasNextSibling - Whether the row has a next sibling.
+   * @param aGetServerInfo - if false, return dummy value for aServerKey.
+   * @param aServerKey - Key of the server belonging to the folder.
    *
    * @returns The cell text for the columns in `aColumnNames`.
    */
   Array<AString> cellDataForColumns(in long aRow,
                                     in Array<AString> aColumnNames,
                                     out AString aProperties,
                                     out long aThreadLevel,
                                     in boolean getChildrenInfo,
                                     out unsigned long aNumChildren,
-                                    out boolean aHasNextSibling);
+                                    out boolean aHasNextSibling,
+                                    in boolean aGetServerInfo,
+                                    out ACString aServerKey);
 };
 
 /* this interface is rapidly morphing from a command updater interface into a more generic
    FE updater interface to handle changes in the view
 */
 
 [scriptable, uuid(ce8f52ee-e742-4b31-8bdd-2b3a8168a117)]
 interface nsIMsgDBViewCommandUpdater : nsISupports
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -2004,17 +2004,18 @@ nsMsgDBView::CellTextForColumn(int32_t a
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::CellDataForColumns(int32_t aRow,
                                 const nsTArray<nsString>& aColumnNames,
                                 nsAString& aProperties, int32_t* aThreadLevel,
                                 bool aGetChildrenInfo, uint32_t* aNumChildren,
-                                bool* aHasNextSibling,
+                                bool* aHasNextSibling, bool aGetServerInfo,
+                                nsACString& aServerKey,
                                 nsTArray<nsString>& _retval) {
   nsresult rv;
   _retval.Clear();
 
   uint32_t count = aColumnNames.Length();
   _retval.SetCapacity(count);
   for (nsString column : aColumnNames) {
     nsString text;
@@ -2044,19 +2045,33 @@ nsMsgDBView::CellDataForColumns(int32_t 
     _retval.Clear();
     return rv;
   }
 
   rv = GetLevel(aRow, aThreadLevel);
   if (NS_FAILED(rv)) {
     _retval.Clear();
     aProperties.Truncate();
-  }
-
-  return rv;
+    return rv;
+  }
+
+  aServerKey.Truncate();
+  if (!aGetServerInfo) return NS_OK;
+
+  nsCOMPtr<nsIMsgDBHdr> msgHdr;
+  rv = GetMsgHdrForViewIndex(aRow, getter_AddRefs(msgHdr));
+  NS_ENSURE_SUCCESS(rv, NS_OK);
+  nsCOMPtr<nsIMsgFolder> folder;
+  msgHdr->GetFolder(getter_AddRefs(folder));
+  if (folder) {
+    nsCOMPtr<nsIMsgIncomingServer> server;
+    folder->GetServer(getter_AddRefs(server));
+    if (server) server->GetKey(aServerKey);
+  }
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgDBView::SetTree(mozilla::dom::XULTreeElement* tree) {
   mTree = tree;
   return NS_OK;
 }
 
