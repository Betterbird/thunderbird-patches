# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1697827414 -7200
# Parent  a0cf86bc00be11ce9f48fa39de92e855a52801e3
Bug 1729221 - Introduce pref mail.openpgp.ignore_missing_mdc to ignore missing MDC.

diff --git a/mail/extensions/am-e2e/prefs/e2e-prefs.js b/mail/extensions/am-e2e/prefs/e2e-prefs.js
--- a/mail/extensions/am-e2e/prefs/e2e-prefs.js
+++ b/mail/extensions/am-e2e/prefs/e2e-prefs.js
@@ -94,16 +94,19 @@ pref("mail.openpgp.remind_encryption_pos
 // sent with S/MIME encryption (without further user actions/decisions).
 pref("mail.smime.remind_encryption_possible", true);
 
 pref("mail.smime.accept_insecure_sha1_message_signatures", false);
 
 // When sending, encrypt to this additional key. Not available in release channel builds.
 pref("mail.openpgp.debug.extra_encryption_key", "");
 
+// Ignore missing MDC.
+pref("mail.openpgp.ignore_missing_mdc", false);
+
 // Hide prefs and menu entries from non-advanced users
 pref("temp.openpgp.advancedUser", false);
 
 // ** enigmail keySel preferences:
 // use rules to assign keys
 pref("temp.openpgp.assignKeysByRules", true);
 // use email addresses to assign keys
 pref("temp.openpgp.assignKeysByEmailAddr", true);
diff --git a/mail/extensions/openpgp/content/modules/RNP.jsm b/mail/extensions/openpgp/content/modules/RNP.jsm
--- a/mail/extensions/openpgp/content/modules/RNP.jsm
+++ b/mail/extensions/openpgp/content/modules/RNP.jsm
@@ -1822,17 +1822,19 @@ var RNP = {
             prot_cipher_str.address(),
             prot_is_valid.address()
           )
         ) {
           throw new Error("rnp_op_verify_get_protection_info failed");
         }
         let mode = prot_mode_str.readString();
         let cipher = prot_cipher_str.readString();
-        let validIntegrityProtection = prot_is_valid.value;
+        let validIntegrityProtection = options.ignoreVerify
+          ? true
+          : prot_is_valid.value;
 
         if (mode != "none") {
           if (!validIntegrityProtection) {
             useDecodedData = false;
             result.statusFlags |=
               lazy.EnigmailConstants.MISSING_MDC |
               lazy.EnigmailConstants.DECRYPTION_FAILED;
           } else if (mode == "null" || this.policyForbidsAlg(cipher)) {
diff --git a/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm b/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
--- a/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
+++ b/mail/extensions/openpgp/content/modules/cryptoAPI/RNPCryptoAPI.jsm
@@ -155,17 +155,21 @@ class RNPCryptoAPI extends CryptoAPI {
    * @returns {Promise<object>} - Return object with decryptedData and
    * status information
    *
    * Use Promise.catch to handle failed decryption.
    * retObj.errorMsg will be an error message in this case.
    */
 
   async decryptAttachment(encrypted) {
-    let options = {};
+    let ignoreVerify = Services.prefs.getBoolPref(
+      "mail.openpgp.ignore_missing_mdc",
+      false
+    );
+    let options = { ignoreVerify };
     options.fromAddr = "";
     options.msgDate = null;
     return RNP.decrypt(encrypted, options);
   }
 
   /**
    *
    * @param {string} encrypted - The encrypted data
