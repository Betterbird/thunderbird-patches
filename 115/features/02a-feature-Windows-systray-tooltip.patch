# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1710635679 -3600
# Parent  67a25756253423b41f59a37ab1622f9c22d6d3da
Rework MailNotificationService.jsm to improve Windows systray tooltip: Remove #newCount.

diff --git a/mailnews/base/src/MailNotificationService.jsm b/mailnews/base/src/MailNotificationService.jsm
--- a/mailnews/base/src/MailNotificationService.jsm
+++ b/mailnews/base/src/MailNotificationService.jsm
@@ -28,9 +28,8 @@ class NewMailNotificationService {
     "mozINewMailNotificationService",
   ]);
 
   #unreadCount = 0;
-  #newCount = 0;
   #listeners = [];
   #log = null;
   folderCountMap = new Map();
   folderNewMap = new Map();
@@ -151,14 +150,18 @@ class NewMailNotificationService {
         shouldCount.data = false;
       }
     }
 
-    this.#log.debug(`${aFolder.URI}: shouldCount=${shouldCount.data}`);
+    if (shouldCount.data) {
+      this.#log.debug(`${aFolder.URI}: shouldCount=${shouldCount.data}`);
+    }
+    /* No one cares about this.
     Services.obs.notifyObservers(
       shouldCount,
       "before-count-unread-for-folder",
       aFolder.URI
     );
+    */
     return shouldCount.data;
   }
 
   onFolderBoolPropertyChanged(folder, property, oldValue, newValue) {
@@ -192,36 +195,30 @@ class NewMailNotificationService {
     if (!this.confirmShouldCount(folder)) {
       return;
     }
 
-    this.#log.debug(`_updateNewCount: ${folder.URI} new messages: ${newCount}`);
+    this.#log.info(`_updateNewCount: ${folder.URI} new messages: ${newCount}`);
     let folderCountMapValue = this.folderCountMap.get(folder.URI);
     let folderCount = folderCountMapValue || 0;
     if (isCompensation) {
-      this.#log.debug(
+      this.#log.info(
         `_updateNewCount: Compensation for ${folder.URI}, setting ${folderCount} + ${newCount}`
       );
       this.folderCountMap.set(folder.URI, folderCount + newCount);
-      this.#newCount += newCount;
-      this.#log.debug(
-        `_updateNewCount: Compensation for ${
-          folder.URI
-        }, returning with count ${this.#newCount}`
-      );
       return;
     }
 
     if (newCount < 0 && folderCountMapValue === undefined) {
       // If we don't have a count for the folder, we cleared it from our map
       // in `_newMessagesChanged()`. So return instead of reducing the count.
-      this.#log.debug(
+      this.#log.info(
         `_updateNewCount: ${folder.URI} not in map, ignoring ${newCount}`
       );
       return;
     }
 
     let newFolderCount = Math.max(folderCount + newCount, 0);
-    this.#log.debug(
+    this.#log.info(
       `_updateNewCount: ${folder.URI}, setting ${folderCount} + ${newCount} = ${newFolderCount}`
     );
     if (newFolderCount > 0) {
       this.folderCountMap.set(folder.URI, newFolderCount);
@@ -229,48 +226,42 @@ class NewMailNotificationService {
       // Likely this is the second call on a compensation, so make sure the
       // maps don't hang around. If the maps hang around, the condition above:
       // if (newCount < 0 && folderCountMapValue === undefined) { ...
       // won't be fulfilled again.
-      this.#log.debug(`_updateNewCount: ${folder.URI}: Deleting count map`);
+      this.#log.info(`_updateNewCount: ${folder.URI}: Deleting maps`);
       this.folderCountMap.delete(folder.URI);
-      // Don't delete the folder map or count may not update in the UI below.
-      // this.folderNewMap.delete(folder.URI);
+      this.folderNewMap.delete(folder.URI);
     }
-    this.#newCount = Math.max(this.#newCount + newCount, 0);
-    this.#log.debug(
-      `_updateNewCount: ${folder.URI} new mail count: ${this.#newCount}`
-    );
 
     let folderNew = this.folderNewMap.get(folder.URI);
     if (!folderNew) {
-      this.#log.debug(
-        `_updateNewCount: ${folder.URI} not in the map, returning with count ${
-          this.#newCount
-        }`
-      );
-      return;
+      this.#log.info(`_updateNewCount: ${folder.URI} not in the map`);
     }
 
     if (this.useNewCountInBadge) {
+      let { total, output } = this._folderInfo();
       this._notifyListeners(
         Ci.mozINewMailNotificationService.count,
         "onCountChanged",
-        this.#newCount,
-        this._folderInfo()
+        total,
+        output
       );
     }
   }
 
   _newMessagesChanged(folder, oldValue, newValue) {
+    if (!this.confirmShouldCount(folder)) {
+      return;
+    }
     if (newValue) {
       // We have new messages.
       // `getNumNewMessages()` doesn't work until after the biff
       // notification (BiffState or NumNewBiffMessages changed)
       // and it doesn't work on local folders at all.
       // We use a change of TotalUnreadMessages.
       let folderNew = this.folderNewMap.get(folder.URI);
       if (!folderNew) {
-        this.#log.debug(
+        this.#log.info(
           `_newMessagesChanged: Created map entry for ${folder.URI}`
         );
         this.folderNewMap.set(folder.URI, {
           name: folder.name,
@@ -279,20 +270,18 @@ class NewMailNotificationService {
         let folderCount = this.folderCountMap.get(folder.URI);
         if (folderCount) {
           // The count arrived before the "NewMessages" notification.
           // This was already added in `_updateNewCount()`.
-          // this.#newCount += folderCount;
-          this.#log.debug(
-            `_newMessagesChanged: ${folder.URI} new mail count: ${
-              this.#newCount
-            }`
+          this.#log.info(
+            `_newMessagesChanged: ${folder.URI} count: ${folderCount}`
           );
           if (this.useNewCountInBadge) {
+            let { total, output } = this._folderInfo();
             this._notifyListeners(
               Ci.mozINewMailNotificationService.count,
               "onCountChanged",
-              this.#newCount,
-              this._folderInfo()
+              total,
+              output
             );
           }
         }
       }
@@ -301,31 +290,26 @@ class NewMailNotificationService {
       let folderCount = this.folderCountMap.get(folder.URI);
       this.folderCountMap.delete(folder.URI);
       this.folderNewMap.delete(folder.URI);
       if (folderCount) {
-        this.#log.debug(
-          `_newMessagesChanged: ${folder.URI} new mail count: ${
-            this.#newCount
-          }, will reduce by ${folderCount}`
-        );
-        this.#newCount = Math.max(this.#newCount - folderCount, 0);
-        this.#log.debug(
-          `_newMessagesChanged: ${folder.URI} new mail count: ${this.#newCount}`
+        this.#log.info(
+          `_newMessagesChanged: ${folder.URI}: count going away: ${folderCount}`
         );
         if (this.useNewCountInBadge) {
+          let { total, output } = this._folderInfo();
           this._notifyListeners(
             Ci.mozINewMailNotificationService.count,
             "onCountChanged",
-            this.#newCount,
-            this._folderInfo()
+            total,
+            output
           );
         }
       }
     }
   }
 
   _folderInfo() {
-    let DEBUGTOTAL = 0;
+    let total = 0;
     let totalInbox = 0;
     let countInbox = 0;
     let inboxName = "";
     let folders = [];
@@ -333,26 +317,21 @@ class NewMailNotificationService {
       let count = this.folderCountMap.get(key);
       if (!count) {
         continue;
       }
-      DEBUGTOTAL += count;
+      total += count;
       if (value.isInbox) {
         totalInbox += count;
         countInbox++;
         inboxName = value.name; // Could be localised.
         continue;
       }
       folders.push({ count, name: value.name });
     }
-    this.#log.debug(`_folderInfo: ${DEBUGTOTAL} vs. ${this.#newCount}`);
-    if (DEBUGTOTAL != this.#newCount) {
-      this.#log.debug(
-        "_folderInfo: Warning: newCount and folder sum don't match"
-      );
-    }
 
     if (totalInbox == 0 && folders.length == 0) {
-      return "";
+      this.#log.info(`_folderInfo: ${total} <empty>`);
+      return { total, output: "" };
     }
     let output = "\n";
     let folderAddsComma = false;
     if (totalInbox > 0) {
@@ -363,10 +342,10 @@ class NewMailNotificationService {
       output += ": " + totalInbox.toString(10);
       folderAddsComma = true;
     }
     if (folders.length == 0) {
-      this.#log.debug(`_folderInfo: ${output}`);
-      return output;
+      this.#log.info(`_folderInfo: ${total} ${output}`);
+      return { total, output };
     }
     let lineLength = output.length - 1; // Don't count the initial newline.
     folders.sort((el1, el2) => el2.count - el1.count);
     for (let i = 0; i < folders.length; i++) {
@@ -401,10 +380,10 @@ class NewMailNotificationService {
         folderAddsComma = true;
       }
       lineLength += folder.length;
     }
-    this.#log.debug(`_folderInfo: ${output}`);
-    return output;
+    this.#log.info(`_folderInfo: ${total} ${output}`);
+    return { total, output };
   }
 
   #totalUnreadMessagesChanged(folder, oldValue, newValue) {
     if (!this.confirmShouldCount(folder)) {
@@ -439,11 +418,9 @@ class NewMailNotificationService {
     }
   }
 
   onMessageAdded(parentFolder, msg) {
-    if (this.confirmShouldCount(msg.folder)) {
-      this.#log.debug(`Added <${msg.messageId}> to ${msg.folder.folderURL}`);
-    }
+    this.#log.debug(`Added <${msg.messageId}> to ${msg.folder.folderURL}`);
   }
 
   onFolderPropertyFlagChanged(msg, property, oldFlag, newFlag) {
     if (property != "Status") {
@@ -505,9 +482,10 @@ class NewMailNotificationService {
   // Implement mozINewMailNotificationService
 
   get messageCount() {
     if (this.useNewCountInBadge) {
-      return this.#newCount;
+      let { total } = this._folderInfo();
+      return total;
     }
     return this.#unreadCount;
   }
 
@@ -522,9 +500,10 @@ class NewMailNotificationService {
 
     // Ensure that first-time listeners get an accurate mail count.
     if (flags & Ci.mozINewMailNotificationService.count) {
       if (this.useNewCountInBadge) {
-        aListener.onCountChanged(this.#newCount, this._folderInfo());
+        let { total, output } = this._folderInfo();
+        aListener.onCountChanged(total, output);
       } else {
         aListener.onCountChanged(this.#unreadCount, "");
       }
     }
