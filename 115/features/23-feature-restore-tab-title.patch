# HG changeset patch
# User alta88@fixall.com
# Date 1691613163 -7200
# Parent  fa6f6b66582b0d8f42d84c85546dd984f5534f9c
Feature: Tab title persist and restore.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -17,16 +17,22 @@ XPCOMUtils.defineLazyModuleGetters(this,
 });
 
 /**
  * Tabs for displaying mail folders and messages.
  */
 var mailTabType = {
   name: "mailTab",
   perTabPanel: "vbox",
+  get loadingTabString() {
+    delete this.loadingTabString;
+    return (this.loadingTabString = document
+      .getElementById("bundle_messenger")
+      .getString("loadingTab"));
+  },
   _cloneTemplate(template, tab, onDOMContentLoaded, onLoad) {
     let tabmail = document.getElementById("tabmail");
 
     let clone = document.getElementById(template).content.cloneNode(true);
     let browser = clone.querySelector("browser");
     browser.id = `${tab.mode.name}Browser${tab.mode._nextId}`;
     browser.addEventListener(
       "DOMTitleChanged",
@@ -64,17 +70,17 @@ var mailTabType = {
       event => {
         if (!tab.closed) {
           onLoad(event.target.ownerGlobal);
         }
       },
       { capture: true, once: true }
     );
 
-    tab.title = "";
+    tab.title = this.loadingTabString;
     tab.panel.id = `${tab.mode.name}${tab.mode._nextId}`;
     tab.panel.appendChild(clone);
     // `chromeBrowser` refers to the outermost browser in the tab, i.e. the
     // browser displaying about:3pane or about:message.
     tab.chromeBrowser = browser;
     tab.mode._nextId++;
   },
 
@@ -230,16 +236,20 @@ var mailTabType = {
                   restoreState.ext[tabMonitor.monitorName],
                   false
                 );
               }
             } catch (ex) {
               console.error(ex);
             }
           }
+
+          // Restore the last title immediately for firstTab.
+          tabmail.tabInfo[0].title = restoreState.state?.title ?? "";
+          tabmail.setTabTitle(tabmail.tabInfo[0]);
         }
 
         let { chromeBrowser, closed } = tabmail.tabInfo[0];
         if (
           chromeBrowser.contentDocument.readyState == "complete" &&
           chromeBrowser.currentURI.spec == "about:3pane"
         ) {
           chromeBrowser.contentWindow.restoreState(persistedState);
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -895,16 +895,22 @@ var { UIFontSize } = ChromeUtils.import(
         if (browser && !tab.browser) {
           tab.browser = browser;
           if (!tab.linkedBrowser) {
             tab.linkedBrowser = browser;
           }
         }
 
         let restoreState = this._restoringTabState;
+
+        // Set the title property immediately only if there is a restore value.
+        if (restoreState?.state?.title) {
+          tab.title = restoreState.state.title;
+        }
+
         for (let tabMonitor of this.tabMonitors) {
           try {
             if (
               "onTabRestored" in tabMonitor &&
               restoreState &&
               tabMonitor.monitorName in restoreState.ext
             ) {
               tabMonitor.onTabRestored(
@@ -1290,19 +1296,21 @@ var { UIFontSize } = ChromeUtils.import(
         tabState = persistFunc.call(tab.mode.tabType, tab);
       } catch (ex) {
         // Report this so that our unit testing framework sees this
         // error and (extension) developers likewise can see when their
         // extensions are ill-behaved.
         console.error(ex);
       }
 
+      // Persist the last title for snappy startup restore.
       if (!tabState) {
-        return null;
+        tabState = {};
       }
+      tabState.title = tab.title;
 
       let ext = {};
       for (let tabMonitor of this.tabMonitors) {
         try {
           if ("onTabPersist" in tabMonitor) {
             let monState = tabMonitor.onTabPersist(tab);
             if (monState !== null) {
               ext[tabMonitor.monitorName] = monState;
@@ -1774,16 +1782,23 @@ var { UIFontSize } = ChromeUtils.import(
         for (let tabMonitor of this.tabMonitors) {
           try {
             tabMonitor.onTabTitleChanged(tab);
           } catch (ex) {
             console.error(ex);
           }
         }
 
+        // Current title is either from session store for restored tabs, or the
+        // tab mode's title (usually "Loading") for new tabs. Don't update
+        // with an empty value.
+        if (!newLabel) {
+          return;
+        }
+
         // If the displayed tab is the one at the moment of creation
         // (aTabNodeOrInfo is null), set the default title as its title.
         tabNode.setAttribute("label", newLabel);
         // Update the window title if we're the displayed tab.
         if (iTab == this.tabContainer.selectedIndex) {
           this.setDocumentTitle(tab);
         }
 
