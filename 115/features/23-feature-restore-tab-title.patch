# HG changeset patch
# User alta88@fixall.com
# Date 1691310616 -7200
# Parent  94cf84bb3e095ddd3f92e423bcd86f5f2f3cd3d7
Feature: Tab title persist and restore.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -230,16 +230,19 @@ var mailTabType = {
                   restoreState.ext[tabMonitor.monitorName],
                   false
                 );
               }
             } catch (ex) {
               console.error(ex);
             }
           }
+
+          // Restore last title immediately.
+          tabmail.tabInfo[0].tabNode.label = restoreState.state?.title ?? "";
         }
 
         let { chromeBrowser, closed } = tabmail.tabInfo[0];
         if (
           chromeBrowser.contentDocument.readyState == "complete" &&
           chromeBrowser.currentURI.spec == "about:3pane"
         ) {
           chromeBrowser.contentWindow.restoreState(persistedState);
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -895,16 +895,20 @@ var { UIFontSize } = ChromeUtils.import(
         if (browser && !tab.browser) {
           tab.browser = browser;
           if (!tab.linkedBrowser) {
             tab.linkedBrowser = browser;
           }
         }
 
         let restoreState = this._restoringTabState;
+
+        // Restore last title immediately.
+        tab.title = restoreState?.state?.title ?? "";
+
         for (let tabMonitor of this.tabMonitors) {
           try {
             if (
               "onTabRestored" in tabMonitor &&
               restoreState &&
               tabMonitor.monitorName in restoreState.ext
             ) {
               tabMonitor.onTabRestored(
@@ -1278,31 +1282,30 @@ var { UIFontSize } = ChromeUtils.import(
         return null;
       }
 
       //  If there is a non-null tab-state, then persisting succeeded and
       //  we should store it.  We store the tab's persisted state in its
       //  own distinct object rather than mixing things up in a dictionary
       //  to avoid bugs and because we may eventually let extensions store
       //  per-tab information in the persisted state.
-      let tabState;
+      let tabState = {};
       // Wrap this in an exception handler so that if the persistence
       // logic fails, things like tab closure still run to completion.
       try {
         tabState = persistFunc.call(tab.mode.tabType, tab);
       } catch (ex) {
         // Report this so that our unit testing framework sees this
         // error and (extension) developers likewise can see when their
         // extensions are ill-behaved.
         console.error(ex);
       }
 
-      if (!tabState) {
-        return null;
-      }
+      // Persist the last title for snappy startup restore.
+      tabState.title = tab.title;
 
       let ext = {};
       for (let tabMonitor of this.tabMonitors) {
         try {
           if ("onTabPersist" in tabMonitor) {
             let monState = tabMonitor.onTabPersist(tab);
             if (monState !== null) {
               ext[tabMonitor.monitorName] = monState;
@@ -1774,16 +1777,22 @@ var { UIFontSize } = ChromeUtils.import(
         for (let tabMonitor of this.tabMonitors) {
           try {
             tabMonitor.onTabTitleChanged(tab);
           } catch (ex) {
             console.error(ex);
           }
         }
 
+        // Don't set an empty value. Current title is from session store; only
+        // update with a new title.
+        if (!newLabel) {
+          return;
+        }
+
         // If the displayed tab is the one at the moment of creation
         // (aTabNodeOrInfo is null), set the default title as its title.
         tabNode.setAttribute("label", newLabel);
         // Update the window title if we're the displayed tab.
         if (iTab == this.tabContainer.selectedIndex) {
           this.setDocumentTitle(tab);
         }
 
