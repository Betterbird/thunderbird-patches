# HG changeset patch
# User alta88@fixall.com
# Date 1709828365 -3600
# Parent  374ec2d465796a2db8ca66b31b49a493b695a204
Feature: Tab title persist and restore.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/base/content/mailTabs.js b/mail/base/content/mailTabs.js
--- a/mail/base/content/mailTabs.js
+++ b/mail/base/content/mailTabs.js
@@ -21,8 +21,14 @@ XPCOMUtils.defineLazyModuleGetters(this,
  */
 var mailTabType = {
   name: "mailTab",
   perTabPanel: "vbox",
+  get loadingTabString() {
+    delete this.loadingTabString;
+    return (this.loadingTabString = document
+      .getElementById("bundle_messenger")
+      .getString("loadingTab"));
+  },
   _cloneTemplate(template, tab, onDOMContentLoaded, onLoad) {
     let tabmail = document.getElementById("tabmail");
 
     let clone = document.getElementById(template).content.cloneNode(true);
@@ -68,9 +74,9 @@ var mailTabType = {
       },
       { capture: true, once: true }
     );
 
-    tab.title = "";
+    tab.title = this.loadingTabString;
     tab.panel.id = `${tab.mode.name}${tab.mode._nextId}`;
     tab.panel.appendChild(clone);
     // `chromeBrowser` refers to the outermost browser in the tab, i.e. the
     // browser displaying about:3pane or about:message.
@@ -237,8 +243,12 @@ var mailTabType = {
             } catch (ex) {
               console.error(ex);
             }
           }
+
+          // Restore the last title immediately for firstTab.
+          tabmail.tabInfo[0].title = restoreState.state?.title ?? "";
+          tabmail.setTabTitle(tabmail.tabInfo[0]);
         }
 
         let { chromeBrowser, closed } = tabmail.tabInfo[0];
         if (
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -905,8 +905,14 @@ var { UIFontSize } = ChromeUtils.import(
           }
         }
 
         let restoreState = this._restoringTabState;
+
+        // Set the title property immediately only if there is a restore value.
+        if (restoreState?.state?.title) {
+          tab.title = restoreState.state.title;
+        }
+
         for (let tabMonitor of this.tabMonitors) {
           try {
             if (
               "onTabRestored" in tabMonitor &&
@@ -1300,11 +1306,13 @@ var { UIFontSize } = ChromeUtils.import(
         // extensions are ill-behaved.
         console.error(ex);
       }
 
+      // Persist the last title for snappy startup restore.
       if (!tabState) {
-        return null;
+        tabState = {};
       }
+      tabState.title = tab.title;
 
       let ext = {};
       for (let tabMonitor of this.tabMonitors) {
         try {
@@ -1726,8 +1734,15 @@ var { UIFontSize } = ChromeUtils.import(
             console.error(ex);
           }
         }
 
+        // Current title is either from session store for restored tabs, or the
+        // tab mode's title (usually "Loading") for new tabs. Don't update
+        // with an empty value.
+        if (!newLabel) {
+          return;
+        }
+
         // If the displayed tab is the one at the moment of creation
         // (aTabNodeOrInfo is null), set the default title as its title.
         tabNode.setAttribute("label", newLabel);
         // Update the window title if we're the displayed tab.
