# HG changeset patch
# User alta88@fixall.com
# Date 1710691961 -3600
# Parent  c8f58cb2ba09c411f2741b03375e4f70e886135a
Implement negation for QuickFilterBar filter and text filter buttons.

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

Use right-click or Ctrl+enter on a filter or text filter button to negate a search.
For example: find all NOT Starred messages, or all messages where Subject does
NOT contain "sometext". For top level filters (Starred, etc.), the operator is AND.
For the text filter (Sender, Subject, etc.), the operator is OR, but becomes AND with negation.
Negation is indicated with a red strike-through.

diff --git a/mail/base/content/quickFilterBar.inc.xhtml b/mail/base/content/quickFilterBar.inc.xhtml
--- a/mail/base/content/quickFilterBar.inc.xhtml
+++ b/mail/base/content/quickFilterBar.inc.xhtml
@@ -44,8 +44,10 @@
                   data-l10n-id="quick-filter-bar-attachment">
             <span data-l10n-id="quick-filter-bar-attachment-label"></span>
           </button>
         </div>
+        <span id="qfb-info-icon"
+             data-l10n-id="quick-filter-bar-negate"></span>
         <span id="qfb-results-label"></span>
       </div>
       <div id="quickFilterBarSecondFilters">
         <div id="quick-filter-bar-filter-text-bar" hidden="hidden">
diff --git a/mail/base/content/quickFilterBar.js b/mail/base/content/quickFilterBar.js
--- a/mail/base/content/quickFilterBar.js
+++ b/mail/base/content/quickFilterBar.js
@@ -20,15 +20,25 @@ class ToggleButton extends HTMLButtonEle
     super();
     this.addEventListener("click", () => {
       this.pressed = !this.pressed;
     });
+    this.addEventListener("keypress", event => {
+      this.inverted = event.ctrlKey && !this.inverted;
+      this.pressed = !this.inverted && this.pressed;
+    });
+    this.addEventListener("contextmenu", () => {
+      this.pressed = this.inverted = !this.inverted;
+    });
   }
 
   connectedCallback() {
     this.setAttribute("is", "toggle-button");
     if (!this.hasAttribute("aria-pressed")) {
       this.pressed = false;
     }
+    if (!this.hasAttribute("inverted")) {
+      this.inverted = false;
+    }
   }
 
   get pressed() {
     return this.getAttribute("aria-pressed") === "true";
@@ -36,15 +46,23 @@ class ToggleButton extends HTMLButtonEle
 
   set pressed(value) {
     this.setAttribute("aria-pressed", value ? "true" : "false");
   }
+
+  get inverted() {
+    return this.hasAttribute("inverted");
+  }
+
+  set inverted(value) {
+    this.toggleAttribute("inverted", value === true);
+  }
 }
 customElements.define("toggle-button", ToggleButton, { extends: "button" });
 
 var quickFilterBar = {
   _filterer: null,
-  activeTopLevelFilters: new Set(),
-  topLevelFilters: ["unread", "starred", "addrBook", "attachment"],
+  activeTopLevelFilters: new Map(),
+  topLevelFilters: ["unread", "starred", "addrBook", "attachment", "tags"],
 
   /**
    * The UI element that last triggered a search. This can be used to avoid
    * updating the element when a search returns - in particular the text box,
@@ -242,9 +260,9 @@ var quickFilterBar = {
 
       if (!("onCommand" in filterDef)) {
         handlerDomId = event => {
           try {
-            let postValue = domNode.pressed ? true : null;
+            let postValue = !domNode.pressed ? null : !domNode.inverted;
             this.filterer.setFilterValue(filterDef.name, postValue);
             this.updateFiltersSettings(filterDef.name, postValue);
             this.deferredUpdateSearch(domNode);
           } catch (ex) {
@@ -307,8 +325,9 @@ var quickFilterBar = {
       }
 
       if (domNode.namespaceURI == document.documentElement.namespaceURI) {
         domNode.addEventListener("click", handlerDomId);
+        domNode.addEventListener("contextmenu", handlerDomId);
       } else {
         domNode.addEventListener("command", handlerDomId);
       }
       if (menuItemNode !== null) {
@@ -354,11 +373,11 @@ var quickFilterBar = {
       return;
     }
     // Set any enabled filters to enabled in the UI.
     const enabledTopFilters = JSON.parse(enabledTopFiltersVal);
-    for (const filterName of enabledTopFilters) {
-      this.activeTopLevelFilters.add(filterName);
-      this.filterer.setFilterValue(filterName, true);
+    for (const [filterName, filterValue] of enabledTopFilters) {
+      this.activeTopLevelFilters.set(filterName, filterValue);
+      this.filterer.setFilterValue(filterName, filterValue);
     }
   },
 
   /**
@@ -373,10 +392,10 @@ var quickFilterBar = {
   /**
    * Update enabled top level filters in XULStore.
    */
   updateTopLevelFilters(filterName, filterValue) {
-    if (filterValue) {
-      this.activeTopLevelFilters.add(filterName);
+    if (filterValue !== null) {
+      this.activeTopLevelFilters.set(filterName, Boolean(filterValue));
     } else {
       this.activeTopLevelFilters.delete(filterName);
     }
 
@@ -422,9 +441,10 @@ var quickFilterBar = {
 
         let value =
           filterDef.name in filterValues ? filterValues[filterDef.name] : null;
         if (!("reflectInDOM" in filterDef)) {
-          domNode.pressed = value;
+          domNode.pressed = value === false || value === true;
+          domNode.inverted = value === false;
         } else {
           filterDef.reflectInDOM(domNode, value, document, this);
         }
       }
@@ -482,8 +502,10 @@ var quickFilterBar = {
       // no matches! :(
       threadPane.setAttribute("filterActive", "nomatches");
       this.domNode.setAttribute("filterActive", "nomatches");
     }
+
+    threadPane.scrollTo(0, true);
   },
 
   // ----------------------
   // Event Handling Support
diff --git a/mail/locales/en-US/messenger/about3Pane.ftl b/mail/locales/en-US/messenger/about3Pane.ftl
--- a/mail/locales/en-US/messenger/about3Pane.ftl
+++ b/mail/locales/en-US/messenger/about3Pane.ftl
@@ -106,8 +106,19 @@ quick-filter-bar-attachment =
 # The label for the filter button that causes us to filter results to only
 # include messages with attachments.
 quick-filter-bar-attachment-label = Attachment
 
+# Explain how to negate a search.
+quick-filter-bar-negate =
+    .title = Right-click or Ctrl+Enter on a button negates the result.
+      For the text and tag filter, any negated button creates an AND condition.
+      When the tag filter is negated, selecting a tag button adds respective messages to the list of untagged messages.
+      Examples:
+      • [Starred] and [Tagged] negated: Show all messages which are Not ‘Starred’ AND Not ‘Tagged’.
+      • [Subject] negated and [Body] selected: Show all messages where ‘Subject’ Does Not Contain “word” AND ‘Body’ Contains “word”.
+      • [Any of] with [Important] negated and [Work] and [Personal] selected:
+      Show all tagged messages which Do Not have the ‘Important’ tag AND which have the ‘Work’ OR the ‘Personal’ tag.
+
 # The contents of the results box when there is a filter active but there
 # are no messages matching the filter.
 quick-filter-bar-no-results = No results
 
diff --git a/mail/modules/QuickFilterManager.jsm b/mail/modules/QuickFilterManager.jsm
--- a/mail/modules/QuickFilterManager.jsm
+++ b/mail/modules/QuickFilterManager.jsm
@@ -664,8 +664,12 @@ var TagFacetingFilter = {
     // it's the simple case if the value is just a boolean
     if (typeof aFilterValue != "object") {
       return true;
     }
+    // Not a simple case.
+    if (aFilterValue.inverted) {
+      return false;
+    }
     // but also if the object contains no non-null values
     let simpleCase = true;
     for (let key in aFilterValue.tags) {
       let value = aFilterValue.tags[key];
@@ -690,88 +694,104 @@ var TagFacetingFilter = {
     }
 
     let term, value;
 
-    // just the true/false case
+    // Just the true/false case - in both we want all the tags.
     if (this.isSimple(aFilterValue)) {
       term = aTermCreator.createTerm();
       term.attrib = Ci.nsMsgSearchAttrib.Keywords;
       value = term.value;
       value.str = "";
       term.value = value;
-      term.op = aFilterValue
-        ? Ci.nsMsgSearchOp.IsntEmpty
-        : Ci.nsMsgSearchOp.IsEmpty;
+      term.op = Ci.nsMsgSearchOp.IsntEmpty;
       term.booleanAnd = true;
       aTerms.push(term);
 
       // we need to perform faceting if the value is literally true.
-      if (aFilterValue === true) {
-        return this;
-      }
-    } else {
-      let firstIncludeClause = true,
-        firstExcludeClause = true;
-      let lastIncludeTerm = null;
-      term = null;
+      // NOTE: Fix Bug 612800; always return |this| listener if tags are active,
+      // to reflect tag buttons per filtered messages results, sort of obvious.
+      // if (aFilterValue === true)
+      return this;
+    }
 
-      let excludeTerms = [];
+    let firstIncludeClause = true,
+      firstExcludeClause = true;
+    let lastIncludeTerm = null;
+    term = null;
+
+    let excludeTerms = [];
 
-      let mode = aFilterValue.mode;
-      for (let key in aFilterValue.tags) {
-        let shouldFilter = aFilterValue.tags[key];
-        if (shouldFilter !== null) {
-          term = aTermCreator.createTerm();
-          term.attrib = Ci.nsMsgSearchAttrib.Keywords;
-          value = term.value;
-          value.attrib = term.attrib;
-          value.str = key;
-          term.value = value;
-          if (shouldFilter) {
-            term.op = Ci.nsMsgSearchOp.Contains;
-            // AND for the group. Inside the group we also want AND if the
-            // mode is set to "All of".
-            term.booleanAnd = firstIncludeClause || mode === "AND";
-            term.beginsGrouping = firstIncludeClause ? 1 : 0;
-            aTerms.push(term);
-            firstIncludeClause = false;
-            lastIncludeTerm = term;
-          } else {
-            term.op = Ci.nsMsgSearchOp.DoesntContain;
-            // you need to not include all of the tags marked excluded.
-            term.booleanAnd = true;
-            term.beginsGrouping = firstExcludeClause ? 1 : 0;
-            excludeTerms.push(term);
-            firstExcludeClause = false;
-          }
+    let mode = aFilterValue.mode;
+    for (let key in aFilterValue.tags) {
+      let shouldFilter = aFilterValue.tags[key];
+      if (shouldFilter !== null) {
+        term = aTermCreator.createTerm();
+        term.attrib = Ci.nsMsgSearchAttrib.Keywords;
+        value = term.value;
+        value.attrib = term.attrib;
+        value.str = key;
+        term.value = value;
+        if (shouldFilter) {
+          term.op = Ci.nsMsgSearchOp.Contains;
+          // AND for the group. Inside the group we also want AND if the
+          // mode is set to "All of".
+          term.booleanAnd = firstIncludeClause || mode === "AND";
+          term.beginsGrouping = firstIncludeClause ? 1 : 0;
+          aTerms.push(term);
+          firstIncludeClause = false;
+          lastIncludeTerm = term;
+        } else {
+          term.op = Ci.nsMsgSearchOp.DoesntContain;
+          // you need to not include all of the tags marked excluded.
+          term.booleanAnd = true;
+          term.beginsGrouping = firstExcludeClause ? 1 : 0;
+          excludeTerms.push(term);
+          firstExcludeClause = false;
         }
       }
-      if (lastIncludeTerm) {
-        lastIncludeTerm.endsGrouping = 1;
+    }
+    if (lastIncludeTerm) {
+      lastIncludeTerm.endsGrouping = 1;
+    }
+
+    // if we have any exclude terms:
+    // - we might need to add a "has a tag" clause if there were no explicit
+    //   inclusions.
+    // - extend the exclusions list in.
+    if (excludeTerms.length) {
+      // (we need to add has a tag)
+      if (!lastIncludeTerm) {
+        term = aTermCreator.createTerm();
+        term.attrib = Ci.nsMsgSearchAttrib.Keywords;
+        value = term.value;
+        value.str = "";
+        term.value = value;
+        term.op = Ci.nsMsgSearchOp.IsntEmpty;
+        term.booleanAnd = true;
+        aTerms.push(term);
       }
 
-      // if we have any exclude terms:
-      // - we might need to add a "has a tag" clause if there were no explicit
-      //   inclusions.
-      // - extend the exclusions list in.
-      if (excludeTerms.length) {
-        // (we need to add has a tag)
-        if (!lastIncludeTerm) {
-          term = aTermCreator.createTerm();
-          term.attrib = Ci.nsMsgSearchAttrib.Keywords;
-          value = term.value;
-          value.str = "";
-          term.value = value;
-          term.op = Ci.nsMsgSearchOp.IsntEmpty;
-          term.booleanAnd = true;
-          aTerms.push(term);
-        }
+      // (extend in the exclusions)
+      excludeTerms[excludeTerms.length - 1].endsGrouping = 1;
+      aTerms.push.apply(aTerms, excludeTerms);
+    }
 
-        // (extend in the exclusions)
-        excludeTerms[excludeTerms.length - 1].endsGrouping = 1;
-        aTerms.push.apply(aTerms, excludeTerms);
-      }
+    if (aFilterValue.inverted) {
+      // Show untagged, in addition to any tag button checked state combination.
+      term = aTermCreator.createTerm();
+      term.beginsGrouping = !firstIncludeClause || !firstExcludeClause ? 1 : 0;
+      term.attrib = Ci.nsMsgSearchAttrib.Keywords;
+      value = term.value;
+      value.str = "";
+      term.value = value;
+      term.op = Ci.nsMsgSearchOp.IsEmpty;
+      // OR with any other tag terms in that group, but AND to combine with
+      // other filters.
+      term.booleanAnd = !(!firstIncludeClause || !firstExcludeClause);
+      term.endsGrouping = !firstIncludeClause || !firstExcludeClause ? 1 : 0;
+      aTerms.push(term);
     }
+
     return null;
   },
 
   onSearchStart(aCurState) {
@@ -792,10 +812,17 @@ var TagFacetingFilter = {
     if (aCurState == null) {
       return [null, false, false];
     }
 
+    // The simple case of inverted (no) tags, where aCurState is |false|,
+    // means we will update the search to show untagged messages after the
+    // possible tags have been built in tagbar.
+
     // only propagate things that are actually tags though!
     let outKeyMap = { tags: {} };
+    if (aCurState === false) {
+      outKeyMap.pending = true;
+    }
     let tags = MailServices.tags.getAllTags();
     let tagCount = tags.length;
     for (let iTag = 0; iTag < tagCount; iTag++) {
       let tag = tags[iTag];
@@ -807,20 +834,21 @@ var TagFacetingFilter = {
     return [outKeyMap, true, false];
   },
 
   /**
-   * We need to clone our state if it's an object to avoid bad sharing.
+   * Only return the simple state; the object containing a tag list isn't
+   * relevant to new folders.
    */
   propagateState(aOld, aSticky) {
     // stay disabled when disabled, get disabled when not sticky
     if (aOld == null || !aSticky) {
       return null;
     }
-    if (this.isSimple(aOld)) {
-      // Could be an object, need to convert.
-      return !!aOld;
+    if (aOld.inverted || aOld === false) {
+      // Propagate the simple |false| state if inverted.
+      return false;
     }
-    return shallowObjCopy(aOld);
+    return true;
   },
 
   /**
    * Default behaviour but:
@@ -829,17 +857,13 @@ var TagFacetingFilter = {
    */
   onCommand(aState, aNode, aEvent, aDocument) {
     let checked;
     if (aNode.tagName == "button") {
-      checked = aNode.pressed ? true : null;
+      checked = !aNode.pressed ? null : !aNode.inverted;
     } else {
       checked = aNode.hasAttribute("checked") ? true : null;
     }
 
-    if (!checked) {
-      aDocument.getElementById("quickFilterBarTagsContainer").hidden = true;
-    }
-
     // return ourselves if we just got checked to have
     //  onSearchStart/onSearchMessage/onSearchDone get to do their thing.
     return [checked, true];
   },
@@ -858,19 +882,44 @@ var TagFacetingFilter = {
       .addEventListener("ValueChange", commandHandler);
   },
 
   reflectInDOM(aNode, aFilterValue, aDocument, aMuxer, aCallId) {
+    // Update the list for the inverted case, now that we have the tags.
+    if (aFilterValue?.pending) {
+      delete aFilterValue.pending;
+      aFilterValue.inverted = true;
+      aMuxer.filterer.setFilterValue(this.name, aFilterValue, true);
+      aMuxer.updateSearch(aNode);
+      return;
+    }
+
     if (aCallId !== null && aCallId == "menuItem") {
       aFilterValue
         ? aNode.setAttribute("checked", aFilterValue)
         : aNode.removeAttribute("checked");
     } else {
-      aNode.pressed = aFilterValue;
+      aNode.pressed = aFilterValue !== null;
+      aNode.inverted =
+        aFilterValue === false || aFilterValue?.inverted === true;
     }
     if (aFilterValue != null && typeof aFilterValue == "object") {
       this._populateTagBar(aFilterValue, aDocument, aMuxer);
-    } else {
-      aDocument.getElementById("quickFilterBarTagsContainer").hidden = true;
+      const hasSelectedTag = Object.entries(aFilterValue.tags).some(
+        tag => tag[1] !== null
+      );
+      aDocument.getElementById("qfb-boolean-mode").disabled = !hasSelectedTag;
+    }
+
+    aDocument
+      .getElementById("threadTree")
+      .toggleAttribute("filterPending", aFilterValue === false);
+
+    const tagbar = aDocument.getElementById("quickFilterBarTagsContainer");
+    if (aFilterValue == null) {
+      tagbar.hidden = true;
+    } else if (typeof aFilterValue == "object") {
+      const hasTag = Boolean(Object.entries(aFilterValue.tags).length);
+      tagbar.hidden = !hasTag;
     }
   },
 
   _populateTagBar(aState, aDocument, aMuxer) {
@@ -890,25 +939,17 @@ var TagFacetingFilter = {
     function clickHandler(aEvent) {
       let tagKey = this.getAttribute("value");
       let state = aMuxer.getFilterValueForMutation(TagFacetingFilter.name);
       state.tags[tagKey] = this.pressed ? true : null;
-      this.removeAttribute("inverted");
       aMuxer.updateSearch();
     }
 
     function rightClickHandler(aEvent) {
       if (aEvent.button == 2) {
-        // Toggle isn't triggered by a contextmenu event, so do it here.
-        this.pressed = !this.pressed;
-
+        // A |toggle-button| sets up pressed and inverted in the constructor.
         let tagKey = this.getAttribute("value");
         let state = aMuxer.getFilterValueForMutation(TagFacetingFilter.name);
-        state.tags[tagKey] = this.pressed ? false : null;
-        if (this.pressed) {
-          this.setAttribute("inverted", "true");
-        } else {
-          this.removeAttribute("inverted");
-        }
+        state.tags[tagKey] = !this.pressed ? null : !this.inverted;
         aMuxer.updateSearch();
         aEvent.preventDefault();
       }
     }
@@ -917,19 +958,15 @@ var TagFacetingFilter = {
     while (tagbar.children.length > 1) {
       tagbar.lastElementChild.remove();
     }
 
-    let addCount = 0;
-
     // -- create an element for each tag
     let tags = MailServices.tags.getAllTags();
     let tagCount = tags.length;
     for (let iTag = 0; iTag < tagCount; iTag++) {
       let tag = tags[iTag];
 
       if (tag.key in keywordMap) {
-        addCount++;
-
         // Keep in mind that the XBL does not get built for dynamically created
         //  elements such as these until they get displayed, which definitely
         //  means not before we append it into the tree.
         let button = aDocument.createElement("button", { is: "toggle-button" });
@@ -938,11 +975,9 @@ var TagFacetingFilter = {
         button.addEventListener("click", clickHandler);
         button.addEventListener("contextmenu", rightClickHandler);
         if (keywordMap[tag.key] !== null) {
           button.pressed = true;
-          if (!keywordMap[tag.key]) {
-            button.setAttribute("inverted", "true");
-          }
+          button.inverted = keywordMap[tag.key] === false;
         }
         button.textContent = tag.tag;
         button.setAttribute("value", tag.key);
         let color = tag.color;
@@ -959,9 +994,8 @@ var TagFacetingFilter = {
         }
         tagbar.appendChild(button);
       }
     }
-    tagbar.hidden = !addCount;
   },
 };
 QuickFilterManager.defineFilter(TagFacetingFilter);
 
@@ -1060,16 +1094,19 @@ var MessageTextFilter = {
   appendTerms(aTermCreator, aTerms, aFilterValue) {
     let term, value;
 
     if (aFilterValue.text) {
+      const haveNegation = Object.entries(aFilterValue.states).some(
+        tfName => tfName[1] === false
+      );
       let phrases = this._parseSearchString(aFilterValue.text);
       for (let groupedPhrases of phrases) {
         let firstClause = true;
         term = null;
         let splitPhrases = groupedPhrases.split("|");
         for (let phrase of splitPhrases) {
           for (let [tfName, tfValue] of Object.entries(aFilterValue.states)) {
-            if (!tfValue) {
+            if (tfValue !== true && tfValue !== false) {
               continue;
             }
             let tfDef = this.textFilterDefs[tfName];
 
@@ -1078,11 +1115,13 @@ var MessageTextFilter = {
             value = term.value;
             value.attrib = tfDef.attrib;
             value.str = phrase;
             term.value = value;
-            term.op = Ci.nsMsgSearchOp.Contains;
-            // AND for the group, but OR inside the group
-            term.booleanAnd = firstClause;
+            term.op = tfValue
+              ? Ci.nsMsgSearchOp.Contains
+              : Ci.nsMsgSearchOp.DoesntContain;
+            // AND for the group, but OR inside the group -- unless negated.
+            term.booleanAnd = firstClause || (!firstClause && haveNegation);
             term.beginsGrouping = firstClause ? 1 : 0;
             aTerms.push(term);
             firstClause = false;
           }
@@ -1153,11 +1192,12 @@ var MessageTextFilter = {
     );
 
     // -- Expando Buttons!
     function commandHandler(aEvent) {
+      // There are three possible states: null, true, and false (inverted).
       let state = aMuxer.getFilterValueForMutation(MessageTextFilter.name);
       let filterDef = MessageTextFilter.textFilterDefsByDomId[this.id];
-      state.states[filterDef.name] = this.pressed;
+      state.states[filterDef.name] = !this.pressed ? null : !this.inverted;
       aMuxer.updateSearch();
       Services.xulStore.setValue(
         "chrome://messenger/content/messenger.xhtml",
         "quickFilter",
@@ -1170,8 +1210,11 @@ var MessageTextFilter = {
       let textFilter = this.textFilterDefs[name];
       aDocument
         .getElementById(textFilter.domId)
         .addEventListener("click", commandHandler);
+      aDocument
+        .getElementById(textFilter.domId)
+        .addEventListener("contextmenu", commandHandler);
     }
   },
 
   onCommand(aState, aNode, aEvent, aDocument) {
@@ -1244,10 +1287,12 @@ var MessageTextFilter = {
     // Update our expanded filters buttons.
     let states = aFilterValue.states;
     for (let name in this.textFilterDefs) {
       let textFilter = this.textFilterDefs[name];
-      aDocument.getElementById(textFilter.domId).pressed =
-        states[textFilter.name];
+      let button = aDocument.getElementById(textFilter.domId);
+      let state = states[textFilter.name];
+      button.pressed = state === true || state === false;
+      button.inverted = state === false;
     }
 
     // Toggle the expanded filters visibility.
     aDocument.getElementById("quick-filter-bar-filter-text-bar").hidden =
@@ -1318,9 +1363,9 @@ MessageTextFilter.defineTextFilter({
 MessageTextFilter.defineTextFilter({
   name: "body",
   domId: "qfb-qs-body",
   attrib: Ci.nsMsgSearchAttrib.Body,
-  defaultState: false,
+  defaultState: null,
 });
 
 /**
  * The results label says whether there were any matches and, if so, how many.
@@ -1359,8 +1404,10 @@ QuickFilterManager.defineFilter({
         count: aFilterValue,
       });
       aNode.style.visibility = "visible";
     }
+
+    aDocument.getElementById("qfb-info-icon").hidden = aFilterValue !== null;
   },
   /**
    * We slightly abuse the filtering hook to figure out how many messages there
    *  are and whether a filter is active.  What makes this reasonable is that
diff --git a/mail/themes/shared/mail/quickFilterBar.css b/mail/themes/shared/mail/quickFilterBar.css
--- a/mail/themes/shared/mail/quickFilterBar.css
+++ b/mail/themes/shared/mail/quickFilterBar.css
@@ -22,38 +22,64 @@
   background-color: color-mix(in srgb, var(--toolbar-bgcolor) 50%, transparent);
   color: var(--lwt-text-color);
 }
 
+.button.check-button {
+  --line-through-image: none;
+}
+
+.button.check-button[inverted],
+.qfb-tag-button[inverted] {
+  --line-through-image: linear-gradient(to bottom,
+                                        transparent 48%,
+                                        var(--line-through-color),
+                                        transparent 64%) !important;
+  --line-through-color: var(--color-red-50);
+  text-decoration: 2px line-through var(--line-through-color);
+}
+
 #qfb-sticky {
   background-image: var(--icon-pin);
-  height: auto;
+}
+
+#qfb-sticky[aria-pressed="false"]:enabled:not(:hover) {
+  border-color: transparent;
 }
 
 #qfb-unread {
-  background-image: var(--icon-unread);
+  background-image: var(--line-through-image), var(--icon-unread);
 }
 
 #qfb-starred {
-  background-image: var(--icon-star);
+  background-image: var(--line-through-image), var(--icon-star);
 }
 
 #qfb-inaddrbook {
-  background-image: var(--icon-address-book);
+  background-image: var(--line-through-image), var(--icon-address-book);
 }
 
 #qfb-tags {
-  background-image: var(--icon-tag);
+  background-image: var(--line-through-image), var(--icon-tag);
 }
 
 #qfb-attachment {
-  background-image: var(--icon-attachment);
+  background-image: var(--line-through-image), var(--icon-attachment);
 }
 
 #qfd-dropdown {
   background-image: var(--icon-filter);
   display: none;
 }
 
+#qfb-info-icon {
+  -moz-context-properties: fill, stroke;
+  margin: var(--button-margin);
+  content: var(--icon-info);
+  fill: transparent;
+  stroke: currentColor;
+  cursor: help;
+}
+
 #qfb-results-label {
   margin: 3px;
   color: var(--color-green-60);
   text-align: end;
@@ -94,8 +120,10 @@
 }
 
 #quickFilterBarTagsContainer:not([hidden]) {
   display: flex;
+  max-height: 5em;
+  overflow-y: auto;
   align-items: center;
   margin-inline-start: -3px;
   flex-wrap: wrap;
 }
@@ -104,8 +132,13 @@
   line-height: unset;
   min-height: 0;
   margin: 3px;
   padding-block: 3px;
+  background-color: transparent;
+}
+
+#qfb-boolean-mode:not([disabled="true"]):hover {
+  background-color: var(--button-active-background-color);
 }
 
 .qfb-tag-button {
   --tag-color: currentColor;
@@ -121,50 +154,65 @@
   min-width: 0;
   line-height: 1;
 }
 
-.qfb-tag-button:enabled:hover:not([aria-pressed="true"]) {
+.qfb-tag-button:enabled:hover {
   color: var(--tag-color);
   background-color: color-mix(in srgb, var(--tag-color) 20%, transparent);
   border-color: var(--tag-color);
 }
 
-.qfb-tag-button[aria-pressed="true"]:enabled:hover {
+.qfb-tag-button[aria-pressed="true"]:not([inverted]):enabled:hover {
   color: var(--tag-contrast-color);
   background-color: color-mix(in srgb, var(--tag-color) 70%, white);
   border-color: color-mix(in srgb, var(--tag-color) 60%, black);
 }
 
-.qfb-tag-button[aria-pressed="true"] {
+.qfb-tag-button[aria-pressed="true"]:not([inverted]) {
   --tag-color: currentColor;
   color: var(--tag-contrast-color);
   background-color: var(--tag-color);
-  border-color: color-mix(in srgb, var(--tag-color) 60%, black);
+  border-color: var(--tag-color);
   border-radius: 100px;
   box-shadow: none;
 }
 
-.qfb-tag-button:enabled:hover:active {
-  background-color: color-mix(in srgb, var(--tag-color) 80%, black);
-  border-color: color-mix(in srgb, var(--tag-color) 60%, black);
+/* Tags with no color (auto created) need this default */
+.qfb-tag-button[aria-pressed="true"]:not([style^="--tag-color:"]) {
+  --tag-color: black;
+  --tag-contrast-color: white;
 }
 
-.qfb-tag-button[inverted] {
-  background-color: transparent;
-  color: var(--tag-color);
-  border-color: var(--tag-color);
-  text-decoration: line-through;
-}
+@media (prefers-color-scheme: dark) {
+  .qfb-tag-button:not([aria-pressed="true"]) {
+    filter: invert(20%);
+  }
+  .qfb-tag-button[inverted]:not(:hover) {
+    color: var(--tag-contrast-color);
+    background-color: color-mix(in srgb, var(--tag-color) 70%, black);
+    border-color: color-mix(in srgb, var(--tag-color) 60%, black);
+  }
+  .qfb-tag-button[inverted]:enabled:hover {
+    color: var(--tag-contrast-color);
+    background-color: color-mix(in srgb, var(--tag-color) 70%, white);
+    border-color: color-mix(in srgb, var(--tag-color) 60%, black);
+  }
 
-.qfb-tag-button[inverted]:enabled:hover {
-  color: var(--tag-color);
-  background-color: color-mix(in srgb, var(--tag-color) 20%, transparent);
-  border-color: var(--tag-color);
+  /* Tags with black color (default for user created) need reverse in dark theme */
+  .qfb-tag-button:not([aria-pressed="true"])[style^="--tag-color: #000000"] {
+    --tag-color: currentColor !important;
+  }
+
+  .qfb-tag-button:enabled:hover:active {
+    background-color: color-mix(in srgb, var(--tag-color) 80%, black);
+    border-color: color-mix(in srgb, var(--tag-color) 60%, black);
+  }
 }
 
 #quickFilterBarContainer {
   display: flex;
   flex-wrap: wrap;
+  align-items: center;
 }
 
 #quickFilterBarSecondFilters {
   display: flex;
@@ -237,4 +285,8 @@
 
 #threadTree[filterActive="searching"] {
   background-position-x: calc(50% - 10px);
 }
+
+#threadTree[filterPending] tbody {
+  display: none;
+}
