# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1689713422 -7200
# Parent  71275ca6a20bf98309559abbd820b552dec8c2a2
Bug 1740956/1741093 - Print detached attachment's location in attachment list, correct size and indicate deleted attachments.

diff --git a/mail/themes/linux/mail/messageBody.css b/mail/themes/linux/mail/messageBody.css
--- a/mail/themes/linux/mail/messageBody.css
+++ b/mail/themes/linux/mail/messageBody.css
@@ -172,30 +172,34 @@ img[overflowing][shrinktofit] {
 
 .moz-mime-attachment-wrap {
   padding: 0 1em;
 }
 
 .moz-mime-attachment-table {
   width: 100%;
   border-collapse: collapse;
-  table-layout: fixed;
 }
 
 .moz-mime-attachment-table tr + tr > td {
   border-top: 1px solid GrayText;
   padding-top: 0.25em;
 }
 
 .moz-mime-attachment-file {
   word-wrap: break-word;
 }
 
 .moz-mime-attachment-size {
   vertical-align: top;
-  width: 10ch;
   text-align: right;
 }
 
+.moz-mime-attachment-url {
+  vertical-align: top;
+  text-align: left;
+}
+
 .moz-mime-attachment-file,
-.moz-mime-attachment-size {
+.moz-mime-attachment-size,
+.moz-mime-attachment-url {
   padding: 0 0 0.25em;
 }
diff --git a/mail/themes/osx/mail/messageBody.css b/mail/themes/osx/mail/messageBody.css
--- a/mail/themes/osx/mail/messageBody.css
+++ b/mail/themes/osx/mail/messageBody.css
@@ -174,30 +174,34 @@ img[overflowing][shrinktofit] {
 
 .moz-mime-attachment-wrap {
   padding: 0 1em;
 }
 
 .moz-mime-attachment-table {
   width: 100%;
   border-collapse: collapse;
-  table-layout: fixed;
 }
 
 .moz-mime-attachment-table tr + tr > td {
   border-top: 1px solid GrayText;
   padding-top: 0.25em;
 }
 
 .moz-mime-attachment-file {
   word-wrap: break-word;
 }
 
 .moz-mime-attachment-size {
   vertical-align: top;
-  width: 10ch;
   text-align: right;
 }
 
+.moz-mime-attachment-url {
+  vertical-align: top;
+  text-align: left;
+}
+
 .moz-mime-attachment-file,
-.moz-mime-attachment-size {
+.moz-mime-attachment-size,
+.moz-mime-attachment-url {
   padding: 0 0 0.25em;
 }
diff --git a/mail/themes/windows/mail/messageBody.css b/mail/themes/windows/mail/messageBody.css
--- a/mail/themes/windows/mail/messageBody.css
+++ b/mail/themes/windows/mail/messageBody.css
@@ -172,30 +172,34 @@ img[overflowing][shrinktofit] {
 
 .moz-mime-attachment-wrap {
   padding: 0 1em;
 }
 
 .moz-mime-attachment-table {
   width: 100%;
   border-collapse: collapse;
-  table-layout: fixed;
 }
 
 .moz-mime-attachment-table tr + tr > td {
   border-top: 1px solid GrayText;
   padding-top: 0.25em;
 }
 
 .moz-mime-attachment-file {
   word-wrap: break-word;
 }
 
 .moz-mime-attachment-size {
   vertical-align: top;
-  width: 10ch;
   text-align: right;
 }
 
+.moz-mime-attachment-url {
+  vertical-align: top;
+  text-align: left;
+}
+
 .moz-mime-attachment-file,
-.moz-mime-attachment-size {
+.moz-mime-attachment-size,
+.moz-mime-attachment-url {
   padding: 0 0 0.25em;
 }
diff --git a/mailnews/mime/emitters/nsMimeBaseEmitter.cpp b/mailnews/mime/emitters/nsMimeBaseEmitter.cpp
--- a/mailnews/mime/emitters/nsMimeBaseEmitter.cpp
+++ b/mailnews/mime/emitters/nsMimeBaseEmitter.cpp
@@ -295,17 +295,18 @@ nsMimeBaseEmitter::GetOutputListener(nsI
   NS_IF_ADDREF(*listener = mOutListener);
   return NS_OK;
 }
 
 // Attachment handling routines
 nsresult nsMimeBaseEmitter::StartAttachment(const nsACString& name,
                                             const char* contentType,
                                             const char* url,
-                                            bool aIsExternalAttachment) {
+                                            bool aIsExternalAttachment,
+                                            bool aIsDeleted) {
   // Ok, now we will setup the attachment info
   mCurrentAttachment = (attachmentInfoType*)PR_NEWZAP(attachmentInfoType);
   if ((mCurrentAttachment) && mAttachArray) {
     ++mAttachCount;
 
     mCurrentAttachment->displayName = ToNewCString(name);
     mCurrentAttachment->urlSpec = strdup(url);
     mCurrentAttachment->contentType = strdup(contentType);
diff --git a/mailnews/mime/emitters/nsMimeHtmlEmitter.cpp b/mailnews/mime/emitters/nsMimeHtmlEmitter.cpp
--- a/mailnews/mime/emitters/nsMimeHtmlEmitter.cpp
+++ b/mailnews/mime/emitters/nsMimeHtmlEmitter.cpp
@@ -289,18 +289,20 @@ nsresult nsMimeHtmlDisplayEmitter::EndHe
   WriteHTMLHeaders(name);
 
   return NS_OK;
 }
 
 nsresult nsMimeHtmlDisplayEmitter::StartAttachment(const nsACString& name,
                                                    const char* contentType,
                                                    const char* url,
-                                                   bool aIsExternalAttachment) {
+                                                   bool aIsExternalAttachment,
+                                                   bool aIsDeleted) {
   nsresult rv = NS_OK;
+  mIsDeleted = aIsDeleted;
 
   nsCString uriString;
 
   nsCOMPtr<nsIMsgMessageUrl> msgurl(do_QueryInterface(mURL, &rv));
   if (NS_SUCCEEDED(rv)) {
     // HACK: news urls require us to use the originalSpec. Everyone
     // else uses GetURI to get the RDF resource which describes the message.
     nsCOMPtr<nsINntpUrl> nntpUrl(do_QueryInterface(mURL, &rv));
@@ -389,50 +391,72 @@ nsresult nsMimeHtmlDisplayEmitter::Start
     UtilityWrite("</fieldset>");
     UtilityWrite("<div class=\"moz-mime-attachment-wrap moz-print-only\">");
     UtilityWrite("<table class=\"moz-mime-attachment-table\">");
   }
 
   UtilityWrite("<tr>");
 
   UtilityWrite("<td class=\"moz-mime-attachment-file\">");
+  if (mIsDeleted) UtilityWrite("<strike>");
   nsCString escapedName;
   nsAppendEscapedHTML(name, escapedName);
   UtilityWrite(escapedName.get());
+  if (mIsDeleted) UtilityWrite("</strike>");
   UtilityWrite("</td>");
 
   mFirst = false;
   return NS_OK;
 }
 
 nsresult nsMimeHtmlDisplayEmitter::AddAttachmentField(const char* field,
                                                       const char* value) {
   if (mSkipAttachment) return NS_OK;
 
   // Don't let bad things happen
   if (!value || !*value) return NS_OK;
 
-  // Don't output this ugly header...
-  if (!strcmp(field, HEADER_X_MOZILLA_PART_URL)) return NS_OK;
-
   nsCOMPtr<nsIMailChannel> mailChannel = do_QueryInterface(mChannel);
   if (mailChannel) {
     mailChannel->AddAttachmentFieldFromMIME(nsDependentCString(field),
                                             nsDependentCString(value));
   }
 
-  // Currently, we only care about the part size.
-  if (strcmp(field, HEADER_X_MOZILLA_PART_SIZE)) return NS_OK;
-
-  uint64_t size = atoi(value);
-  nsAutoString sizeString;
-  FormatFileSize(size, false, sizeString);
-  UtilityWrite("<td class=\"moz-mime-attachment-size\">");
-  UtilityWrite(NS_ConvertUTF16toUTF8(sizeString).get());
-  UtilityWrite("</td>");
+  if (strcmp(field, HEADER_X_MOZILLA_PART_SIZE) == 0) {
+    if (strcmp(value, " ") != 0 && strcmp(value, "-") != 0) {
+      uint64_t size = atoi(value);
+      nsAutoString sizeString;
+      FormatFileSize(size, false, sizeString);
+      UtilityWrite("<td class=\"moz-mime-attachment-size\">");
+      UtilityWrite(NS_ConvertUTF16toUTF8(sizeString).get());
+      UtilityWrite("</td>");
+    } else {
+      UtilityWrite("<td class=\"moz-mime-attachment-size\">");
+      UtilityWrite(value);
+      UtilityWrite("</td>");
+    }
+  } else if (strcmp(field, HEADER_X_MOZILLA_PART_URL) == 0) {
+    // Only output this for detached and external attachments.
+    if (strncmp(value, "file://", 7) == 0 ||
+        strncmp(value, "http://", 7) == 0 ||
+        strncmp(value, "https://", 8) == 0) {
+      UtilityWrite("<td class=\"moz-mime-attachment-url\">");
+      if (mIsDeleted) UtilityWrite("<strike>");
+      nsAutoCString val(value);
+      int query = val.RFind("?part=");
+      if (query != kNotFound) val.SetLength(query);
+      nsAutoCString unescaped;
+      MsgUnescapeString(val, 0, unescaped);
+      UtilityWrite(unescaped.get());
+      if (mIsDeleted) UtilityWrite("</strike>");
+      UtilityWrite("</td>");
+    } else {
+      UtilityWrite("<td>&nbsp;</td>");
+    }
+  }
 
   return NS_OK;
 }
 
 nsresult nsMimeHtmlDisplayEmitter::EndAttachment() {
   if (!mSkipAttachment) {
     UtilityWrite("</tr>");
   }
diff --git a/mailnews/mime/emitters/nsMimeHtmlEmitter.h b/mailnews/mime/emitters/nsMimeHtmlEmitter.h
--- a/mailnews/mime/emitters/nsMimeHtmlEmitter.h
+++ b/mailnews/mime/emitters/nsMimeHtmlEmitter.h
@@ -16,34 +16,35 @@ class nsMimeHtmlDisplayEmitter : public 
 
   virtual ~nsMimeHtmlDisplayEmitter(void);
 
   // Header handling routines.
   NS_IMETHOD EndHeader(const nsACString& name) override;
 
   // Attachment handling routines
   NS_IMETHOD StartAttachment(const nsACString& name, const char* contentType,
-                             const char* url,
-                             bool aIsExternalAttachment) override;
+                             const char* url, bool aIsExternalAttachment,
+                             bool aIsDeleted) override;
   NS_IMETHOD AddAttachmentField(const char* field, const char* value) override;
   NS_IMETHOD EndAttachment() override;
   NS_IMETHOD EndAllAttachments() override;
 
   // Body handling routines
   NS_IMETHOD WriteBody(const nsACString& buf, uint32_t* amountWritten) override;
   NS_IMETHOD EndBody() override;
   NS_IMETHOD WriteHTMLHeaders(const nsACString& name) override;
 
   virtual nsresult WriteHeaderFieldHTMLPrefix(const nsACString& name) override;
   virtual nsresult WriteHeaderFieldHTML(const char* field,
                                         const char* value) override;
   virtual nsresult WriteHeaderFieldHTMLPostfix() override;
 
  protected:
   bool mFirst;           // Attachment flag...
+  bool mIsDeleted;       // This attachment is deleted, strike it.
   bool mSkipAttachment;  // attachments we shouldn't show...
 
   nsresult StartAttachmentInBody(const nsACString& name,
                                  const char* contentType, const char* url);
 
   nsresult BroadcastHeaders(int32_t aHeaderMode);
 };
 
diff --git a/mailnews/mime/emitters/nsMimeXmlEmitter.cpp b/mailnews/mime/emitters/nsMimeXmlEmitter.cpp
--- a/mailnews/mime/emitters/nsMimeXmlEmitter.cpp
+++ b/mailnews/mime/emitters/nsMimeXmlEmitter.cpp
@@ -123,17 +123,18 @@ nsresult nsMimeXmlEmitter::EndHeader(con
   UtilityWrite("</mailheader>");
   return NS_OK;
 }
 
 // Attachment handling routines
 nsresult nsMimeXmlEmitter::StartAttachment(const nsACString& name,
                                            const char* contentType,
                                            const char* url,
-                                           bool aIsExternalAttachment) {
+                                           bool aIsExternalAttachment,
+                                           bool aIsDeleted) {
   char buf[128];
 
   ++mAttachCount;
 
   sprintf(buf, "<mailattachment id=\"%d\">", mAttachCount);
   UtilityWrite(buf);
 
   AddAttachmentField(HEADER_PARM_FILENAME, PromiseFlatCString(name).get());
diff --git a/mailnews/mime/emitters/nsMimeXmlEmitter.h b/mailnews/mime/emitters/nsMimeXmlEmitter.h
--- a/mailnews/mime/emitters/nsMimeXmlEmitter.h
+++ b/mailnews/mime/emitters/nsMimeXmlEmitter.h
@@ -19,18 +19,18 @@ class nsMimeXmlEmitter : public nsMimeBa
   // Header handling routines.
   NS_IMETHOD StartHeader(bool rootMailHeader, bool headerOnly,
                          const char* msgID, const char* outCharset) override;
   NS_IMETHOD AddHeaderField(const char* field, const char* value) override;
   NS_IMETHOD EndHeader(const nsACString& buf) override;
 
   // Attachment handling routines
   NS_IMETHOD StartAttachment(const nsACString& name, const char* contentType,
-                             const char* url,
-                             bool aIsExternalAttachment) override;
+                             const char* url, bool aIsExternalAttachment,
+                             bool aIsDeleted) override;
   NS_IMETHOD AddAttachmentField(const char* field, const char* value) override;
   NS_IMETHOD EndAttachment() override;
 
   NS_IMETHOD WriteXMLHeader(const char* msgID);
   NS_IMETHOD WriteXMLTag(const char* tagName, const char* value);
 
  protected:
   // For header determination...
diff --git a/mailnews/mime/public/nsIMimeEmitter.idl b/mailnews/mime/public/nsIMimeEmitter.idl
--- a/mailnews/mime/public/nsIMimeEmitter.idl
+++ b/mailnews/mime/public/nsIMimeEmitter.idl
@@ -57,17 +57,17 @@ interface nsIMimeEmitter : nsISupports {
      */
     void endHeader([const] in AUTF8String name);
 
     void updateCharacterSet([const] in string aCharset);
 
     // Attachment handling routines.
     void startAttachment([const] in AUTF8String name,
                          [const] in string contentType,
-                         [const] in string url, in boolean aNotDownloaded);
+                         [const] in string url, in boolean aNotDownloaded, in boolean aIsDeleted);
     void addAttachmentField([const] in string field, [const] in string value);
     void endAttachment();
 
     void endAllAttachments();
 
     // Body handling routines.
     void startBody(in boolean bodyOnly, [const] in string msgID, [const] in string outCharset);
     void writeBody([const] in AUTF8String buf, out uint32_t amountWritten);
diff --git a/mailnews/mime/src/mimemoz2.cpp b/mailnews/mime/src/mimemoz2.cpp
--- a/mailnews/mime/src/mimemoz2.cpp
+++ b/mailnews/mime/src/mimemoz2.cpp
@@ -20,16 +20,17 @@
 #include "prmem.h"
 #include "plstr.h"
 #include "prmem.h"
 #include "mimemoz2.h"
 #include "nsIPrefService.h"
 #include "nsIPrefBranch.h"
 #include "nsIStringBundle.h"
 #include "nsString.h"
+#include "nsIFileURL.h"
 #include "nsMimeStringResources.h"
 #include "nsStreamConverter.h"
 #include "nsIMsgMailNewsUrl.h"
 #include "mozITXTToHTMLConv.h"
 #include "nsCExternalHandlerService.h"
 #include "nsIMIMEService.h"
 #include "nsIImapUrl.h"
 #include "nsMsgI18N.h"
@@ -649,19 +650,53 @@ extern "C" void NotifyEmittersOfAttachme
     if (tmp->m_isExternalLinkAttachment)
       sizeStr.Append(tmp->m_sizeExternalStr);
     else
       sizeStr.AppendInt(tmp->m_size);
 
     nsAutoCString downloadedStr;
     downloadedStr.AppendInt(tmp->m_isDownloaded);
 
+    // Calculate size based on the URL.
+    bool isDeleted = false;
+    if (tmp->m_realType.Find("/x-moz-deleted"_ns) != kNotFound) {
+      sizeStr = "-";
+      isDeleted = true;
+    }
+    if (StringBeginsWith(spec, "file://"_ns)) {
+      // Get the size from the file.
+      sizeStr = " ";
+      nsCOMPtr<nsIFileURL> fileURL = do_QueryInterface(tmp->m_url);
+      if (fileURL) {
+        nsCOMPtr<nsIFile> file;
+        fileURL->GetFile(getter_AddRefs(file));
+        if (file) {
+          bool exists = false;
+          file->Exists(&exists);
+          if (exists) {
+            int64_t fileSize = 0;
+            file->GetFileSize(&fileSize);
+            sizeStr.Truncate();
+            sizeStr.AppendInt(fileSize);
+          } else {
+            sizeStr = "-";
+            isDeleted = true;
+          }
+        }
+      }
+    } else if (StringBeginsWith(spec, "http://"_ns) ||
+               StringBeginsWith(spec, "https://"_ns)) {
+      // Don't show unknown size (and as far as we saw, it's always unknown
+      // here).
+      if (sizeStr.Equals("-1")) sizeStr = " ";
+    }
+
     mimeEmitterStartAttachment(opt, tmp->m_realName.get(),
                                tmp->m_realType.get(), spec.get(),
-                               tmp->m_isExternalAttachment);
+                               tmp->m_isExternalAttachment, isDeleted);
     mimeEmitterAddAttachmentField(opt, HEADER_X_MOZILLA_PART_URL, spec.get());
     mimeEmitterAddAttachmentField(opt, HEADER_X_MOZILLA_PART_SIZE,
                                   sizeStr.get());
     mimeEmitterAddAttachmentField(opt, HEADER_X_MOZILLA_PART_DOWNLOADED,
                                   downloadedStr.get());
 
     if ((opt->format_out == nsMimeOutput::nsMimeMessageQuoting) ||
         (opt->format_out == nsMimeOutput::nsMimeMessageBodyQuoting) ||
@@ -1517,31 +1552,29 @@ extern "C" nsresult mimeEmitterAddAllHea
     nsIMimeEmitter* emitter = (nsIMimeEmitter*)msd->output_emitter;
     return emitter->AddAllHeaders(
         Substring(allheaders, allheaders + allheadersize));
   }
 
   return NS_ERROR_FAILURE;
 }
 
-extern "C" nsresult mimeEmitterStartAttachment(MimeDisplayOptions* opt,
-                                               const char* name,
-                                               const char* contentType,
-                                               const char* url,
-                                               bool aIsExternalAttachment) {
+extern "C" nsresult mimeEmitterStartAttachment(
+    MimeDisplayOptions* opt, const char* name, const char* contentType,
+    const char* url, bool aIsExternalAttachment, bool aIsDeleted) {
   // Check for draft processing...
   if (NoEmitterProcessing(opt->format_out)) return NS_OK;
 
   mime_stream_data* msd = GetMSD(opt);
   if (!msd) return NS_ERROR_FAILURE;
 
   if (msd->output_emitter) {
     nsIMimeEmitter* emitter = (nsIMimeEmitter*)msd->output_emitter;
     return emitter->StartAttachment(nsDependentCString(name), contentType, url,
-                                    aIsExternalAttachment);
+                                    aIsExternalAttachment, aIsDeleted);
   }
 
   return NS_ERROR_FAILURE;
 }
 
 extern "C" nsresult mimeEmitterEndAttachment(MimeDisplayOptions* opt) {
   // Check for draft processing...
   if (NoEmitterProcessing(opt->format_out)) return NS_OK;
diff --git a/mailnews/mime/src/mimemoz2.h b/mailnews/mime/src/mimemoz2.h
--- a/mailnews/mime/src/mimemoz2.h
+++ b/mailnews/mime/src/mimemoz2.h
@@ -146,21 +146,19 @@ extern "C" nsresult mimeEmitterAddAttach
                                                   const char* field,
                                                   const char* value);
 extern "C" nsresult mimeEmitterAddHeaderField(MimeDisplayOptions* opt,
                                               const char* field,
                                               const char* value);
 extern "C" nsresult mimeEmitterAddAllHeaders(MimeDisplayOptions* opt,
                                              const char* allheaders,
                                              const int32_t allheadersize);
-extern "C" nsresult mimeEmitterStartAttachment(MimeDisplayOptions* opt,
-                                               const char* name,
-                                               const char* contentType,
-                                               const char* url,
-                                               bool aIsExternalAttachment);
+extern "C" nsresult mimeEmitterStartAttachment(
+    MimeDisplayOptions* opt, const char* name, const char* contentType,
+    const char* url, bool aIsExternalAttachment, bool aIsDeleted);
 extern "C" nsresult mimeEmitterEndAttachment(MimeDisplayOptions* opt);
 extern "C" nsresult mimeEmitterEndAllAttachments(MimeDisplayOptions* opt);
 extern "C" nsresult mimeEmitterStartBody(MimeDisplayOptions* opt, bool bodyOnly,
                                          const char* msgID,
                                          const char* outCharset);
 extern "C" nsresult mimeEmitterEndBody(MimeDisplayOptions* opt);
 extern "C" nsresult mimeEmitterEndHeader(MimeDisplayOptions* opt,
                                          MimeObject* obj);
