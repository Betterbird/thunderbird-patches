# HG changeset patch
# User alta88@fixall.com
# Date 1709828324 -3600
# Parent  39273903dc16e1996cc2f4f12f579f87143cc601
Fix feed vandalization, Part III - getFavicon() fix
- do not require places history to be enabled
- improve getting favicons, handle edge cases
- check well known favicon.ico location last

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -4135,9 +4135,12 @@ class FolderTreeRow extends HTMLLIElemen
         this.icon.style = "";
       } else {
         let urls = FeedUtils.getFeedUrlsInFolder(folder);
         let url = urls[0];
-        this.icon.style = `background-image: url("page-icon:${url}"); fill: unset;`;
+        let favicon = FeedUtils.getStatus(folder, url).favicon;
+        this.icon.style = favicon
+          ? `background-image: url("${favicon}"); fill: unset;`
+          : "";
       }
     } else {
       this.icon.style = "";
       delete this.dataset.isFeedFolder;
diff --git a/mailnews/extensions/newsblog/FeedUtils.jsm b/mailnews/extensions/newsblog/FeedUtils.jsm
--- a/mailnews/extensions/newsblog/FeedUtils.jsm
+++ b/mailnews/extensions/newsblog/FeedUtils.jsm
@@ -15,9 +15,8 @@ const { MailServices } = ChromeUtils.imp
 const lazy = {};
 
 ChromeUtils.defineESModuleGetters(lazy, {
   JSONFile: "resource://gre/modules/JSONFile.sys.mjs",
-  PlacesUtils: "resource://gre/modules/PlacesUtils.sys.mjs",
 });
 
 XPCOMUtils.defineLazyModuleGetters(lazy, {
   Feed: "resource:///modules/Feed.jsm",
@@ -925,10 +924,9 @@ var FeedUtils = {
    */
   async getFavicon(folder, feedURL) {
     if (
       !Services.prefs.getBoolPref("browser.chrome.site_icons") ||
-      !Services.prefs.getBoolPref("browser.chrome.favicons") ||
-      !Services.prefs.getBoolPref("places.history.enabled")
+      !Services.prefs.getBoolPref("browser.chrome.favicons")
     ) {
       return "";
     }
 
@@ -949,46 +947,36 @@ var FeedUtils = {
       url = feed.link && feed.link.startsWith("http") ? feed.link : url;
     }
 
     /**
-     * Convert a Blob to data URL.
-     * @param {Blob} blob - Blob to convert.
-     * @returns {string} data URL.
-     */
-    let blobToBase64 = blob => {
-      return new Promise((resolve, reject) => {
-        let reader = new FileReader();
-        reader.onloadend = () => {
-          if (reader.result.endsWith("base64,")) {
-            reject(new Error(`Invalid blob encountered.`));
-            return;
-          }
-          resolve(reader.result);
-        };
-        reader.readAsDataURL(blob);
-      });
-    };
-
-    /**
      * Try getting favicon from url.
      * @param {string} url - The favicon url.
-     * @returns {Blob} - Existing favicon.
+     * @returns {string} - Existing favicon url.
      */
     let fetchFavicon = async url => {
       let response = await fetch(url);
       if (!response.ok) {
         throw new Error(`No favicon for url ${url}`);
       }
-      if (!/^image\//i.test(response.headers.get("Content-Type"))) {
-        throw new Error(`Non-image favicon for ${url}`);
+      let contentType = response.headers.get("Content-Type");
+      let contentLength = response.headers.get("Content-Length");
+      let contentEncoding = response.headers.get("Content-Encoding");
+      if (
+        (contentType.startsWith("image/") ||
+          (contentType.startsWith("text/plain") &&
+            contentEncoding == "gzip")) &&
+        (contentLength == null || contentLength > 68)
+      ) {
+        return url;
       }
-      return response.blob();
+
+      throw new Error(`Non-image or broken favicon for ${url}`);
     };
 
     /**
      * Try getting favicon from the a html page.
      * @param {string} page - The page url to check.
-     * @returns {Blob} - Found favicon.
+     * @returns {string} - Found favicon url.
      */
     let discoverFaviconURL = async page => {
       let response = await fetch(page);
       if (!response.ok) {
@@ -996,61 +984,57 @@ var FeedUtils = {
       }
       if (!/^text\/html/i.test(response.headers.get("Content-Type"))) {
         throw new Error(`No page to get favicon from for ${page}`);
       }
-      let doc = new DOMParser().parseFromString(
-        await response.text(),
-        "text/html"
-      );
+
+      let content = await response.text();
+
+      // Add a <base> tag, if missing, to silence relative url resolve
+      // failure warnings in DOMParser().
+      let head = content.split("<head>")[1]?.split("</head>")[0];
+      if (head && !head.includes("<base")) {
+        content = content.replace ("<head>", `<head><base href="${page}">`);
+        FeedUtils.log.debug(
+          "discoverFaviconURL: added <base> to - " + page
+        );
+      }
+
+      let doc = new DOMParser().parseFromString(content, "text/html");
       let iconLink = doc.querySelector(
         `link[rel~='icon']:is([sizes~='any'],[sizes~='16x16' i],[sizes~='32x32' i],:not([sizes])`
       );
-      if (!iconLink) {
-        throw new Error(`No iconLink discovered for page=${page}`);
+      if (!iconLink || !iconLink.href) {
+        throw new Error(`No iconLink or href discovered for page=${page}`);
+      }
+      if (/^https?:/.test(iconLink.href)) {
+        return iconLink.href;
       }
-      return /^https?:/.test(iconLink.href)
-        ? iconLink.href
-        : new URL(page).origin + iconLink.href;
+      let iconURI = new URL(page);
+      if (/^\/\//.test(iconLink.href)) {
+        return iconURI.protocol + iconLink.href;
+      }
+      return iconURI.origin + iconLink.href.replace(/^[.]*/, "");
     };
 
+    this.log.debug("getFavicon: folder:feed url - " + folder.name + ":" + url);
+
     let uri = Services.io.newURI(url);
-    let iconURL = await fetchFavicon(uri.prePath + "/favicon.ico")
-      .then(blobToBase64)
+    let iconURL = await discoverFaviconURL(uri.prePath)
+      .then(fetchFavicon)
       .catch(e => {
-        return discoverFaviconURL(url)
-          .catch(() => discoverFaviconURL(uri.prePath))
-          .then(fetchFavicon)
-          .then(blobToBase64)
-          .catch(() => "");
+        this.log.trace("getFavicon: Error - " + e);
+        return fetchFavicon(uri.prePath + "/favicon.ico").catch(e => {
+          this.log.trace("getFavicon: Error - " + e);
+          return "";
+        });
       });
 
-    if (!iconURL) {
-      return "";
-    }
+    this.log.debug(
+      "getFavicon: folder:favicon url - " + folder.name + ":" + iconURL
+    );
 
-    // setAndFetchFaviconForPage needs the url to be in the database first.
-    await lazy.PlacesUtils.history.insert({
-      url: feedURL,
-      visits: [
-        {
-          date: new Date(),
-        },
-      ],
-    });
-    return new Promise(resolve => {
-      // All good. Now store iconURL for future usage.
-      lazy.PlacesUtils.favicons.setAndFetchFaviconForPage(
-        Services.io.newURI(feedURL),
-        Services.io.newURI(iconURL),
-        true,
-        lazy.PlacesUtils.favicons.FAVICON_LOAD_NON_PRIVATE,
-        faviconURI => {
-          resolve(faviconURI.spec);
-        },
-        Services.scriptSecurityManager.getSystemPrincipal()
-      );
-      Services.obs.notifyObservers(folder, "folder-properties-changed");
-    });
+    FeedUtils.setStatus(folder, feedURL, "favicon", iconURL);
+    return iconURL;
   },
 
   /**
    * Update the feeds database for rename and move/copy folder name changes.
