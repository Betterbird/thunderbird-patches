# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1709828280 -3600
# Parent  eb41d6e23e19c9d7d9bc86be95b4cd16da4275a2
Feature: Linux systray: Tweaks for compiling/linking.

Adjust #include <libayatana-indicator/indicator-desktop-shortcuts.h> in app-indicator.c
Removed code related to PROP_DBUS_MENU_SERVER, 2x in app-indicator.c.

diff --git a/third_party/appindicator/app-indicator.c b/third_party/appindicator/app-indicator.c
--- a/third_party/appindicator/app-indicator.c
+++ b/third_party/appindicator/app-indicator.c
@@ -40,11 +40,11 @@ License version 3 and version 2.1 along 
 #include <libdbusmenu-glib/server.h>
 #include <libdbusmenu-gtk/client.h>
 #include <libdbusmenu-gtk/parser.h>
 
-#include <libayatana-indicator/indicator-desktop-shortcuts.h>
-
-#include <stdlib.h>
+#include "indicator-desktop-shortcuts.h"
+
+#include <string.h>
 
 #include "app-indicator.h"
 #include "app-indicator-enum-types.h"
 #include "application-service-marshal.h"
@@ -477,15 +477,17 @@ app_indicator_class_init (AppIndicatorCl
      *
      * A way to get the internal dbusmenu server if it is available.
      * This should only be used for testing.
      */
+    /*
     g_object_class_install_property(object_class,
                                     PROP_DBUS_MENU_SERVER,
                                     g_param_spec_object (PROP_DBUS_MENU_SERVER_S,
                                                          "The internal DBusmenu Server",
                                                          "DBusmenu server which is available for testing the application indicators.",
                                                          DBUSMENU_TYPE_SERVER,
                                                          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+    */
     /**
      * AppIndicator:title:
      *
      * Provides a way to refer to this application indicator in a human
@@ -1043,12 +1045,14 @@ G_GNUC_END_IGNORE_DEPRECATIONS
         case PROP_ORDERING_INDEX:
           priv->ordering_index = g_value_get_uint(value);
           break;
 
+        /*
         case PROP_DBUS_MENU_SERVER:
             g_clear_object (&priv->menuservice);
             priv->menuservice = DBUSMENU_SERVER (g_value_dup_object(value));
             break;
+        */
 
         case PROP_MENU:
             g_clear_object (&priv->menu);
             priv->menu = GTK_WIDGET (g_value_dup_object(value));
@@ -2130,15 +2134,16 @@ static gchar *
 append_snap_prefix (const gchar *path)
 {
     gint i;
     const gchar *snap = get_snap_prefix ();
-    g_autofree gchar *canon_path = NULL;
+    gchar *canon_path = NULL;
 
     if (snap != NULL && path != NULL) {
         canon_path = realpath(path, NULL);
 
         if (g_str_has_prefix (canon_path, "/tmp/")) {
             g_warning ("Using '/tmp' paths in SNAP environment will lead to unreadable resources");
+            g_free (canon_path);
             return NULL;
         }
 
         if (g_str_has_prefix (canon_path, snap) ||
@@ -2146,18 +2151,20 @@ append_snap_prefix (const gchar *path)
             g_str_has_prefix (canon_path, g_get_user_cache_dir ()) ||
             g_str_has_prefix (canon_path, g_get_user_config_dir ()) ||
             g_str_has_prefix (canon_path, g_get_user_data_dir ()) ||
             g_str_has_prefix (canon_path, g_get_user_runtime_dir ())) {
-            return g_strdup (canon_path);
+            return canon_path;
         }
 
         for (i = 0; i < G_USER_N_DIRECTORIES; ++ i) {
             if (g_str_has_prefix (canon_path, g_get_user_special_dir (i))) {
-                return g_strdup (canon_path);
+                return canon_path;
             }
         }
 
-        return g_build_path (G_DIR_SEPARATOR_S, snap, canon_path, NULL);
+        gchar *p = g_build_path (G_DIR_SEPARATOR_S, snap, canon_path, NULL);
+        g_free (canon_path);
+        return p;
     }
 
     return NULL;
 }
