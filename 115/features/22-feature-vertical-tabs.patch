# HG changeset patch
# User alta88@fixall.com
# Date 1709830391 -3600
# Parent  99caf5c352435112d944a2b0063780919d766ceb
Feature: Vertical Tabs

Authored by Alta88 and contributed to the Betterbird Project.
See https://github.com/Betterbird/thunderbird-patches/blob/main/LICENSE for license details.
All uses require attribution to the Author.
* * *
Tabs key navigation
* * *
Reveal tabs on mail-tabs-session-restored complete

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -566,8 +566,10 @@ pref("mail.tabs.tabMaxWidth", 250);
 pref("mail.tabs.tabClipWidth", 140);
 pref("mail.tabs.autoHide", true);
 pref("mail.tabs.closeWindowWithLastTab", true);
 pref("mail.tabs.firstTab.startupURI", "");
+pref("mail.tabs.vertical", false);
+pref("mail.tabs.alwaysShowCloseButton", true);
 
 // Allow the tabs to be in the titlebar on supported systems
 pref("mail.tabs.drawInTitlebar", true);
 
diff --git a/mail/base/content/messenger.js b/mail/base/content/messenger.js
--- a/mail/base/content/messenger.js
+++ b/mail/base/content/messenger.js
@@ -751,11 +751,11 @@ function getWindowStateForSessionPersist
  * @returns true if the restoration was successful, false otherwise.
  */
 async function atStartupRestoreTabs(aDontRestoreFirstTab) {
   let state = await SessionStoreManager.loadingWindow(window);
+  let tabmail = document.getElementById("tabmail");
   if (state) {
     let tabsState = state.tabs;
-    let tabmail = document.getElementById("tabmail");
     try {
       tabmail.restoreTabs(tabsState, aDontRestoreFirstTab);
     } catch (e) {
       console.error(e);
@@ -766,8 +766,9 @@ async function atStartupRestoreTabs(aDon
   loadExtraTabs();
 
   // Note: The tabs have not finished loading at this point.
   SessionStoreManager._restored = true;
+  tabmail.tabContainer.showTabs(true);
   Services.obs.notifyObservers(window, "mail-tabs-session-restored");
 
   return !!state;
 }
diff --git a/mail/base/content/messenger.xhtml b/mail/base/content/messenger.xhtml
--- a/mail/base/content/messenger.xhtml
+++ b/mail/base/content/messenger.xhtml
@@ -485,9 +485,11 @@
 #include messenger-titlebar-items.inc.xhtml
       </toolbar>
       <html:unified-toolbar></html:unified-toolbar>
 
-      <toolbar id="tabs-toolbar" class="chromeclass-toolbar">
+      <toolbar id="tabs-toolbar"
+               class="chromeclass-toolbar"
+               collapsed="true">
         <tabs is="tabmail-tabs" id="tabmail-tabs"
               flex="1"
               align="end"
               setfocus="false"
@@ -529,8 +531,16 @@
   <!-- XXX This extension point (tabmail-container) is only temporary!
        Horizontal space shouldn't be wasted if it isn't absolutely critical.
        A mechanism for adding sidebar panes will be added in bug 476154. -->
   <hbox id="tabmail-container" flex="1">
+    <hbox id="vertical-tabs-container"
+          collapsed="true"
+          persist="width">
+      <vbox id="vertical-tabs-toolbox"/>
+    </hbox>
+    <splitter id="vertical-tabs-splitter"
+              collapse="before"
+              collapsed="true"/>
     <!-- Beware!  Do NOT use overlays to append nodes directly to tabmail (children
          of tabmail is OK though). This will break Ctrl-tab switching because
          the Custom Element will choke when it finds a child of tabmail that is
          not a tabpanels node. -->
diff --git a/mail/base/content/tabmail.js b/mail/base/content/tabmail.js
--- a/mail/base/content/tabmail.js
+++ b/mail/base/content/tabmail.js
@@ -21,12 +21,14 @@ var { UIFontSize } = ChromeUtils.import(
    * @implements {EventListener}
    */
   class MozTabmailAlltabsMenuPopup extends MozElements.MozMenuPopup {
     connectedCallback() {
-      if (this.delayConnectedCallback() || this.hasChildNodes()) {
+      if (this.delayConnectedCallback() || this.hasConnected) {
         return;
       }
 
+      this.hasConnected = true;
+
       this.tabmail = document.getElementById("tabmail");
 
       this._mutationObserver = new MutationObserver((records, observer) => {
         records.forEach(mutation => {
diff --git a/mail/base/content/widgets/tabmail-tab.js b/mail/base/content/widgets/tabmail-tab.js
--- a/mail/base/content/widgets/tabmail-tab.js
+++ b/mail/base/content/widgets/tabmail-tab.js
@@ -98,21 +98,58 @@
       closeButton.addEventListener("click", () =>
         document.getElementById("tabmail").removeTabByNode(this)
       );
 
+      closeButton.addEventListener("blur", () => (closeButton.tabIndex = -1));
+
+      // Set the focus to the tab node for the next tab to be focused.
+      closeButton.addEventListener(
+        "keydown",
+        event => {
+          if (
+            event.ctrlKey ||
+            event.altKey ||
+            event.metaKey ||
+            event.shiftKey
+          ) {
+            return;
+          }
+
+          if (
+            [
+              KeyEvent.DOM_VK_LEFT,
+              KeyEvent.DOM_VK_RIGHT,
+              KeyEvent.DOM_VK_UP,
+              KeyEvent.DOM_VK_DOWN,
+            ].includes(event.keyCode)
+          ) {
+            event.target.closest(".tabmail-tab").focus();
+          }
+        },
+        { capture: true }
+      );
+
       // Middle mouse button click on the tab also closes it.
       this.addEventListener("click", event => {
         if (event.button != 1) {
           return;
         }
         document.getElementById("tabmail").removeTabByNode(this);
       });
 
+      // Enable tab to close button on key focus. Hidden when not focused.
+      this.addEventListener("focus", () => (closeButton.tabIndex = 0));
+
+      this.addEventListener("blur", () => (closeButton.tabIndex = -1));
+
       this.setAttribute("context", "tabContextMenu");
 
       this.mCorrespondingMenuitem = null;
 
       this.initializeAttributeInheritance();
+
+      // Set the container property for key scrolling. Bug 1718559.
+      this.container = this.parentElement.parentElement;
     }
 
     get linkedBrowser() {
       let tabmail = document.getElementById("tabmail");
diff --git a/mail/base/content/widgets/tabmail-tabs.js b/mail/base/content/widgets/tabmail-tabs.js
--- a/mail/base/content/widgets/tabmail-tabs.js
+++ b/mail/base/content/widgets/tabmail-tabs.js
@@ -84,8 +84,16 @@
 
         dt = event.dataTransfer;
         dt.setDragImage(thumbnail, 0, 0);
 
+        if (this.vertical) {
+          this._tabDropIndicatorOffsetWidth =
+            window.document.documentElement.getBoundingClientRect().width -
+            document.getElementById("tabmail-container").getBoundingClientRect()
+              .width -
+            this._tabDropIndicator.width;
+        }
+
         event.stopPropagation();
       });
 
       this.addEventListener("dragover", event => {
@@ -202,19 +210,20 @@
         }
 
         let newMargin;
         let tabs = this.allTabs;
+        let tabRect;
 
         if (newIndex == tabs.length) {
-          let tabRect = tabs[newIndex - 1].getBoundingClientRect();
+          tabRect = tabs[newIndex - 1].getBoundingClientRect();
 
           if (ltr) {
             newMargin = tabRect.right - rect.left;
           } else {
             newMargin = rect.right - tabRect.left;
           }
         } else {
-          let tabRect = tabs[newIndex].getBoundingClientRect();
+          tabRect = tabs[newIndex].getBoundingClientRect();
 
           if (ltr) {
             newMargin = tabRect.left - rect.left;
           } else {
@@ -225,9 +234,15 @@
         ind.hidden = false;
 
         newMargin -= ind.clientWidth / 2;
 
-        ind.style.insetInlineStart = `${Math.round(newMargin)}px`;
+        if (this.vertical) {
+          ind.style.top = rect.top + newIndex * tabRect.height + "px";
+          ind.style.insetInlineStart = this._tabDropIndicatorOffsetWidth + "px";
+        } else {
+          ind.style.top = 0;
+          ind.style.insetInlineStart = `${Math.round(newMargin)}px`;
+        }
       });
 
       this.addEventListener("drop", event => {
         let dt = event.dataTransfer;
@@ -347,12 +362,36 @@
     connectedCallback() {
       if (this.delayConnectedCallback()) {
         return;
       }
+
+      if (this.hasConnected) {
+        Services.prefs.addObserver("mail.tabs.", this._prefObserver);
+        return;
+      }
+
       super.connectedCallback();
 
+      this.hasConnected = true;
+
       this.tabmail = document.getElementById("tabmail");
 
+      this.titlebar = document.getElementById("titlebar");
+
+      this.tabsToolbar = document.getElementById("tabs-toolbar");
+
+      this.verticalTabsContainer = document.getElementById(
+        "vertical-tabs-container"
+      );
+
+      this.verticalTabsToolbox = document.getElementById(
+        "vertical-tabs-toolbox"
+      );
+
+      this.verticalTabsSplitter = document.getElementById(
+        "vertical-tabs-splitter"
+      );
+
       this.arrowScrollboxWidth = 0;
 
       this.arrowScrollbox = this.querySelector("arrowscrollbox");
 
@@ -366,19 +405,29 @@
           subject.QueryInterface(Ci.nsIPrefBranch);
           if (data == "mail.tabs.autoHide") {
             this.mAutoHide = subject.getBoolPref("mail.tabs.autoHide");
           }
+          if (data == "mail.tabs.vertical") {
+            this.vertical = subject.getBoolPref("mail.tabs.vertical");
+          }
+          if (data == "mail.tabs.alwaysShowCloseButton") {
+            this.alwaysShowCloseButton = subject.getBoolPref(
+              "mail.tabs.alwaysShowCloseButton"
+            );
+          }
         }
       };
 
-      this._tabDropIndicator = this.querySelector(".tab-drop-indicator");
+      this._tabDropIndicator = document.querySelector(".tab-drop-indicator");
 
       this._dragOverDelay = 350;
 
       this._dragTime = 0;
 
       this._mAutoHide = false;
 
+      this._vertical = false;
+
       this.mAllTabsButton = document.getElementById(
         this.getAttribute("alltabsbutton")
       );
       this.mAllTabsPopup = this.mAllTabsButton.menu;
@@ -402,12 +451,21 @@
       this.mTabMinWidth = Services.prefs.getIntPref("mail.tabs.tabMinWidth");
       this.mTabMaxWidth = Services.prefs.getIntPref("mail.tabs.tabMaxWidth");
       this.mTabClipWidth = Services.prefs.getIntPref("mail.tabs.tabClipWidth");
       this.mAutoHide = Services.prefs.getBoolPref("mail.tabs.autoHide");
+      this.vertical = Services.prefs.getBoolPref("mail.tabs.vertical");
+      this.alwaysShowCloseButton = Services.prefs.getBoolPref(
+        "mail.tabs.alwaysShowCloseButton"
+      );
 
       if (this.mAutoHide) {
         this.mCollapseToolbar.collapsed = true;
         document.documentElement.setAttribute("tabbarhidden", "true");
+        this.verticalTabsSplitter.collapsed = true;
+      }
+
+      if (this.vertical) {
+        this._updateTabsLayout();
       }
 
       this._updateCloseButtons();
 
@@ -438,8 +496,9 @@
 
       this.addEventListener("TabSelect", event => {
         this._handleTabSelect();
       });
+
       XPCOMUtils.defineLazyPreferenceGetter(
         this,
         "_tabMinWidthPref",
         "mail.tabs.tabMinWidth",
@@ -495,8 +554,9 @@
     set mAutoHide(val) {
       if (val != this._mAutoHide) {
         if (this.allTabs.length == 1) {
           this.mCollapseToolbar.collapsed = val;
+          this.verticalTabsSplitter.collapsed = val;
         }
         this._mAutoHide = val;
       }
     }
@@ -504,8 +564,32 @@
     get mAutoHide() {
       return this._mAutoHide;
     }
 
+    set vertical(val) {
+      if (val != this._vertical) {
+        this._vertical = val;
+        this._updateTabsLayout();
+        this.verticalTabsContainer.collapsed = !this.vertical;
+        this.verticalTabsSplitter.collapsed = !this.vertical;
+      }
+    }
+
+    get vertical() {
+      return this._vertical;
+    }
+
+    set alwaysShowCloseButton(val) {
+      if (val != this._alwaysShowCloseButton) {
+        this._alwaysShowCloseButton = val;
+        this._updateCloseButtons();
+      }
+    }
+
+    get alwaysShowCloseButton() {
+      return this._alwaysShowCloseButton;
+    }
+
     set selectedIndex(val) {
       let tab = this.getItemAtIndex(val);
       let alreadySelected = tab && tab.selected;
 
@@ -526,14 +610,68 @@
         .__lookupGetter__("selectedIndex")
         .call(this);
     }
 
+    showTabs(show) {
+      if (this.vertical) {
+        this.verticalTabsContainer.collapsed = !show;
+        this.verticalTabsSplitter.collapsed = !show;
+      } else {
+        this.tabsToolbar.collapsed = !show;
+      }
+    }
+
+    _updateTabsLayout() {
+      if (this.vertical) {
+        this.verticalTabsToolbox.append(this.tabsToolbar);
+        this._updateTabsOrient("vertical");
+
+        this.removeAttribute("align");
+        this.setAttribute("collapsetoolbar", "vertical-tabs-container");
+        this.mCollapseToolbar = this.verticalTabsContainer;
+        this.arrowScrollbox._startEndProps = null;
+        this.arrowScrollbox.removeAttribute("overflowing");
+        this.tabsToolbar.collapsed = false;
+        this.verticalTabsContainer.prepend(this._tabDropIndicator);
+
+        let width =
+          Services.xulStore.getValue(
+            document.URL,
+            "vertical-tabs-container",
+            "width"
+          ) || Services.prefs.getIntPref("mail.tabs.tabMaxWidth");
+        this.verticalTabsContainer.style.width = `${width}px`;
+
+        document.documentElement.toggleAttribute("verticaltabs", true);
+      } else {
+        this.titlebar.appendChild(this.tabsToolbar);
+        this._updateTabsOrient("horizontal");
+
+        this.setAttribute("align", "end");
+        this.setAttribute("collapsetoolbar", "tabs-toolbar");
+        this.mCollapseToolbar = this.tabsToolbar;
+        this.arrowScrollbox._startEndProps = null;
+        this.prepend(this._tabDropIndicator);
+
+        document.documentElement.toggleAttribute("verticaltabs", false);
+      }
+    }
+
+    _updateTabsOrient(orient) {
+      this.setAttribute("orient", orient);
+      this.tabsToolbar.setAttribute("orient", orient);
+      this.arrowScrollbox.setAttribute("orient", orient);
+    }
+
     _updateCloseButtons() {
       let width =
         this.arrowScrollbox.firstElementChild.getBoundingClientRect().width;
       // 0 width is an invalid value and indicates
       // an item without display, so ignore.
-      if (width > this.mTabClipWidth || width == 0) {
+      if (
+        this.alwaysShowCloseButton &&
+        (width > this.mTabClipWidth || width == 0)
+      ) {
         this.setAttribute("closebuttons", "alltabs");
       } else {
         this.setAttribute("closebuttons", "activetab");
       }
@@ -549,26 +687,26 @@
       switch (aEvent.type) {
         case "overflow":
           this.arrowScrollbox.ensureElementIsVisible(this.selectedItem);
 
-          // filter overflow events which were dispatched on nested scrollboxes
-          // and ignore vertical events.
+          // Filter overflow events which were dispatched on nested scrollboxes
+          // and ignore vertical events if not in vertical tabs mode.
           if (
             aEvent.target != this.arrowScrollbox.scrollbox ||
-            aEvent.detail == 0
+            (!this.vertical && aEvent.detail == 0)
           ) {
             return;
           }
 
           this.arrowScrollbox.setAttribute("overflow", "true");
           alltabsButton.removeAttribute("hidden");
           break;
         case "underflow":
-          // filter underflow events which were dispatched on nested scrollboxes
-          // and ignore vertical events.
+          // Filter underflow events which were dispatched on nested scrollboxes
+          // and ignore vertical events if not in vertical tabs mode.
           if (
             aEvent.target != this.arrowScrollbox.scrollbox ||
-            aEvent.detail == 0
+            (!this.vertical && aEvent.detail == 0)
           ) {
             return;
           }
 
@@ -673,8 +811,20 @@
 
     _getDropIndex(event) {
       let tabs = this.allTabs;
 
+      if (this.vertical) {
+        for (let i = 0; i < tabs.length; i++) {
+          let height = tabs[i].getBoundingClientRect().height;
+          if (event.screenY < tabs[i].screenY + height / 2) {
+            // Can't drop before firstTab at 0.
+            return i || 1;
+          }
+        }
+
+        return tabs.length;
+      }
+
       if (window.getComputedStyle(this).direction == "ltr") {
         for (let i = 0; i < tabs.length; i++) {
           if (
             event.screenX <
diff --git a/mail/components/preferences/general.inc.xhtml b/mail/components/preferences/general.inc.xhtml
--- a/mail/components/preferences/general.inc.xhtml
+++ b/mail/components/preferences/general.inc.xhtml
@@ -147,8 +147,16 @@
                        class="tip-caption indent"/>
         </vbox>
         <spacer flex="1"/>
       </hbox>
+      <hbox>
+        <vbox>
+          <checkbox id="verticalTabs"
+                    data-l10n-id="vertical-tabs-label"
+                    preference="mail.tabs.vertical"/>
+        </vbox>
+        <spacer flex="1"/>
+      </hbox>
     </html:fieldset>
     </html:div>
 
     <!-- Fonts and Colors -->
diff --git a/mail/components/preferences/general.js b/mail/components/preferences/general.js
--- a/mail/components/preferences/general.js
+++ b/mail/components/preferences/general.js
@@ -92,8 +92,9 @@ Preferences.addAll([
   { id: "layers.acceleration.disabled", type: "bool", inverted: true },
   { id: "searchintegration.enable", type: "bool" },
   { id: "mail.tabs.drawInTitlebar", type: "bool" },
   { id: "mail.tabs.autoHide", type: "bool" },
+  { id: "mail.tabs.vertical", type: "bool" },
 ]);
 if (AppConstants.platform == "win" || AppConstants.platform == "linux") {
   Preferences.add({ id: "mail.minimizeToTray", type: "bool" });
 }
diff --git a/mail/locales/en-US/messenger/preferences/preferences.ftl b/mail/locales/en-US/messenger/preferences/preferences.ftl
--- a/mail/locales/en-US/messenger/preferences/preferences.ftl
+++ b/mail/locales/en-US/messenger/preferences/preferences.ftl
@@ -276,8 +276,12 @@ auto-hide-tabbar-label =
     .label = Auto hide tab bar
     .accesskey = A
 auto-hide-tabbar-description = Hide the tab bar when only a single tab is open
 
+vertical-tabs-label =
+    .label = Show tab bar vertically
+    .accesskey = v
+
 system-integration-legend = System Integration
 always-check-default =
     .label = Always check to see if { -brand-short-name } is the default mail client on startup
     .accesskey = A
diff --git a/mail/themes/linux/mail/tabmail.css b/mail/themes/linux/mail/tabmail.css
--- a/mail/themes/linux/mail/tabmail.css
+++ b/mail/themes/linux/mail/tabmail.css
@@ -34,18 +34,8 @@ tabpanels {
 /**
  * Tab
  */
 
-.tabmail-tab .tab-label-container {
-  /* tabmail-tab focus ring */
-  border: 1px dotted transparent;
-  margin: -1px !important; /* let the border not consume any space, like outline */
-}
-
-.tabmail-tab[selected]:focus .tab-label-container {
-  border-color: -moz-DialogText;
-}
-
 /**
  * Tab Scrollbox Arrow Buttons
  */
 
diff --git a/mail/themes/osx/mail/tabmail.css b/mail/themes/osx/mail/tabmail.css
--- a/mail/themes/osx/mail/tabmail.css
+++ b/mail/themes/osx/mail/tabmail.css
@@ -50,12 +50,8 @@
 .tabmail-tab[selected="true"]:not(:-moz-lwtheme) {
   -moz-font-smoothing-background-color: var(--toolbar-bgcolor);
 }
 
-.tabmail-tab:focus .tab-label-container {
-  outline: var(--focus-outline);
-}
-
 #tabmail-tabs {
   align-items: stretch;
   font-size: inherit;
   padding-left: 0;
diff --git a/mail/themes/shared/mail/about3Pane.css b/mail/themes/shared/mail/about3Pane.css
--- a/mail/themes/shared/mail/about3Pane.css
+++ b/mail/themes/shared/mail/about3Pane.css
@@ -610,4 +610,11 @@ li.context-menu-target:not(.selected) > 
 #messageBrowser,
 #multiMessageBrowser {
   flex: 1;
 }
+
+#folderPaneSplitter:hover,
+#folderPaneSplitter.splitter-resizing,
+#messagePaneSplitter:hover,
+#messagePaneSplitter.splitter-resizing {
+  background-color: var(--selected-item-color);
+}
diff --git a/mail/themes/shared/mail/tabmail.css b/mail/themes/shared/mail/tabmail.css
--- a/mail/themes/shared/mail/tabmail.css
+++ b/mail/themes/shared/mail/tabmail.css
@@ -29,17 +29,95 @@
 #tabmail {
   overflow: hidden;
 }
 
+/* Vertical Tabs */
+#vertical-tabs-toolbox {
+  width: inherit;
+}
+
+#vertical-tabs-toolbox > #tabs-toolbar {
+  flex: 1;
+  padding-block-end: 3px;
+}
+
+#vertical-tabs-container > .tab-drop-indicator {
+  rotate: -90deg;
+  transform: translate(12px, 20px);
+}
+
+#tabmail-arrowscrollbox[orient="vertical"] {
+  contain: strict;
+}
+
+#tabmail-arrowscrollbox[orient="vertical"]::part(scrollbutton-up),
+#tabmail-arrowscrollbox[orient="vertical"]::part(scrollbutton-down) {
+  display: none;
+}
+#tabmail-arrowscrollbox[orient="vertical"]::part(scrollbox) {
+  padding-inline-end: 4px;
+  overflow: auto;
+}
+
+#tabmail-arrowscrollbox[orient="vertical"] > tab.tabmail-tab {
+  flex: unset;
+  max-width: none;
+  min-height: var(--tab-min-height);
+  width: unset;
+}
+
+/* Match all platforms splitter */
+#vertical-tabs-splitter {
+  /* For linux */
+  -moz-appearance: none;
+  /* For win/osx */
+  /* Common */
+  border-width: 0;
+  min-width: 0;
+  width: 5px;
+  background-color: transparent;
+  margin-top: 0;
+  position: relative;
+  z-index: 10;
+}
+
+#vertical-tabs-splitter {
+  border-inline-end: 1px solid var(--splitter-color);
+  margin-inline-start: -5px;
+}
+
+#vertical-tabs-splitter:hover {
+  border-inline-end: 5px solid var(--selected-item-color);
+}
+/* Vertical Tabs end */
+
 #tabmail-tabs .tabmail-tab:first-child .tab-close-button,
-#tabmail-tabs[closebuttons="activetab"] .tabmail-tab:not([selected="true"]) .tab-close-button {
+#tabmail-tabs[closebuttons="activetab"] .tabmail-tab:not(:hover, [selected="true"]) .tab-close-button {
   display: none;
 }
 
 .tabmail-tab[selected="true"] {
   box-shadow: 0 2px 8px -5px var(--color-black);
 }
 
+/* Tab focus */
+.tabmail-tab[selected]:focus .tab-background,
+.tabmail-tab[selected]:focus-within .tab-background {
+  outline: 2px solid var(--selected-item-color);
+  outline-offset: -2px;
+  border-radius: var(--button-border-radius);
+}
+.tabmail-tab[selected]:focus .tab-background > .tab-line[selected="true"],
+.tabmail-tab[selected]:focus-within .tab-background > .tab-line[selected="true"] {
+  background-color: transparent;
+}
+
+.tab-close-button:focus-visible {
+  outline: 2px solid var(--selected-item-color);
+  outline-offset: -4px;
+}
+/* Tab focus end */
+
 .tab-drop-indicator {
   position: absolute;
   top: 0;
   /* The z-index needs to be big enough to trump other positioned UI pieces
@@ -197,9 +275,9 @@ button.tab-close-button {
 .tab-background {
   background-clip: padding-box;
 }
 
-.tab-background[selected=true] {
+.tabmail-tab:not(:focus, :focus-within) .tab-background[selected=true] {
   background-color: var(--toolbar-bgcolor);
   background-repeat: repeat-x;
 }
 
diff --git a/mail/themes/windows/mail/tabmail.css b/mail/themes/windows/mail/tabmail.css
--- a/mail/themes/windows/mail/tabmail.css
+++ b/mail/themes/windows/mail/tabmail.css
@@ -25,17 +25,8 @@ tabpanels {
   appearance: none;
   background-color: transparent;
 }
 
-/* tabmail-tab focus ring */
-.tabmail-tab .tab-label-container {
-  border: 1px dotted transparent;
-}
-
-.tabmail-tab:focus .tab-label-container {
-  border-color: -moz-DialogText;
-}
-
 #tabmail-arrowscrollbox[overflow="true"] > .tabmail-tab:first-child::before {
   content: '';
   display: flex;
   margin-inline-start: 0;
