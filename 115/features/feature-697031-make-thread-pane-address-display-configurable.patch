# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1683196543 -7200
# Parent  f091d973831d4cf28c8475b221f0221f0a5da437
Bug 697031 - prefs mail.addressDisplayAuthor/mail.addressDisplayRecipients to determine display.

diff --git a/mail/app/profile/all-thunderbird.js b/mail/app/profile/all-thunderbird.js
--- a/mail/app/profile/all-thunderbird.js
+++ b/mail/app/profile/all-thunderbird.js
@@ -321,16 +321,19 @@ pref("mailnews.headers.show_n_lines_befo
 // The value will always be set by startup code and must not be changed
 // here. A value of 0 means a new profile.
 pref("mail.ui-rdf.version", 0);
 
 /////////////////////////////////////////////////////////////////
 // Overrides of the core mailnews.js and composer.js prefs
 /////////////////////////////////////////////////////////////////
 pref("mail.showCondensedAddresses", true); // show the friendly display name for people I know
+// 1: Show display name, 2: Show e-mail address, 3: Show both.
+pref("mail.addressDisplayAuthor", 1);
+pref("mail.addressDisplayRecipients", 1);
 
 pref("mailnews.attachments.display.start_expanded", false);
 // hidden pref for changing how we present attachments in the message pane
 pref("mail.pane_config.dynamic",            0);
 pref("mailnews.reuse_thread_window2",     true);
 pref("editor.singleLine.pasteNewlines", 4);  // substitute commas for new lines in single line text boxes
 pref("editor.CR_creates_new_p", true);
 pref("mail.compose.default_to_paragraph", true);
diff --git a/mail/base/content/msgHdrView.js b/mail/base/content/msgHdrView.js
--- a/mail/base/content/msgHdrView.js
+++ b/mail/base/content/msgHdrView.js
@@ -400,16 +400,22 @@ async function OnLoadMsgHeaderPane() {
   );
 
   Services.obs.addObserver(MsgHdrViewObserver, "remote-content-blocked");
   Services.prefs.addObserver("mail.showCondensedAddresses", MsgHdrViewObserver);
   Services.prefs.addObserver(
     "mailnews.headers.showReferences",
     MsgHdrViewObserver
   );
+  // This is not correct here since we'll be updating the thread pane.
+  Services.prefs.addObserver("mail.addressDisplayAuthor", MsgHdrViewObserver);
+  Services.prefs.addObserver(
+    "mail.addressDisplayRecipients",
+    MsgHdrViewObserver
+  );
 
   initializeHeaderViewTables();
 
   // Add the keyboard shortcut event listener for the message header.
   // Ctrl+Alt+S / Cmd+Control+S. We don't use the Alt/Option key on macOS
   // because it alters the pressed key to an ASCII character. See bug 1692263.
   let shortcut = await document.l10n.formatValue(
     "message-header-show-security-info-key"
@@ -466,35 +472,59 @@ function OnUnloadMsgHeaderPane() {
   Services.prefs.removeObserver(
     "mail.showCondensedAddresses",
     MsgHdrViewObserver
   );
   Services.prefs.removeObserver(
     "mailnews.headers.showReferences",
     MsgHdrViewObserver
   );
+  Services.prefs.removeObserver(
+    "mail.addressDisplayAuthor",
+    MsgHdrViewObserver
+  );
+  Services.prefs.removeObserver(
+    "mail.addressDisplayRecipients",
+    MsgHdrViewObserver
+  );
 
   clearFolderDBListener();
 
   // Dispatch an event letting any listeners know that we have unloaded
   // the message pane.
   headerViewElement.dispatchEvent(
     new Event("messagepane-unloaded", { bubbles: false, cancelable: true })
   );
 }
 
+function ReloadThreadPane() {
+  let tabmail = top.window.document.getElementById("tabmail");
+  let threadTree = tabmail?.currentAbout3Pane?.threadTree;
+  let version = Services.prefs.getIntPref("mail.displayname.version", 0);
+  Services.prefs.setIntPref("mail.displayname.version", ++version);
+  if (threadTree) {
+    threadTree.invalidate();
+  }
+}
+
 var MsgHdrViewObserver = {
   observe(subject, topic, data) {
     // verify that we're changing the mail pane config pref
     if (topic == "nsPref:changed") {
       if (data == "mail.showCondensedAddresses") {
         gShowCondensedEmailAddresses = Services.prefs.getBoolPref(
           "mail.showCondensedAddresses"
         );
         ReloadMessage();
+        ReloadThreadPane();
+      } else if (
+          data == "mail.addressDisplayAuthor" ||
+          data == "mail.addressDisplayRecipients"
+      ) {
+        ReloadThreadPane();
       } else if (data == "mailnews.headers.showReferences") {
         gHeadersShowReferences = Services.prefs.getBoolPref(
           "mailnews.headers.showReferences"
         );
         ReloadMessage();
       }
     } else if (topic == "remote-content-blocked") {
       let browser = getMessagePaneBrowser();
diff --git a/mailnews/base/src/nsMsgDBView.cpp b/mailnews/base/src/nsMsgDBView.cpp
--- a/mailnews/base/src/nsMsgDBView.cpp
+++ b/mailnews/base/src/nsMsgDBView.cpp
@@ -334,16 +334,23 @@ nsresult nsMsgDBView::FetchAuthor(nsIMsg
   if (!unparsedAuthor.IsEmpty()) {
     nsCString cachedDisplayName;
     GetCachedName(unparsedAuthor, currentDisplayNameVersion, cachedDisplayName);
     if (!cachedDisplayName.IsEmpty()) {
       CopyUTF8toUTF16(cachedDisplayName, aSenderString);
       return NS_OK;
     }
   }
+#define DISPLAY_NAME_ONLY 1
+#define DISPLAY_EMAIL_ONLY 2
+#define DISPLAY_NAME_EMAIL 3
+  int32_t addressDisplay = DISPLAY_NAME_ONLY;
+  prefs->GetIntPref("mail.addressDisplayAuthor", &addressDisplay);
+  if (addressDisplay < DISPLAY_NAME_ONLY || addressDisplay > DISPLAY_NAME_EMAIL)
+    addressDisplay = DISPLAY_NAME_ONLY;
 
   nsCString author;
   (void)aHdr->GetAuthor(getter_Copies(author));
 
   nsCString headerCharset;
   aHdr->GetEffectiveCharset(headerCharset);
 
   nsString name;
@@ -356,30 +363,37 @@ nsresult nsMsgDBView::FetchAuthor(nsIMsg
 
   if (showCondensedAddresses)
     GetDisplayNameInAddressBook(emailAddress, aSenderString);
 
   if (aSenderString.IsEmpty()) {
     // We can't use the display name in the card; use the name contained in
     // the header or email address.
     if (name.IsEmpty()) {
-      CopyUTF8toUTF16(emailAddress, aSenderString);
+      addressDisplay = DISPLAY_EMAIL_ONLY;
+    } else if (emailAddress.IsEmpty()) {
+      addressDisplay = DISPLAY_NAME_ONLY;
     } else {
       int32_t atPos;
-      if ((atPos = name.FindChar('@')) == kNotFound ||
-          name.FindChar('.', atPos) == kNotFound) {
-        aSenderString = name;
-      } else {
-        // Found @ followed by a dot, so this looks like a spoofing case.
-        aSenderString = name;
-        aSenderString.AppendLiteral(" <");
-        AppendUTF8toUTF16(emailAddress, aSenderString);
-        aSenderString.Append('>');
+      if ((atPos = name.FindChar('@')) != kNotFound &&
+          name.FindChar('.', atPos) != kNotFound) {
+        // Found @ followed by a dot, which looks like a spoofing case.
+        addressDisplay = DISPLAY_NAME_EMAIL;
       }
     }
+    if (addressDisplay == DISPLAY_NAME_ONLY) {
+      aSenderString = name;
+    } else if (addressDisplay == DISPLAY_EMAIL_ONLY) {
+      CopyUTF8toUTF16(emailAddress, aSenderString);
+    } else {
+      aSenderString = name;
+      aSenderString.AppendLiteral(" <");
+      AppendUTF8toUTF16(emailAddress, aSenderString);
+      aSenderString.Append('>');
+    }
   }
 
   if (multipleAuthors) {
     aSenderString.AppendLiteral(" ");
     nsAutoString val;
     GetString(u"andOthers", val);
     aSenderString.Append(val);
   }
@@ -437,16 +451,20 @@ nsresult nsMsgDBView::FetchRecipients(ns
 
     // Recipients have already been cached, check if the addressbook
     // was changed after cache.
     if (!cachedRecipients.IsEmpty()) {
       CopyUTF8toUTF16(cachedRecipients, aRecipientsString);
       return NS_OK;
     }
   }
+  int32_t addressDisplay = DISPLAY_NAME_ONLY;
+  prefs->GetIntPref("mail.addressDisplayRecipients", &addressDisplay);
+  if (addressDisplay < DISPLAY_NAME_ONLY || addressDisplay > DISPLAY_NAME_EMAIL)
+    addressDisplay = DISPLAY_NAME_ONLY;
 
   nsCString unparsedRecipients;
   nsresult rv = aHdr->GetRecipients(getter_Copies(unparsedRecipients));
 
   nsCString headerCharset;
   aHdr->GetEffectiveCharset(headerCharset);
 
   nsTArray<nsString> names;
@@ -470,30 +488,37 @@ nsresult nsMsgDBView::FetchRecipients(ns
 
     if (showCondensedAddresses)
       GetDisplayNameInAddressBook(curAddress, recipient);
 
     if (recipient.IsEmpty()) {
       // We can't use the display name in the card; use the name contained in
       // the header or email address.
       if (curName.IsEmpty()) {
-        CopyUTF8toUTF16(curAddress, recipient);
+        addressDisplay = DISPLAY_EMAIL_ONLY;
+      } else if (curAddress.IsEmpty()) {
+        addressDisplay = DISPLAY_NAME_ONLY;
       } else {
         int32_t atPos;
-        if ((atPos = curName.FindChar('@')) == kNotFound ||
-            curName.FindChar('.', atPos) == kNotFound) {
-          recipient = curName;
-        } else {
-          // Found @ followed by a dot, so this looks like a spoofing case.
-          recipient = curName;
-          recipient.AppendLiteral(" <");
-          AppendUTF8toUTF16(curAddress, recipient);
-          recipient.Append('>');
+        if ((atPos = curName.FindChar('@')) != kNotFound &&
+            curName.FindChar('.', atPos) != kNotFound) {
+          // Found @ followed by a dot, which looks like a spoofing case.
+          addressDisplay = DISPLAY_NAME_EMAIL;
         }
       }
+      if (addressDisplay == DISPLAY_NAME_ONLY) {
+        recipient = curName;
+      } else if (addressDisplay == DISPLAY_EMAIL_ONLY) {
+        CopyUTF8toUTF16(curAddress, recipient);
+      } else {
+        recipient = curName;
+        recipient.AppendLiteral(" <");
+        AppendUTF8toUTF16(curAddress, recipient);
+        recipient.Append('>');
+      }
     }
 
     // Add ', ' between each recipient.
     if (i != 0) aRecipientsString.AppendLiteral(u", ");
 
     aRecipientsString.Append(recipient);
   }
 
