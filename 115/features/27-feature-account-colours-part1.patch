# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1702595488 -3600
# Parent  f9dc8e334791a2eac36924023317a9c583b0dd07
Feature: Account colours, part 1: Account Manager and folder tree.

See https://bugzilla.mozilla.org/show_bug.cgi?id=1482172 and
https://addons.thunderbird.net/en-US/thunderbird/addon/account-colors/

diff --git a/mail/base/content/about3Pane.js b/mail/base/content/about3Pane.js
--- a/mail/base/content/about3Pane.js
+++ b/mail/base/content/about3Pane.js
@@ -60,16 +60,19 @@ const messengerBundle = Services.strings
 const { getDefaultColumns, getDefaultColumnsForCardsView, isOutgoing } =
   ChromeUtils.importESModule(
     "chrome://messenger/content/thread-pane-columns.mjs"
   );
 
 // As defined in nsMsgDBView.h.
 const MSG_VIEW_FLAG_DUMMY = 0x20000000;
 
+const SPECIALUSE_NOT_OUTBOX =
+  Ci.nsMsgFolderFlags.SpecialUse & ~Ci.nsMsgFolderFlags.Queue;
+
 /**
  * The TreeListbox widget that displays folders.
  */
 var folderTree;
 /**
  * The TreeView widget that displays the message list.
  */
 var threadTree;
@@ -1127,28 +1130,32 @@ var folderPane = {
             if (!serverRow) {
               serverRow = folderPane._createServerRow(
                 this.name,
                 childFolder.server
               );
               folderPane._insertInServerOrder(this.containerList, serverRow);
             }
             let folderRow = folderPane._createFolderRow(this.name, childFolder);
+            // This is already colored by its server.
+            folderRow.style.backgroundColor = "";
             serverRow.insertChildInOrder(folderRow);
             folderPane._addSubFolders(childFolder, folderRow, this.name);
             return;
           }
         }
 
         // Nothing special about this folder. Add it to the end of the list.
         let folderRow = folderPane._addFolderAndAncestors(
           this.containerList,
           childFolder,
           this.name
         );
+        // This is already colored by its server.
+        folderRow.style.backgroundColor = "";
         folderPane._addSubFolders(childFolder, folderRow, this.name);
       },
 
       removeFolder(parentFolder, childFolder) {
         let childRow = folderPane.getRowForFolder(childFolder, this.name);
         if (!childRow) {
           return;
         }
@@ -2574,16 +2581,41 @@ var folderPane = {
   changeServerName(folder, name) {
     for (let row of folderTree.querySelectorAll(
       `li[data-server-key="${folder.server.key}"]`
     )) {
       row.setServerName(name);
     }
   },
 
+  changeServerColor(folder) {
+    let color = folder.server.RGBAcolor;
+    for (let row of folderTree.querySelectorAll(
+      `li[data-server-key="${folder.server.key}"]`
+    )) {
+      let f = MailServices.folderLookup.getFolderForURL(row.uri);
+      // Put color only on folders in smart mode.
+      if (row.id.startsWith("smart-")) {
+        // Only put color on top Inbox, etc., not sub-folders.
+        if (f.flags & SPECIALUSE_NOT_OUTBOX || f.isServer) {
+          // If the parent already has the style, clear it.
+          if (row.parentElement?.closest("li")?.style.backgroundColor) {
+            row.style.backgroundColor = "";
+          } else {
+            row.style.backgroundColor = color;
+          }
+        }
+      } else if (row.id.startsWith("recent-")) {
+        row.style.backgroundColor = color;
+      } else if (f.isServer) {
+        row.style.backgroundColor = color;
+      }
+    }
+  },
+
   /**
    * Update the UI widget to reflect the real folder size when the "FolderSize"
    * property changes.
    *
    * @param {nsIMsgFolder} folder
    */
   changeFolderSize(folder) {
     if (folderPane.isItemVisible("folderPaneFolderSize")) {
@@ -4213,16 +4245,20 @@ class FolderTreeRow extends HTMLLIElemen
     this._serverName = server.prettyName;
     this._setName();
     const isCollapsed = this.classList.contains("collapsed");
     if (isCollapsed) {
       this.unreadCount = server.rootFolder.getNumUnread(isCollapsed);
       this.totalCount = server.rootFolder.getTotalMessages(isCollapsed);
     }
     this.setFolderPropertiesFromFolder(server.rootFolder);
+    let color = server.RGBAcolor;
+    if (color) {
+      this.style.backgroundColor = color;
+    }
   }
 
   /**
    * Set some properties based on the folder for this row.
    *
    * @param {nsIMsgFolder} folder
    * @param {"folder"|"server"|"both"} nameStyle
    */
@@ -4242,16 +4278,34 @@ class FolderTreeRow extends HTMLLIElemen
       this.folderSize = this.formatFolderSize(folder.sizeOnDisk);
     }
     this.folderSortOrder = folder.sortOrder;
     if (folder.noSelect) {
       this.classList.add("noselect-folder");
     } else {
       this.setAttribute("draggable", "true");
     }
+    let color = folder.server.RGBAcolor;
+    if (!color) {
+      return;
+    }
+    if (
+      this.id.startsWith("smart-") &&
+      // Only put color on top Inbox, etc., not sub-folders.
+      // There is a problem here were special folders which are not part
+      // of a unified folder get colored twice, once as special folder,
+      // then as part of a server.
+      // The style is removed later, see comment:
+      // "This is already colored by its server".
+      folder.flags & SPECIALUSE_NOT_OUTBOX
+    ) {
+      this.style.backgroundColor = color;
+    } else if (this.id.startsWith("recent-")) {
+      this.style.backgroundColor = color;
+    }
   }
 
   updateNewMessages() {
     const folder = MailServices.folderLookup.getFolderForURL(this.uri);
     this.classList.toggle(
       "new-messages",
       this.classList.contains("collapsed")
         ? folder.hasFolderOrSubfolderNewMessages
@@ -6484,17 +6538,25 @@ var folderListener = {
   onFolderRemoved(parentFolder, childFolder) {
     folderPane.removeFolder(parentFolder, childFolder);
     if (childFolder == gFolder) {
       gFolder = null;
       gViewWrapper?.close(true);
     }
   },
   onMessageRemoved(parentFolder, msg) {},
-  onFolderPropertyChanged(folder, property, oldValue, newValue) {},
+  onFolderPropertyChanged(folder, property, oldValue, newValue) {
+    switch (property) {
+      case "Color":
+        if (folder.isServer) {
+          folderPane.changeServerColor(folder);
+        }
+        break;
+    }
+  },
   onFolderIntPropertyChanged(folder, property, oldValue, newValue) {
     switch (property) {
       case "BiffState":
         folderPane.changeNewMessages(
           folder,
           newValue === Ci.nsIMsgFolder.nsMsgBiffState_NewMail
         );
         break;
diff --git a/mailnews/base/prefs/content/AccountManager.js b/mailnews/base/prefs/content/AccountManager.js
--- a/mailnews/base/prefs/content/AccountManager.js
+++ b/mailnews/base/prefs/content/AccountManager.js
@@ -1883,16 +1883,20 @@ var gAccountTree = {
       mainTree.appendChild(treeitem);
       treeitem.setAttribute("aria-label", accountName);
       treeitem.title = accountName;
       treeitem.querySelector(".name").textContent = accountName;
       treeitem.setAttribute("PageTag", amChrome);
       // Add icons based on account type.
       if (server) {
         treeitem.classList.add("serverType-" + server.type);
+        let color = server.RGBAcolor;
+        if (color) {
+          treeitem.style.backgroundColor = color;
+        }
         if (server.isSecure) {
           treeitem.classList.add("isSecure");
         }
         // For IM accounts, we can try to fetch a protocol specific icon.
         if (server.type == "im") {
           treeitem.querySelector(".icon").style.backgroundImage =
             "url(" +
             ChatIcons.getProtocolIconURI(
diff --git a/mailnews/base/prefs/content/am-main.js b/mailnews/base/prefs/content/am-main.js
--- a/mailnews/base/prefs/content/am-main.js
+++ b/mailnews/base/prefs/content/am-main.js
@@ -42,16 +42,25 @@ function onDefaultIdentityChange(subject
  *
  * @param {Event} event - Blur event from the pretty name input.
  */
 function serverPrettyNameOnBlur(event) {
   parent.setAccountLabel(gAccount.key, event.target.value);
   setAccountTitle();
 }
 
+function serverColorOnChange(event) {
+  let row = parent.document.getElementById(gAccount.key);
+  if (row) {
+    let color = document.getElementById("server.color").value;
+    gAccount.incomingServer.color = color;
+    row.style.backgroundColor = gAccount.incomingServer.RGBAcolor;
+  }
+}
+
 /**
  * Update an account's main settings title with the account name if applicable.
  */
 function setAccountTitle() {
   let accountName = document.getElementById("server.prettyName");
   let title = document.querySelector("#am-main-title .dialogheader-title");
   let titleValue = title.getAttribute("defaultTitle");
   if (accountName.value) {
diff --git a/mailnews/base/prefs/content/am-main.xhtml b/mailnews/base/prefs/content/am-main.xhtml
--- a/mailnews/base/prefs/content/am-main.xhtml
+++ b/mailnews/base/prefs/content/am-main.xhtml
@@ -65,16 +65,25 @@
           id="server.prettyName"
           type="text"
           wsm_persist="true"
           class="input-inline"
           onblur="serverPrettyNameOnBlur(event);"
           prefstring="mail.server.%serverkey%.name"
           aria-labelledby="server.prettyName.label"
         />
+        <html:input
+          id="server.color"
+          type="color"
+          wsm_persist="true"
+          class="input-inline"
+          style="flex: 0.1;"
+          onchange="serverColorOnChange(event);"
+          prefstring="mail.server.%serverkey%.color"
+        />
       </hbox>
 
       <separator />
 
       <html:div>
         <html:fieldset>
           <html:legend>&identityTitle.label;</html:legend>
           <description>&identityDesc.label;</description>
diff --git a/mailnews/base/prefs/content/am-serverwithnoidentities.js b/mailnews/base/prefs/content/am-serverwithnoidentities.js
--- a/mailnews/base/prefs/content/am-serverwithnoidentities.js
+++ b/mailnews/base/prefs/content/am-serverwithnoidentities.js
@@ -87,8 +87,17 @@ function onPreInit(account, accountValue
 
 function onSave() {
   let storeContractID = document.getElementById("server.storeTypeMenulist")
     .selectedItem.value;
   document
     .getElementById("server.storeContractID")
     .setAttribute("value", storeContractID);
 }
+
+function serverColorOnChange(event) {
+  let row = parent.document.getElementById(gAccount.key);
+  if (row) {
+    let color = document.getElementById("server.color").value;
+    gAccount.incomingServer.color = color;
+    row.style.backgroundColor = gAccount.incomingServer.RGBAcolor;
+  }
+}
diff --git a/mailnews/base/prefs/content/am-serverwithnoidentities.xhtml b/mailnews/base/prefs/content/am-serverwithnoidentities.xhtml
--- a/mailnews/base/prefs/content/am-serverwithnoidentities.xhtml
+++ b/mailnews/base/prefs/content/am-serverwithnoidentities.xhtml
@@ -69,16 +69,25 @@
           id="server.prettyName"
           type="text"
           wsm_persist="true"
           class="input-inline"
           onblur="parent.setAccountLabel(gAccount.key, this.value);"
           prefstring="mail.server.%serverkey%.name"
           aria-labelledby="server.prettyName.label"
         />
+        <html:input
+          id="server.color"
+          type="color"
+          wsm_persist="true"
+          class="input-inline"
+          style="flex: 0.1;"
+          onchange="serverColorOnChange(event);"
+          prefstring="mail.server.%serverkey%.color"
+        />
       </hbox>
 
       <separator class="thin" />
 
       <html:div>
         <html:fieldset>
           <html:legend>&messageStorage.label;</html:legend>
 
diff --git a/mailnews/base/public/nsIMsgIncomingServer.idl b/mailnews/base/public/nsIMsgIncomingServer.idl
--- a/mailnews/base/public/nsIMsgIncomingServer.idl
+++ b/mailnews/base/public/nsIMsgIncomingServer.idl
@@ -525,16 +525,24 @@ interface nsIMsgIncomingServer : nsISupp
    * use it as a string.
    * The current return values are these:
    * 0 = default account,       100000000 = mail accounts (POP3/IMAP4),
    * 200000000 = Local Folders, 300000000 = IM accounts,
    * 400000000 = RSS,           500000000 = News
    * If a new server type is created a TB UI reviewer must decide its sort order.
    */
   readonly attribute long sortOrder;
+
+  /**
+   * Color for the server in the folder pane.
+   * color format: CSS format: #FF0000.
+   * RGBAcolor format: CSS format: rgba(r, g, b, t).
+   */
+  attribute ACString color;
+  readonly attribute ACString RGBAcolor;
 };
 
 %{C++
 /*
  * Following values for offline support have been used by
  * various files. If you are modifying any of the values
  * below, please do take care of the following files.
  * - mozilla/mailnews/base/src/nsMsgAccountManagerDS.cpp
diff --git a/mailnews/base/src/MsgIncomingServer.jsm b/mailnews/base/src/MsgIncomingServer.jsm
--- a/mailnews/base/src/MsgIncomingServer.jsm
+++ b/mailnews/base/src/MsgIncomingServer.jsm
@@ -715,16 +715,48 @@ class MsgIncomingServer {
       this.password = this._getPasswordWithoutUI();
     }
     if (this.password) {
       return false;
     }
     return this.authMethod != Ci.nsMsgAuthMethod.OAuth2;
   }
 
+  get color() {
+    return this.getCharValue("color");
+  }
+
+  set color(value) {
+    this.setCharValue("color", value);
+    this.rootFolder.NotifyPropertyChanged(
+      "Color",
+      "", // Old value doesn't matter.
+      value
+    );
+  }
+
+  get RGBAcolor() {
+    let color = this.getCharValue("color");
+    // Consider #000000 as not set. Reject bogus values.
+    if (
+      !color ||
+      color == "#000000" ||
+      !color.startsWith("#") ||
+      color.length != 7
+    ) {
+      return "";
+    }
+
+    // Turn #RRGGBB into rgba(rr, gg, bb, tt)
+    let r = parseInt(color.substring(1, 3), 16);
+    let g = parseInt(color.substring(3, 5), 16);
+    let b = parseInt(color.substring(5, 7), 16);
+    return `rgba(${r}, ${g}, ${b}, 0.2)`;
+  }
+
   getCharValue(prefName) {
     try {
       return this._prefs.getCharPref(prefName);
     } catch (e) {
       return this._defaultPrefs.getCharPref(prefName, "");
     }
   }
 
diff --git a/mailnews/base/src/nsMsgIncomingServer.cpp b/mailnews/base/src/nsMsgIncomingServer.cpp
--- a/mailnews/base/src/nsMsgIncomingServer.cpp
+++ b/mailnews/base/src/nsMsgIncomingServer.cpp
@@ -45,16 +45,17 @@
 #include "nsAppDirectoryServiceDefs.h"
 #include "mozilla/Components.h"
 #include "mozilla/Services.h"
 #include "nsIMsgFilter.h"
 #include "nsIObserverService.h"
 #include "mozilla/Unused.h"
 #include "nsIUUIDGenerator.h"
 #include "nsArrayUtils.h"
+#include "nsPrintfCString.h"
 
 #define PORT_NOT_SET -1
 
 nsMsgIncomingServer::nsMsgIncomingServer()
     : m_rootFolder(nullptr),
       m_downloadedHdrs(50),
       m_numMsgsDownloaded(0),
       m_biffState(nsIMsgFolder::nsMsgBiffState_Unknown),
@@ -2135,8 +2136,57 @@ nsMsgIncomingServer::SetForcePropertyEmp
 }
 
 NS_IMETHODIMP
 nsMsgIncomingServer::GetSortOrder(int32_t* aSortOrder) {
   NS_ENSURE_ARG_POINTER(aSortOrder);
   *aSortOrder = 100000000;
   return NS_OK;
 }
+
+NS_IMETHODIMP
+nsMsgIncomingServer::GetColor(nsACString& color) {
+  return GetCharValue("color", color);
+}
+
+NS_IMETHODIMP
+nsMsgIncomingServer::SetColor(const nsACString& color) {
+  nsresult rv = SetCharValue("color", color);
+  NS_ENSURE_SUCCESS(rv, rv);
+  nsCOMPtr<nsIMsgFolder> rootFolder;
+  GetRootFolder(getter_AddRefs(rootFolder));
+  if (rootFolder) {
+    // Old value doesn't matter.
+    rootFolder->NotifyPropertyChanged("Color"_ns, EmptyCString(), color);
+  }
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsMsgIncomingServer::GetRGBAcolor(nsACString& aColor) {
+  aColor.Truncate();
+  nsCString color;
+  nsresult rv = GetCharValue("color", color);
+  if (NS_FAILED(rv)) return NS_OK;
+
+  // Consider #000000 as not set. Reject bogus values.
+  if (color.IsEmpty() || color.EqualsLiteral("#000000") || color[0] != '#' ||
+      color.Length() != 7) {
+    return NS_OK;
+  }
+
+  // Turn #RRGGBB into rgba(rr, gg, bb, tt)
+  char colorBytes[3];
+  colorBytes[2] = 0;
+  const char* c = color.get() + 1;
+  int r, g, b;
+#define SCAN_BYTES(var)           \
+  colorBytes[0] = *c;             \
+  colorBytes[1] = *(c + 1);       \
+  sscanf(colorBytes, "%x", &var); \
+  c += 2;
+
+  SCAN_BYTES(r);
+  SCAN_BYTES(g);
+  SCAN_BYTES(b);
+  aColor = nsPrintfCString("rgba(%d, %d, %d, 0.2)", r, g, b);
+  return NS_OK;
+}
diff --git a/mailnews/extensions/newsblog/am-newsblog.js b/mailnews/extensions/newsblog/am-newsblog.js
--- a/mailnews/extensions/newsblog/am-newsblog.js
+++ b/mailnews/extensions/newsblog/am-newsblog.js
@@ -64,16 +64,25 @@ function onPreInit(account, accountValue
  * @param {Event} event - Blur event from the pretty name input.
  * @returns {void}
  */
 function serverPrettyNameOnBlur(event) {
   parent.setAccountLabel(gAccount.key, event.target.value);
   setAccountTitle();
 }
 
+function serverColorOnChange(event) {
+  let row = parent.document.getElementById(gAccount.key);
+  if (row) {
+    let color = document.getElementById("server.color").value;
+    gAccount.incomingServer.color = color;
+    row.style.backgroundColor = gAccount.incomingServer.RGBAcolor;
+  }
+}
+
 /**
  * Update an account's main settings title with the account name if applicable.
  *
  * @returns {void}
  */
 function setAccountTitle() {
   let accountName = document.getElementById("server.prettyName");
   let title = document.querySelector("#am-newsblog-title .dialogheader-title");
diff --git a/mailnews/extensions/newsblog/am-newsblog.xhtml b/mailnews/extensions/newsblog/am-newsblog.xhtml
--- a/mailnews/extensions/newsblog/am-newsblog.xhtml
+++ b/mailnews/extensions/newsblog/am-newsblog.xhtml
@@ -72,16 +72,25 @@
           id="server.prettyName"
           type="text"
           wsm_persist="true"
           class="input-inline"
           aria-labelledby="server.prettyNameLabel"
           onblur="serverPrettyNameOnBlur(event);"
           prefstring="mail.server.%serverkey%.name"
         />
+        <html:input
+          id="server.color"
+          type="color"
+          wsm_persist="true"
+          class="input-inline"
+          style="flex: 0.1;"
+          onchange="serverColorOnChange(event);"
+          prefstring="mail.server.%serverkey%.color"
+        />
       </hbox>
 
       <separator class="thin" />
 
       <html:div>
         <html:fieldset>
           <html:legend>&serverSettings.label;</html:legend>
           <checkbox
diff --git a/mailnews/mailnews.js b/mailnews/mailnews.js
--- a/mailnews/mailnews.js
+++ b/mailnews/mailnews.js
@@ -547,16 +547,17 @@ pref("mail.server.default.check_time", 1
 pref("mail.server.default.delete_by_age_from_server", false);
 pref("mail.server.default.num_days_to_leave_on_server", 7);
 pref("mail.server.default.limit_offline_message_size", false);
 pref("mail.server.default.max_size", 50);
 pref("mail.server.default.delete_mail_left_on_server", false);
 pref("mail.server.default.valid", true);
 pref("mail.server.default.abbreviate", true);
 pref("mail.server.default.isSecure", false);
+pref("mail.server.default.color", "");
 // cleartext password. @see nsIMsgIncomingServer.authMethod.
 pref("mail.server.default.authMethod", 3);
 // @see nsIMsgIncomingServer.socketType
 pref("mail.server.default.socketType", 0);
 pref("mail.server.default.override_namespaces", true);
 pref("mail.server.default.deferred_to_account", "");
 
 pref("mail.server.default.delete_model", 1);
