# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1706202372 -3600
# Parent  93e989419dcb61434a33b571934f59f01f4af1cc
Bug 1787577 - Backout of bug 1288911 (rev. d3c63b6f02c2) since using a <div> in the quote causes space-stuffing issues in the serialiser.

diff --git a/editor/libeditor/HTMLEditorDataTransfer.cpp b/editor/libeditor/HTMLEditorDataTransfer.cpp
--- a/editor/libeditor/HTMLEditorDataTransfer.cpp
+++ b/editor/libeditor/HTMLEditorDataTransfer.cpp
@@ -3149,56 +3149,38 @@ nsresult HTMLEditor::InsertAsPlaintextQu
         return NS_ERROR_EDITOR_DESTROYED;
       }
       NS_WARNING_ASSERTION(
           NS_SUCCEEDED(rv),
           "HTMLEditor::PrepareInlineStylesForCaret() failed, but ignored");
     }
   }
 
-  // Wrap the inserted quote in a <span> so we can distinguish it. If we're
-  // inserting into the <body>, we use a <span> which is displayed as a block
-  // and sized to the screen using 98 viewport width units.
-  // We could use 100vw, but 98vw avoids a horizontal scroll bar where possible.
-  // All this is done to wrap overlong lines to the screen and not to the
-  // container element, the width-restricted body.
+  // Wrap the inserted quote in a <span> so we can distinguish it.
   Result<RefPtr<Element>, nsresult> spanElementOrError =
       DeleteSelectionAndCreateElement(
           *nsGkAtoms::span, [](HTMLEditor&, Element& aSpanElement,
                                const EditorDOMPoint& aPointToInsert) {
             // Add an attribute on the pre node so we'll know it's a quotation.
             DebugOnly<nsresult> rvIgnored = aSpanElement.SetAttr(
                 kNameSpaceID_None, nsGkAtoms::mozquote, u"true"_ns,
                 aSpanElement.IsInComposedDoc());
             NS_WARNING_ASSERTION(
                 NS_SUCCEEDED(rvIgnored),
                 nsPrintfCString(
                     "Element::SetAttr(nsGkAtoms::mozquote, \"true\", %s) "
                     "failed",
                     aSpanElement.IsInComposedDoc() ? "true" : "false")
                     .get());
-            // Allow wrapping on spans so long lines get wrapped to the screen.
-            if (aPointToInsert.IsContainerHTMLElement(nsGkAtoms::body)) {
-              DebugOnly<nsresult> rvIgnored = aSpanElement.SetAttr(
-                  kNameSpaceID_None, nsGkAtoms::style,
-                  nsLiteralString(u"white-space: pre-wrap; display: block; "
-                                  u"width: 98vw;"),
-                  false);
-              NS_WARNING_ASSERTION(
-                  NS_SUCCEEDED(rvIgnored),
-                  "Element::SetAttr(nsGkAtoms::style, \"pre-wrap, block\", "
-                  "false) failed, but ignored");
-            } else {
-              DebugOnly<nsresult> rvIgnored =
-                  aSpanElement.SetAttr(kNameSpaceID_None, nsGkAtoms::style,
-                                       u"white-space: pre-wrap;"_ns, false);
-              NS_WARNING_ASSERTION(NS_SUCCEEDED(rvIgnored),
-                                   "Element::SetAttr(nsGkAtoms::style, "
-                                   "\"pre-wrap\", false) failed, but ignored");
-            }
+            rvIgnored =
+                aSpanElement.SetAttr(kNameSpaceID_None, nsGkAtoms::style,
+                                     u"white-space: pre-wrap;"_ns, false);
+            NS_WARNING_ASSERTION(NS_SUCCEEDED(rvIgnored),
+                                 "Element::SetAttr(nsGkAtoms::style, "
+                                 "\"pre-wrap\", false) failed, but ignored");
             return NS_OK;
           });
   NS_WARNING_ASSERTION(spanElementOrError.isOk(),
                        "HTMLEditor::DeleteSelectionAndCreateElement(nsGkAtoms::"
                        "span) failed, but ignored");
 
   // If this succeeded, then set selection inside the pre
   // so the inserted text will end up there.
