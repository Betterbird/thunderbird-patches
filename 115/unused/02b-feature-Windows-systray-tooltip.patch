# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1690140836 -7200
# Parent  3c0f2873218881d39ff2a72346ab76657bff03dd
Fix and optimise startup of notification manager.

diff --git a/mail/base/content/messenger.js b/mail/base/content/messenger.js
--- a/mail/base/content/messenger.js
+++ b/mail/base/content/messenger.js
@@ -415,19 +415,27 @@ var gMailInit = {
 
     // Don't trigger the existing account verification if the user wants to use
     // Thunderbird without an email account.
     if (!Services.prefs.getBoolPref("app.use_without_mail_account", false)) {
       // Load the Mail UI only if we already have at least one account configured
       // otherwise the verifyExistingAccounts will trigger the account wizard.
       if (verifyExistingAccounts()) {
         switchToMailTab();
-        await loadPostAccountWizard();
+        await loadPostAccountWizard(true);
       }
     } else {
+      // This is normally done in `loadPostAccountWizard()`.
+      Cc["@mozilla.org/newMailNotificationService;1"].getService(
+        Ci.mozINewMailNotificationService
+      );
+      Cc["@mozilla.org/mail/notification-manager;1"].getService(
+        Ci.mozINewMailListener
+      );
+
       // Run the tabs restore method here since we're skipping the loading of
       // the Mail UI which would have taken care of this to properly handle
       // opened folders or messages in tabs.
       await atStartupRestoreTabs(false);
       gSpacesToolbar.onLoad();
     }
 
     // Show the end of year donation appeal page.
@@ -587,25 +595,35 @@ function switchToMailTab() {
   }
 }
 
 /**
  * Trigger the initialization of the entire UI. Called after the okCallback of
  * the emailWizard during a first run, or directly from the accountProvisioner
  * in case a user configures a new email account on first run.
  */
-async function loadPostAccountWizard() {
+async function loadPostAccountWizard(initNotifications = false) {
   InitMsgWindow();
 
   MigrateJunkMailSettings();
   MigrateFolderViews();
   MigrateOpenMessageBehavior();
 
   MailServices.accounts.setSpecialFolders();
 
+  if (initNotifications) {
+    // Start these services before `selectFirstFolder()` goes fetching new mail.
+    // Needs to be done after special folders have been set.
+    Cc["@mozilla.org/newMailNotificationService;1"].getService(
+      Ci.mozINewMailNotificationService
+    );
+    Cc["@mozilla.org/mail/notification-manager;1"].getService(
+      Ci.mozINewMailListener
+    );
+  }
   try {
     MailServices.accounts.loadVirtualFolders();
   } catch (e) {
     console.error(e);
   }
 
   // Restore the previous folder selection before shutdown, or select the first
   // inbox folder of a newly created account.
diff --git a/mail/components/MailGlue.jsm b/mail/components/MailGlue.jsm
--- a/mail/components/MailGlue.jsm
+++ b/mail/components/MailGlue.jsm
@@ -586,22 +586,16 @@ MailGlue.prototype = {
           .getService(Ci.nsIApplicationUpdateService)
           .checkForBackgroundUpdates();
       }
     }
   },
 
   _onFirstWindowLoaded() {
     // Start these services.
-    Cc["@mozilla.org/newMailNotificationService;1"].getService(
-      Ci.mozINewMailNotificationService
-    );
-    Cc["@mozilla.org/mail/notification-manager;1"].getService(
-      Ci.mozINewMailListener
-    );
     Cc["@mozilla.org/chat/logger;1"].getService(Ci.imILogger);
 
     this._checkForOldBuildUpdates();
 
     // On Windows 7 and above, initialize the jump list module.
     const WINTASKBAR_CONTRACTID = "@mozilla.org/windows-taskbar;1";
     if (
       WINTASKBAR_CONTRACTID in Cc &&
diff --git a/mailnews/base/src/MailNotificationService.jsm b/mailnews/base/src/MailNotificationService.jsm
--- a/mailnews/base/src/MailNotificationService.jsm
+++ b/mailnews/base/src/MailNotificationService.jsm
@@ -39,17 +39,21 @@ function NewMailNotificationService() {
   MailServices.mailSession.AddFolderListener(
     this,
     Ci.nsIFolderListener.intPropertyChanged |
       Ci.nsIFolderListener.boolPropertyChanged |
       Ci.nsIFolderListener.added |
       Ci.nsIFolderListener.removed |
       Ci.nsIFolderListener.propertyFlagChanged
   );
-  this._initUnreadCount();
+  // If we're counting new instead of unread, we don't need to expensively
+  // get the unread count for all folders.
+  if (!this.countNew) {
+    this._initUnreadCount();
+  }
 }
 
 NewMailNotificationService.prototype = {
   QueryInterface: ChromeUtils.generateQI([
     "nsIObserver",
     "nsIFolderListener",
     "mozINewMailNotificationService",
   ]),
