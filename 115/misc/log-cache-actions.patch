# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1732021753 -3600
# Parent  b84532fe6257ce66ce7fc6c52beebb35cbf60c0f

diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
@@ -17,8 +17,9 @@
 #include "nsServiceManagerUtils.h"
 
 /* for logging to Error Console */
 #include "nsIScriptError.h"
+#include "nsPrintfCString.h"
 #include "nsMsgUtils.h"
 
 nsMsgXFVirtualFolderDBView::nsMsgXFVirtualFolderDBView() {
   mSuppressMsgDisplay = false;
@@ -185,14 +186,27 @@ nsMsgXFVirtualFolderDBView::OnHdrPropert
 void nsMsgXFVirtualFolderDBView::UpdateCacheAndViewForFolder(
     nsIMsgFolder* folder, nsTArray<nsMsgKey> const& newHits) {
   nsCOMPtr<nsIMsgDatabase> db;
   nsresult rv = folder->GetMsgDatabaseLRU(getter_AddRefs(db));
+  nsCString baseUri;
+  folder->GetURI(baseUri);
   if (NS_SUCCEEDED(rv) && db) {
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
     nsTArray<nsMsgKey> badHits;
     rv = db->RefreshCache(searchUri, newHits, badHits);
     if (NS_SUCCEEDED(rv)) {
+      nsCString msg =
+
+          nsPrintfCString(
+              "Search folder %s: Cache for %s populated with new hits: %" PRIu64
+              ", removed: %" PRIu64,
+              searchUri.get(), baseUri.get(), newHits.Length(),
+              badHits.Length());
+      MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                       NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                       nsIScriptError::infoFlag);
+
       nsCOMPtr<nsIMsgDBHdr> badHdr;
       for (nsMsgKey badKey : badHits) {
         // ### of course, this isn't quite right, since we should be
         // using FindHdr, and we shouldn't be expanding the threads.
@@ -420,16 +434,25 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
     if (mJSTree) mJSTree->BeginUpdateBatch();
   }
 
   bool allScopesHaveCache = true;
+  nsAutoCString hits;
+  nsCString searchUri;
+  m_viewFolder->GetURI(searchUri);
   for (int32_t i = 0; i < scopeCount; i++) {
     nsMsgSearchScopeValue scopeId;
     nsCOMPtr<nsIMsgFolder> searchFolder;
     searchSession->GetNthSearchScope(i, &scopeId, getter_AddRefs(searchFolder));
     if (searchFolder) {
+      nsCString baseURI;
+      searchFolder->GetURI(baseURI);
+      if (hits.IsEmpty()) {
+        hits = baseURI + ": "_ns;
+      } else {
+        hits += ", "_ns + baseURI + ": "_ns;
+      }
+      int32_t baseHits = 0;
       nsCOMPtr<nsIMsgDatabase> searchDB;
-      nsCString searchUri;
-      m_viewFolder->GetURI(searchUri);
       nsresult rv = searchFolder->GetMsgDatabaseLRU(getter_AddRefs(searchDB));
       if (NS_SUCCEEDED(rv) && searchDB) {
         if (msgDBService)
           msgDBService->RegisterPendingListener(searchFolder, this);
@@ -443,23 +466,31 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
         bool hasMore;
         if (cachedHits) {
           nsresult rv = cachedHits->HasMoreElements(&hasMore);
           if (NS_SUCCEEDED(rv) && hasMore) {
-            mozilla::DebugOnly<nsMsgKey> prevKey = nsMsgKey_None;
             while (hasMore) {
               nsCOMPtr<nsIMsgDBHdr> header;
               rv = cachedHits->GetNext(getter_AddRefs(header));
-              if (header && NS_SUCCEEDED(rv)) {
-                nsMsgKey msgKey;
-                header->GetMessageKey(&msgKey);
-                NS_ASSERTION(prevKey == nsMsgKey_None || msgKey > prevKey,
-                             "cached Hits not sorted");
-#ifdef DEBUG
-                prevKey = msgKey;
-#endif
-                AddHdrFromFolder(header, searchFolder);
-                m_totalMessagesInView++;
-              } else {
+              if (!header) rv = NS_ERROR_NULL_POINTER;
+              if (NS_SUCCEEDED(rv)) {
+                do {
+                  nsMsgKey msgKey;
+                  rv = header->GetMessageKey(&msgKey);
+                  if (NS_FAILED(rv)) break;
+                  rv = AddHdrFromFolder(header, searchFolder);
+                  if (NS_FAILED(rv)) break;
+                  m_totalMessagesInView++;
+                  baseHits++;
+                } while (false);
+              }
+              if (NS_FAILED(rv)) {
+                nsCString msg = nsPrintfCString(
+                    "Search folder %s: Error %x restoring cache for folder %s, "
+                    "got to %" PRIu32 " headers",
+                    searchUri.get(), (uint32_t)rv, baseURI.get(), baseHits);
+                MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                                 NS_LITERAL_STRING_FROM_CSTRING(__FILE__),
+                                 __LINE__, nsIScriptError::errorFlag);
                 break;
               }
 
               cachedHits->HasMoreElements(&hasMore);
@@ -470,8 +501,9 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
         } else {
           allScopesHaveCache = false;
         }
       }
+      hits += nsPrintfCString("%" PRIi32, baseHits);
     }
   }
 
   if (!m_doingQuickSearch && !allScopesHaveCache) {
@@ -483,8 +515,14 @@ nsMsgXFVirtualFolderDBView::OnNewSearch(
 
   if (!m_doingQuickSearch && allScopesHaveCache) {
     m_usingCachedHits = true;
     searchSession->SuppressSearch(true);
+    nsCString msg = nsPrintfCString(
+        "Search folder %s: View populated with retrieved cache hits: %s",
+        searchUri.get(), hits.get());
+    MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                     NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                     nsIScriptError::infoFlag);
   } else {
     // Reset the total count, it will be increased in
     // `OnSearchHit()` which isn't called if we suppress the search.
     m_totalMessagesInView = 0;
diff --git a/mailnews/db/msgdb/src/nsMsgDatabase.cpp b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
--- a/mailnews/db/msgdb/src/nsMsgDatabase.cpp
+++ b/mailnews/db/msgdb/src/nsMsgDatabase.cpp
@@ -37,8 +37,12 @@
 #include "mozilla/Components.h"
 #include "mozilla/mailnews/MimeHeaderParser.h"
 #include "mozilla/intl/LocaleService.h"
 
+/* for logging to Error Console */
+#include "nsIScriptError.h"
+#include "nsMsgUtils.h"
+
 using namespace mozilla::mailnews;
 using namespace mozilla;
 
 #if defined(DEBUG_sspitzer_) || defined(DEBUG_seth_)
@@ -4608,9 +4612,10 @@ nsMsgDatabase::GetCachedHits(const nsACS
                 new nsMsgDBEnumerator(this, table, nullptr, nullptr));
   return NS_OK;
 }
 
-NS_IMETHODIMP nsMsgDatabase::InvalidateCache(const nsACString& aSearchFolderUri) {
+NS_IMETHODIMP nsMsgDatabase::InvalidateCache(
+    const nsACString& aSearchFolderUri) {
   // Mork doesn't offer a way to delete a table, and we can't update with
   // something invalid which we would detect later. So just make it empty.
   nsTArray<nsMsgKey> newHits;
   nsTArray<nsMsgKey> staleHits;
@@ -4736,8 +4741,35 @@ mdb_pos nsMsgDatabase::FindInsertIndexIn
 }
 NS_IMETHODIMP
 nsMsgDatabase::UpdateHdrInCache(const nsACString& aSearchFolderUri,
                                 nsIMsgDBHdr* aHdr, bool aAdd) {
+  nsCString msg;
+  nsMsgKey key2;
+  aHdr->GetMessageKey(&key2);
+  nsCString subject;
+  aHdr->GetSubject(subject);
+  PRTime date;
+  aHdr->GetDate(&date);
+  char dateBuf[64];
+  PRExplodedTime exploded;
+  PR_ExplodeTime(date, PR_GMTParameters, &exploded);
+  PR_FormatTimeUSEnglish(dateBuf, sizeof(dateBuf), "%a %b %d %H:%M:%S %Y",
+                         &exploded);
+  if (aAdd) {
+    msg = nsPrintfCString("Folder %s: Adding key=%" PRIu32
+                          ", date=%s, subject='%s'",
+                          PromiseFlatCString(aSearchFolderUri).get(), key2,
+                          dateBuf, subject.get());
+  } else {
+    msg = nsPrintfCString("Folder %s: Deleting key=%" PRIu32
+                          ", date=%s, subject='%s'",
+                          PromiseFlatCString(aSearchFolderUri).get(), key2,
+                          dateBuf, subject.get());
+  }
+  MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                   NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                   nsIScriptError::infoFlag);
+
   nsCOMPtr<nsIMdbTable> table;
   nsresult err =
       GetSearchResultsTable(aSearchFolderUri, true, getter_AddRefs(table));
   NS_ENSURE_SUCCESS(err, err);
