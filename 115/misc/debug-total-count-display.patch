# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Date 1730577088 -3600
# Parent  61c5b3bffd42ae7c1b51d189f0369e9e054b1cbf
Debug total count display.

diff --git a/mailnews/base/src/nsMsgQuickSearchDBView.cpp b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
--- a/mailnews/base/src/nsMsgQuickSearchDBView.cpp
+++ b/mailnews/base/src/nsMsgQuickSearchDBView.cpp
@@ -14,8 +14,13 @@
 #include "nsMsgMessageFlags.h"
 #include "nsMsgUtils.h"
 #include "nsIMsgSearchTerm.h"
 
+/* for logging to Error Console */
+#include "nsIScriptError.h"
+#include "nsPrintfCString.h"
+#include "nsMsgUtils.h"
+
 nsMsgQuickSearchDBView::nsMsgQuickSearchDBView() {
   m_usingCachedHits = false;
   m_cacheEmpty = true;
   m_doingQuickSearch = false;
@@ -290,19 +295,25 @@ nsMsgQuickSearchDBView::OnSearchHit(nsIM
 }
 
 NS_IMETHODIMP
 nsMsgQuickSearchDBView::OnSearchDone(nsresult status) {
-  uint32_t folderFlags = 0;
-  if (m_viewFolder) m_viewFolder->GetFlags(&folderFlags);
   if (!m_doingQuickSearch) {
     // This batch began in OnNewSearch.
     if (mJSTree) mJSTree->EndUpdateBatch();
   }
+
+  nsCString msg;
+  msg = nsPrintfCString("=== nsMsgQuickSearchDBView::OnSearchDone: status = %" PRIx32 ", total = %" PRIi64,
+                        status, m_origKeys.Length());
+  MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                   NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                   nsIScriptError::infoFlag);
+
   // We're a single-folder virtual folder if viewFolder != folder, and that is
   // the only case in which we want to be messing about with a results cache
   // or unread counts.
   if (!m_doingQuickSearch && !m_usingCachedHits && m_db && m_viewFolder &&
-      m_viewFolder != m_folder) {
+      m_viewFolder != m_folder && status != NS_MSG_SEARCH_INTERRUPTED) {
     nsTArray<nsMsgKey> keyArray;
     nsCString searchUri;
     m_viewFolder->GetURI(searchUri);
     uint32_t count = m_hdrHits.Count();
@@ -334,8 +345,19 @@ nsMsgQuickSearchDBView::OnSearchDone(nsr
       bool isRead;
       m_db->IsRead(m_origKeys[i], &isRead);
       if (!isRead) numUnread++;
     }
+
+    nsCOMPtr<nsIMsgFolder> folder;
+    virtDatabase->GetFolder(getter_AddRefs(folder));
+    nsCString uri;
+    if (folder) folder->GetURI(uri);
+    msg = nsPrintfCString("=== nsMsgQuickSearchDBView::OnSearchDone: %s, SetNumMessages(%" PRIi64 ")",
+                          uri.get(), numTotal);
+    MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                     NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                     nsIScriptError::infoFlag);
+
     dbFolderInfo->SetNumUnreadMessages(numUnread);
     dbFolderInfo->SetNumMessages(numTotal);
     m_viewFolder->UpdateSummaryTotals(true);  // force update from db.
     virtDatabase->Commit(nsMsgDBCommitType::kLargeCommit);
diff --git a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
--- a/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
+++ b/mailnews/base/src/nsMsgXFVirtualFolderDBView.cpp
@@ -15,8 +15,13 @@
 #include "nsIMsgSearchTerm.h"
 #include "nsMsgMessageFlags.h"
 #include "nsServiceManagerUtils.h"
 
+/* for logging to Error Console */
+#include "nsIScriptError.h"
+#include "nsPrintfCString.h"
+#include "nsMsgUtils.h"
+
 nsMsgXFVirtualFolderDBView::nsMsgXFVirtualFolderDBView() {
   mSuppressMsgDisplay = false;
   m_doingSearch = false;
   m_doingQuickSearch = false;
@@ -282,8 +287,14 @@ nsMsgXFVirtualFolderDBView::OnSearchDone
   if (!m_doingQuickSearch) {
     // This batch began in OnNewSearch.
     if (mJSTree) mJSTree->EndUpdateBatch();
   }
+  nsCString msg;
+  msg = nsPrintfCString("=== nsMsgXFVirtualFolderDBView::OnSearchDone: status = %" PRIx32 ", total = %" PRIi32,
+                        status, m_totalMessagesInView);
+  MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                   NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                   nsIScriptError::infoFlag);
 
   NS_ENSURE_TRUE(m_viewFolder, NS_ERROR_NOT_INITIALIZED);
 
   // Handle any non verified hits we haven't handled yet.
@@ -300,37 +311,52 @@ nsMsgXFVirtualFolderDBView::OnSearchDone
   mDeleteModel = nsMsgImapDeleteModels::MoveToTrash;
   nsIMsgFolder* curFolder = m_folders.SafeObjectAt(0);
   if (curFolder) GetImapDeleteModel(curFolder);
 
-  nsCOMPtr<nsIMsgDatabase> virtDatabase;
-  nsCOMPtr<nsIDBFolderInfo> dbFolderInfo;
-  nsresult rv = m_viewFolder->GetDBFolderInfoAndDB(
-      getter_AddRefs(dbFolderInfo), getter_AddRefs(virtDatabase));
-  NS_ENSURE_SUCCESS(rv, rv);
-  // Count up the number of unread and total messages from the view, and set
-  // those in the folder - easier than trying to keep the count up to date in
-  // the face of search hits coming in while the user is reading/deleting
-  // messages.
-  uint32_t numUnread = 0;
-  for (uint32_t i = 0; i < m_flags.Length(); i++) {
-    if (m_flags[i] & nsMsgMessageFlags::Elided) {
-      nsCOMPtr<nsIMsgThread> thread;
-      GetThreadContainingIndex(i, getter_AddRefs(thread));
-      if (thread) {
-        uint32_t unreadInThread;
-        thread->GetNumUnreadChildren(&unreadInThread);
-        numUnread += unreadInThread;
+  // The following should be necessary when `m_usingCachedHits` ist true,
+  // but it won't hurt to adjust the counts which what we restored from cache.
+  if (!m_doingQuickSearch && status != NS_MSG_SEARCH_INTERRUPTED) {
+    nsCOMPtr<nsIMsgDatabase> virtDatabase;
+    nsCOMPtr<nsIDBFolderInfo> dbFolderInfo;
+    nsresult rv = m_viewFolder->GetDBFolderInfoAndDB(
+        getter_AddRefs(dbFolderInfo), getter_AddRefs(virtDatabase));
+    NS_ENSURE_SUCCESS(rv, rv);
+    // Count up the number of unread and total messages from the view, and set
+    // those in the folder - easier than trying to keep the count up to date in
+    // the face of search hits coming in while the user is reading/deleting
+    // messages.
+    uint32_t numUnread = 0;
+    for (uint32_t i = 0; i < m_flags.Length(); i++) {
+      if (m_flags[i] & nsMsgMessageFlags::Elided) {
+        nsCOMPtr<nsIMsgThread> thread;
+        GetThreadContainingIndex(i, getter_AddRefs(thread));
+        if (thread) {
+          uint32_t unreadInThread;
+          thread->GetNumUnreadChildren(&unreadInThread);
+          numUnread += unreadInThread;
+        }
+      } else {
+        if (!(m_flags[i] & nsMsgMessageFlags::Read)) numUnread++;
       }
-    } else {
-      if (!(m_flags[i] & nsMsgMessageFlags::Read)) numUnread++;
     }
+
+    nsCOMPtr<nsIMsgFolder> folder;
+    virtDatabase->GetFolder(getter_AddRefs(folder));
+    nsCString uri;
+    if (folder) folder->GetURI(uri);
+    msg = nsPrintfCString("=== nsMsgXFVirtualFolderDBView::OnSearchDone: %s, SetNumMessages(%" PRIi32 ")",
+                          uri.get(), m_totalMessagesInView);
+    MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                     NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                     nsIScriptError::infoFlag);
+
+    dbFolderInfo->SetNumUnreadMessages(numUnread);
+    dbFolderInfo->SetNumMessages(m_totalMessagesInView);
+    // Force update from db.
+    m_viewFolder->UpdateSummaryTotals(true);
+    virtDatabase->Commit(nsMsgDBCommitType::kLargeCommit);
   }
 
-  dbFolderInfo->SetNumUnreadMessages(numUnread);
-  dbFolderInfo->SetNumMessages(m_totalMessagesInView);
-  // Force update from db.
-  m_viewFolder->UpdateSummaryTotals(true);
-  virtDatabase->Commit(nsMsgDBCommitType::kLargeCommit);
   if (!m_sortValid && m_sortType != nsMsgViewSortType::byThread &&
       !(m_viewFlags & nsMsgViewFlagsType::kThreadedDisplay)) {
     // Sort the results.
     m_sortValid = false;
@@ -338,9 +364,9 @@ nsMsgXFVirtualFolderDBView::OnSearchDone
   }
 
   m_foldersSearchingOver.Clear();
   m_curFolderGettingHits = nullptr;
-  return rv;
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 nsMsgXFVirtualFolderDBView::OnNewSearch() {
diff --git a/mailnews/db/msgdb/public/nsDBFolderInfo.h b/mailnews/db/msgdb/public/nsDBFolderInfo.h
--- a/mailnews/db/msgdb/public/nsDBFolderInfo.h
+++ b/mailnews/db/msgdb/public/nsDBFolderInfo.h
@@ -88,8 +88,9 @@ class nsDBFolderInfo : public nsIDBFolde
   nsresult AdjustHighWater(nsMsgKey highWater, bool force);
 
   void
   ReleaseExternalReferences();  // let go of any references to other objects.
+  void DumpTotal(const char* where);
 
   int64_t m_folderSize;
   int64_t m_expungedBytes;  // sum of size of deleted messages in folder
   uint32_t m_folderDate;
diff --git a/mailnews/db/msgdb/src/nsDBFolderInfo.cpp b/mailnews/db/msgdb/src/nsDBFolderInfo.cpp
--- a/mailnews/db/msgdb/src/nsDBFolderInfo.cpp
+++ b/mailnews/db/msgdb/src/nsDBFolderInfo.cpp
@@ -15,8 +15,16 @@
 #include "nsIMsgDBView.h"
 #include "nsServiceManagerUtils.h"
 #include "nsImapCore.h"
 
+/* for logging to Error Console */
+#include "nsIScriptError.h"
+#include "nsPrintfCString.h"
+#include "nsMsgUtils.h"
+/* Dump JS Stack */
+#include "xpcpublic.h"
+#include "nsContentUtils.h"
+
 static const char* kDBFolderInfoScope = "ns:msg:db:row:scope:dbfolderinfo:all";
 static const char* kDBFolderInfoTableKind = "ns:msg:db:table:kind:dbfolderinfo";
 
 struct mdbOid gDBFolderInfoOID;
@@ -362,8 +370,23 @@ NS_IMETHODIMP nsDBFolderInfo::ChangeNumU
   return SetUint32PropertyWithToken(m_numUnreadMessagesColumnToken,
                                     m_numUnreadMessages);
 }
 
+void nsDBFolderInfo::DumpTotal(const char* where) {
+  if (!m_mdb) return;
+  nsCOMPtr<nsIMsgFolder> folder;
+  m_mdb->GetFolder(getter_AddRefs(folder));
+  if (!folder) return;
+  nsCString uri;
+  folder->GetURI(uri);
+  nsCString msg;
+  msg = nsPrintfCString("=== %s: %s: total = %" PRIi32, where, uri.get(),
+                        m_numMessages);
+  MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                   NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                   nsIScriptError::infoFlag);
+}
+
 NS_IMETHODIMP nsDBFolderInfo::ChangeNumMessages(int32_t delta) {
   m_numMessages += delta;
   // m_numMessages can never be set to negative.
   if (m_numMessages < 0) {
@@ -371,8 +394,9 @@ NS_IMETHODIMP nsDBFolderInfo::ChangeNumM
     NS_ASSERTION(false, "num messages can't be < 0");
 #endif
     m_numMessages = 0;
   }
+  DumpTotal("ChangeNumMessages");
   return SetUint32PropertyWithToken(m_numMessagesColumnToken, m_numMessages);
 }
 
 NS_IMETHODIMP nsDBFolderInfo::GetNumUnreadMessages(int32_t* result) {
@@ -387,13 +411,25 @@ NS_IMETHODIMP nsDBFolderInfo::SetNumUnre
 }
 
 NS_IMETHODIMP nsDBFolderInfo::GetNumMessages(int32_t* result) {
   *result = m_numMessages;
+  DumpTotal("GetNumMessages");
   return NS_OK;
 }
 
 NS_IMETHODIMP nsDBFolderInfo::SetNumMessages(int32_t numMessages) {
   m_numMessages = numMessages;
+  DumpTotal("SetNumMessages");
+  JSContext* cx = nsContentUtils::GetCurrentJSContext();
+  if (cx) {
+    JS::UniqueChars buf = xpc_PrintJSStack(cx, false, false, false);
+    nsCString msg;
+    const char* stack = buf.get();
+    msg = nsPrintfCString("=== SetNumMessages: JS Stack %s", stack);
+    MsgLogToConsole4(NS_ConvertUTF8toUTF16(msg),
+                     NS_LITERAL_STRING_FROM_CSTRING(__FILE__), __LINE__,
+                     nsIScriptError::infoFlag);
+  }
   return SetUint32PropertyWithToken(m_numMessagesColumnToken, m_numMessages);
 }
 
 NS_IMETHODIMP nsDBFolderInfo::GetExpungedBytes(int64_t* result) {
diff --git a/mailnews/search/src/nsMsgSearchSession.cpp b/mailnews/search/src/nsMsgSearchSession.cpp
--- a/mailnews/search/src/nsMsgSearchSession.cpp
+++ b/mailnews/search/src/nsMsgSearchSession.cpp
@@ -31,8 +31,9 @@ nsMsgSearchSession::nsMsgSearchSession()
   m_expressionTree = nullptr;
   m_searchPaused = false;
   m_iListener = -1;
   m_suppressed = false;
+  m_interrupted = false;
 }
 
 nsMsgSearchSession::~nsMsgSearchSession() {
   InterruptSearch();
@@ -211,8 +212,9 @@ NS_IMETHODIMP nsMsgSearchSession::Suppre
   return NS_OK;
 }
 
 NS_IMETHODIMP nsMsgSearchSession::Search(nsIMsgWindow* aWindow) {
+  m_interrupted = false;
   nsresult rv = Initialize();
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsCOMPtr<nsIMsgSearchNotify> listener;
@@ -228,9 +230,9 @@ NS_IMETHODIMP nsMsgSearchSession::Search
   m_msgWindowWeak = do_GetWeakReference(aWindow);
 
   if (m_suppressed) {
     m_suppressed = false;
-    NotifyListenersDone(NS_OK);
+    NotifyListenersDone(m_interrupted ? NS_MSG_SEARCH_INTERRUPTED : NS_OK);
     return NS_OK;
   }
 
   return BeginSearching();
@@ -250,8 +252,9 @@ NS_IMETHODIMP nsMsgSearchSession::Interr
     // another url
   }
   if (m_backgroundTimer) {
     m_backgroundTimer->Cancel();
+    m_interrupted = true;
     NotifyListenersDone(NS_MSG_SEARCH_INTERRUPTED);
 
     m_backgroundTimer = nullptr;
   }
diff --git a/mailnews/search/src/nsMsgSearchSession.h b/mailnews/search/src/nsMsgSearchSession.h
--- a/mailnews/search/src/nsMsgSearchSession.h
+++ b/mailnews/search/src/nsMsgSearchSession.h
@@ -81,8 +81,9 @@ class nsMsgSearchSession : public nsIMsg
   nsCString m_runningUrl;  // The url for the current search
   nsCOMPtr<nsITimer> m_backgroundTimer;
   bool m_searchPaused;
   bool m_suppressed;
+  bool m_interrupted;
   nsMsgSearchBoolExpression* m_expressionTree;
 };
 
 #endif
