# HG changeset patch
# User Betterbird <betterbird@betterbird.eu>
# Parent  af910fccf11fdbeed4f4d6dc82162a1ede7e0623
Misc: Disable outdated Betterbird language packs.

diff --git a/toolkit/components/extensions/Extension.sys.mjs b/toolkit/components/extensions/Extension.sys.mjs
--- a/toolkit/components/extensions/Extension.sys.mjs
+++ b/toolkit/components/extensions/Extension.sys.mjs
@@ -3766,16 +3766,23 @@ export class Langpack extends ExtensionD
   }
 
   async startup(reason) {
     this.chromeRegistryHandle = null;
     if (/langpack.*thunderbird/.test(this.resourceURL)) {
       Cu.reportError(`Langpack: Ignoring Thunderbird language pack ${this.resourceURL}`);
       return;
     }
+    // With three digits we're good for the next 75 years ;-)
+    let majorVersion = AppConstants.MOZ_APP_VERSION.substring(0,4);
+    if (/langpack.*betterbird/.test(this.resourceURL) &&
+        !this.manifestCacheKey[1].startsWith(majorVersion)) {
+      Cu.reportError(`Compat: Ignoring outdated Betterbird language pack ${this.resourceURL}`);
+      return false;
+    }
     if (this.startupData.chromeEntries.length) {
       const manifestURI = Services.io.newURI(
         "manifest.json",
         null,
         this.rootURI
       );
       this.chromeRegistryHandle = lazy.aomStartup.registerChrome(
         manifestURI,
diff --git a/toolkit/mozapps/extensions/internal/XPIDatabase.jsm b/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
--- a/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIDatabase.jsm
@@ -16,16 +16,20 @@
 
 var EXPORTED_SYMBOLS = [
   "AddonInternal",
   "BuiltInThemesHelpers",
   "XPIDatabase",
   "XPIDatabaseReconcile",
 ];
 
+const { AppConstants }  = ChromeUtils.importESModule(
+  "resource://gre/modules/AppConstants.sys.mjs"
+);
+
 const { XPCOMUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/XPCOMUtils.sys.mjs"
 );
 
 const { FileUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/FileUtils.sys.mjs"
 );
 
@@ -684,16 +688,23 @@ class AddonInternal {
       version = aPlatformVersion;
     }
 
     if (this.type == "locale" && /langpack.*thunderbird/.test(this.id)) {
       // Declare Thunderbird language packs incompatible.
       Cu.reportError(`Compat: Ignoring Thunderbird language pack ${this.id}`);
       return false;
     }
+    // With three digits we're good for the next 75 years ;-)
+    let majorVersion = AppConstants.MOZ_APP_VERSION.substring(0,4);
+    if (this.type == "locale" && /langpack.*betterbird/.test(this.id) &&
+        !this.version.startsWith(majorVersion)) {
+      Cu.reportError(`Compat: Ignoring outdated Betterbird language pack ${this.id}`);
+      return false;
+    }
 
     // Only extensions and dictionaries can be compatible by default; themes
     // and language packs always use strict compatibility checking.
     // Dictionaries are compatible by default unless requested by the dictinary.
     if (
       !this.strictCompatibility &&
       (!lazy.AddonManager.strictCompatibility || this.type == "dictionary")
     ) {
